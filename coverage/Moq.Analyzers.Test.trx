<?xml version="1.0" encoding="utf-8"?>
<TestRun id="93d782ab-7ba5-4768-9104-9662ac3c6746" name="@fv-az1057-923 2025-06-21 12:04:34" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-06-21T12:04:34.7789678+00:00" queuing="2025-06-21T12:04:34.7789679+00:00" start="2025-06-21T12:04:32.6377995+00:00" finish="2025-06-21T12:05:57.8170023+00:00" />
  <TestSettings name="default" id="16506dde-002a-40dd-bbf9-cd90121f0134">
    <Deployment runDeploymentRoot="_fv-az1057-923_2025-06-21_12_04_34" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="0fe04644-1ae0-4514-afa6-c1a99a23b6d6" testId="c8bce6de-69a0-d3ef-583c-aee1c6e23564" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock2 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:02.9447762" startTime="2025-06-21T12:04:36.0171855+00:00" endTime="2025-06-21T12:05:38.3274010+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0fe04644-1ae0-4514-afa6-c1a99a23b6d6" />
    <UnitTestResult executionId="81abee48-9efe-4f01-b8e8-7a5e80cda96f" testId="3207fedd-90a4-cd88-425b-109a5ca51fab" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" computerName="fv-az1057-923" duration="00:01:05.3080529" startTime="2025-06-21T12:04:37.0163645+00:00" endTime="2025-06-21T12:05:41.0043256+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81abee48-9efe-4f01-b8e8-7a5e80cda96f" />
    <UnitTestResult executionId="8195bcca-5e6e-4d38-8f1f-d8b743e566c2" testId="c3875559-ba6c-d8ca-1153-59b82a603528" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.7581077" startTime="2025-06-21T12:04:35.3310386+00:00" endTime="2025-06-21T12:05:38.7875768+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8195bcca-5e6e-4d38-8f1f-d8b743e566c2" />
    <UnitTestResult executionId="e56fec67-2dfb-4f8f-bde6-f6170a7dc334" testId="222062f1-b98a-6d67-5177-f3954ec794f6" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" computerName="fv-az1057-923" duration="00:01:09.3305193" startTime="2025-06-21T12:04:35.2646793+00:00" endTime="2025-06-21T12:05:44.3160574+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e56fec67-2dfb-4f8f-bde6-f6170a7dc334">
      <Output>
        <StdOut>public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAsync()).ReturnsAsync(string.Empty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7fc88adc-a289-4803-a79f-d9067235b1ea" testId="65ec4905-d3ba-4b45-9387-b7cd5e05e6b3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:02.4076673" startTime="2025-06-21T12:04:36.0196114+00:00" endTime="2025-06-21T12:05:37.8002909+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7fc88adc-a289-4803-a79f-d9067235b1ea" />
    <UnitTestResult executionId="7f7bf15c-5f0d-4d1f-8742-d4f4c904bbaf" testId="af83e308-fee5-ce92-e01f-957aff26e23f" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:02.1139632" startTime="2025-06-21T12:04:35.6473703+00:00" endTime="2025-06-21T12:05:37.2689728+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f7bf15c-5f0d-4d1f-8742-d4f4c904bbaf" />
    <UnitTestResult executionId="2869457e-d483-46f8-825e-5291ac6c2b90" testId="495f0522-c9a7-b1e6-2d9c-1f59f26089ed" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldStillReportDiagnosticsWhenNotDisabled(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:00:53.9849625" startTime="2025-06-21T12:04:35.1611563+00:00" endTime="2025-06-21T12:05:28.9770194+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2869457e-d483-46f8-825e-5291ac6c2b90" />
    <UnitTestResult executionId="fdf59976-21c1-473f-a811-76e03b97951b" testId="e2391ef7-c0d1-0db9-bdd4-ef2c1c91aa1e" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" computerName="fv-az1057-923" duration="00:01:20.6319578" startTime="2025-06-21T12:04:34.8622283+00:00" endTime="2025-06-21T12:05:55.3929774+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fdf59976-21c1-473f-a811-76e03b97951b" />
    <UnitTestResult executionId="dedce4af-bd17-4deb-acf0-5f7d38a3294e" testId="a899a9ac-d8ea-b440-f174-6dea5d42448b" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" computerName="fv-az1057-923" duration="00:01:09.8795692" startTime="2025-06-21T12:04:34.9956147+00:00" endTime="2025-06-21T12:05:44.7228713+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dedce4af-bd17-4deb-acf0-5f7d38a3294e">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(42);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f64ab5c-818a-4941-9816-ddbd3a765f92" testId="34518a7a-1cd9-d74b-3938-aabd99247f20" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:10.9464567" startTime="2025-06-21T12:04:36.7547856+00:00" endTime="2025-06-21T12:05:46.6140412+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f64ab5c-818a-4941-9816-ddbd3a765f92">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6702b59b-ff7e-456a-a27a-76d417d31ef5" testId="df8d35b2-59ee-479c-1f46-6fab45d2c7b0" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" computerName="fv-az1057-923" duration="00:01:06.3091411" startTime="2025-06-21T12:04:35.8226032+00:00" endTime="2025-06-21T12:05:41.5720838+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6702b59b-ff7e-456a-a27a-76d417d31ef5">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="128e259e-d552-4bb7-87fa-af3208292666" testId="cf8e3931-af37-2b1e-2602-85f7f872e277" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:00:52.4762963" startTime="2025-06-21T12:04:36.3194989+00:00" endTime="2025-06-21T12:05:27.9665312+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="128e259e-d552-4bb7-87fa-af3208292666" />
    <UnitTestResult executionId="27148e31-7aca-44d8-8662-0bd8bfb8ce19" testId="0435a85c-5725-2ad5-34d3-c5bc557cbdba" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" computerName="fv-az1057-923" duration="00:00:58.1709115" startTime="2025-06-21T12:04:36.0375801+00:00" endTime="2025-06-21T12:05:33.5733741+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27148e31-7aca-44d8-8662-0bd8bfb8ce19" />
    <UnitTestResult executionId="42dadc7b-df53-4cb0-8bde-088b9eab87a9" testId="0795ba85-ce1d-73eb-4b58-a8665266cd8b" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" computerName="fv-az1057-923" duration="00:01:07.6302245" startTime="2025-06-21T12:04:34.8719969+00:00" endTime="2025-06-21T12:05:42.4099362+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42dadc7b-df53-4cb0-8bde-088b9eab87a9" />
    <UnitTestResult executionId="920a5318-ed1b-4021-a4e4-8d29cececa26" testId="fd2d9d46-a5ea-96f9-1301-506ce9046dd5" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x&quot;···)" computerName="fv-az1057-923" duration="00:01:10.6377403" startTime="2025-06-21T12:04:37.0648575+00:00" endTime="2025-06-21T12:05:46.3930465+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="920a5318-ed1b-4021-a4e4-8d29cececa26">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c74fe798-159d-4ae9-8aa7-ef4efe4d53cd" testId="80ce2de6-bcd5-2ea5-e710-7a2854074a19" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:05.5181736" startTime="2025-06-21T12:04:35.0716230+00:00" endTime="2025-06-21T12:05:40.3845447+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c74fe798-159d-4ae9-8aa7-ef4efe4d53cd" />
    <UnitTestResult executionId="0bfa793f-edff-4d38-beb1-4bfc8948dcbc" testId="feb836c1-b7dc-030d-9724-d1e765d27e98" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:18.6159191" startTime="2025-06-21T12:04:35.4223251+00:00" endTime="2025-06-21T12:05:53.6894627+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bfa793f-edff-4d38-beb1-4bfc8948dcbc" />
    <UnitTestResult executionId="e24a20e1-1991-402c-bd83-cbd78f244514" testId="fdfbd869-baaa-2aa2-9650-f88e92e18cee" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:00:57.8672094" startTime="2025-06-21T12:04:37.0137502+00:00" endTime="2025-06-21T12:05:33.5602015+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e24a20e1-1991-402c-bd83-cbd78f244514" />
    <UnitTestResult executionId="0e0115e6-68f8-47ba-a1ba-cecffb52adb0" testId="215393d0-79a5-1468-c52e-f6e39820fec4" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5061383" startTime="2025-06-21T12:04:34.9623175+00:00" endTime="2025-06-21T12:05:54.3330707+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e0115e6-68f8-47ba-a1ba-cecffb52adb0">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(42);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14231bb3-6440-4bdf-9e18-c0de990b58d8" testId="453ee420-0b7b-27c4-aef3-03698ce46a66" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:05.8344173" startTime="2025-06-21T12:04:36.9942170+00:00" endTime="2025-06-21T12:05:41.5212742+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14231bb3-6440-4bdf-9e18-c0de990b58d8">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd87314c-a553-47b4-ae16-195de6f31eb0" testId="34df28b6-89bc-581f-3ae9-0331896f7b76" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" computerName="fv-az1057-923" duration="00:01:18.0542023" startTime="2025-06-21T12:04:36.3862342+00:00" endTime="2025-06-21T12:05:53.6328543+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd87314c-a553-47b4-ae16-195de6f31eb0" />
    <UnitTestResult executionId="882f93b6-6315-4f91-91c1-2349deac9582" testId="f7cad1de-0cf4-e0f0-de34-0549ffe07d6a" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:12.7555749" startTime="2025-06-21T12:04:35.7829151+00:00" endTime="2025-06-21T12:05:47.9813911+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="882f93b6-6315-4f91-91c1-2349deac9582" />
    <UnitTestResult executionId="f5ddb297-9063-4c4b-9e2e-cbec90a24087" testId="e9f1f437-597a-3172-349d-8e27eda6f83e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:51.8292108" startTime="2025-06-21T12:04:36.1345769+00:00" endTime="2025-06-21T12:05:27.2834435+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5ddb297-9063-4c4b-9e2e-cbec90a24087" />
    <UnitTestResult executionId="b8426158-5160-4f8e-af93-62d24c2149fd" testId="f3a4261e-92ac-644f-d1da-7742eb54c855" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.8283023" startTime="2025-06-21T12:04:35.3679641+00:00" endTime="2025-06-21T12:05:51.8470051+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8426158-5160-4f8e-af93-62d24c2149fd" />
    <UnitTestResult executionId="a9cdb98c-cbbc-4098-acd7-151e2dfcb992" testId="307430d6-addc-611e-b95a-7924122b9d9e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" computerName="fv-az1057-923" duration="00:00:51.5921809" startTime="2025-06-21T12:04:36.0193702+00:00" endTime="2025-06-21T12:05:26.9769673+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9cdb98c-cbbc-4098-acd7-151e2dfcb992" />
    <UnitTestResult executionId="f0d3417c-1a27-4ed6-a6dc-7edb1867b10c" testId="7a986896-84dd-38c7-3f2f-1056e939f372" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7865580" startTime="2025-06-21T12:04:36.5539767+00:00" endTime="2025-06-21T12:05:55.3709101+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0d3417c-1a27-4ed6-a6dc-7edb1867b10c" />
    <UnitTestResult executionId="4436e3a5-38be-4bc1-8ca8-103303fd1cd8" testId="3b353857-5478-4e57-d2e1-522e54038d67" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.1183821" startTime="2025-06-21T12:04:36.3808552+00:00" endTime="2025-06-21T12:05:38.6274659+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4436e3a5-38be-4bc1-8ca8-103303fd1cd8" />
    <UnitTestResult executionId="543b5818-355e-400e-919b-fc42ace0e9e5" testId="e60c9546-4b08-557a-7f8b-315299424fdf" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_IEnumerable_ReturnsNull_WhenMultipleMatches" computerName="fv-az1057-923" duration="00:00:00.0007059" startTime="2025-06-21T12:04:36.6541939+00:00" endTime="2025-06-21T12:04:36.6545146+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="543b5818-355e-400e-919b-fc42ace0e9e5" />
    <UnitTestResult executionId="de22bb7a-e919-49e9-a422-b7472b34aa86" testId="c013d0c7-26ac-c939-2ea3-38bec193f1f4" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:00.9464859" startTime="2025-06-21T12:04:35.1423158+00:00" endTime="2025-06-21T12:05:35.8752522+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de22bb7a-e919-49e9-a422-b7472b34aa86" />
    <UnitTestResult executionId="eb03a9c0-6449-4ea9-8691-00973833ff8d" testId="e6ad22b3-3797-657d-5dc3-fa2762249d95" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:58.5011699" startTime="2025-06-21T12:04:36.0354189+00:00" endTime="2025-06-21T12:05:33.9021737+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eb03a9c0-6449-4ea9-8691-00973833ff8d" />
    <UnitTestResult executionId="0fa815ed-1942-4d2e-a3e5-15394033a52a" testId="e0ae0ffa-b00b-cf15-e137-d044388a5bc4" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:13.9921874" startTime="2025-06-21T12:04:34.6629043+00:00" endTime="2025-06-21T12:05:48.6830262+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0fa815ed-1942-4d2e-a3e5-15394033a52a" />
    <UnitTestResult executionId="6001d685-16cc-4236-95ce-0d3a33c2a2b9" testId="c9b7ae5d-6fdd-5595-bb78-e18939d81c9d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:52.1907367" startTime="2025-06-21T12:04:36.0294425+00:00" endTime="2025-06-21T12:05:27.5980804+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6001d685-16cc-4236-95ce-0d3a33c2a2b9" />
    <UnitTestResult executionId="51d2f45a-74d2-4f05-b4bd-805f11d0c605" testId="4c164048-b2c2-047c-2865-01b3b2d926be" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" computerName="fv-az1057-923" duration="00:01:20.3734103" startTime="2025-06-21T12:04:34.6926809+00:00" endTime="2025-06-21T12:05:55.0719998+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51d2f45a-74d2-4f05-b4bd-805f11d0c605">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b56f2d12-7170-457f-8cb5-6fd198d6507f" testId="18a7724e-1d27-ff07-fe96-877f46b00d6b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:10.9329379" startTime="2025-06-21T12:04:36.6200021+00:00" endTime="2025-06-21T12:05:46.5342983+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b56f2d12-7170-457f-8cb5-6fd198d6507f" />
    <UnitTestResult executionId="25e201c5-2913-421d-87fa-497b4d0581ea" testId="5b82b4ff-b326-8dd3-15aa-f9ed0cb8567f" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:09.6956679" startTime="2025-06-21T12:04:34.9779837+00:00" endTime="2025-06-21T12:05:44.5274651+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25e201c5-2913-421d-87fa-497b4d0581ea">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws&lt;InvalidOperationException&gt;();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2c6b03c-fc77-4963-9faa-5ca55809dd79" testId="267a53be-79ea-b7af-00b5-30631ccf5aac" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" computerName="fv-az1057-923" duration="00:00:51.4340197" startTime="2025-06-21T12:04:35.0108340+00:00" endTime="2025-06-21T12:05:26.2739995+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2c6b03c-fc77-4963-9faa-5ca55809dd79">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f8eee4a4-f6bf-49ee-b5d4-f6a20ece9771" testId="96c1198b-4b2c-7824-8f08-59e24623e3bb" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:00:52.1435670" startTime="2025-06-21T12:04:36.2795492+00:00" endTime="2025-06-21T12:05:27.6122471+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8eee4a4-f6bf-49ee-b5d4-f6a20ece9771" />
    <UnitTestResult executionId="4a356fee-6692-4adc-bfd8-462cd5883d1e" testId="447c0cdb-b8ac-e10a-234f-e40236523e72" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" computerName="fv-az1057-923" duration="00:01:12.1211552" startTime="2025-06-21T12:04:34.9843216+00:00" endTime="2025-06-21T12:05:46.9509409+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a356fee-6692-4adc-bfd8-462cd5883d1e">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ab977550-7a4c-4a43-82e8-93a541637aa6" testId="14bd3c72-e5fc-2f8c-7d5a-2b3635605709" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.3936032" startTime="2025-06-21T12:04:35.3325676+00:00" endTime="2025-06-21T12:05:51.4054953+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab977550-7a4c-4a43-82e8-93a541637aa6" />
    <UnitTestResult executionId="3409b579-d2bf-4946-bc9e-03653c1bcb69" testId="e72f4a40-11e0-3856-6f27-9e62d9bf28d8" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:09.5275003" startTime="2025-06-21T12:04:36.7256837+00:00" endTime="2025-06-21T12:05:45.2093356+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3409b579-d2bf-4946-bc9e-03653c1bcb69">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback({|Moq1100:(string s1, int i1)|} =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20bb08c9-b1e6-4909-81ba-58f22ff2a014" testId="28cb3145-b2fc-c564-91de-5cb0cfd0b9de" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:00:53.4619256" startTime="2025-06-21T12:04:35.1368343+00:00" endTime="2025-06-21T12:05:28.3613092+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20bb08c9-b1e6-4909-81ba-58f22ff2a014" />
    <UnitTestResult executionId="c7465ff7-dc98-461e-a889-e5c81223e3d1" testId="c4f4118a-4e5b-a60c-768e-fefaf93cc854" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:01.6125552" startTime="2025-06-21T12:04:35.8300955+00:00" endTime="2025-06-21T12:05:36.9340393+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7465ff7-dc98-461e-a889-e5c81223e3d1" />
    <UnitTestResult executionId="acdb8802-3db2-4e2a-a781-e7f39e3fab82" testId="d3324c82-ef5a-5fdb-6786-34dee5cc16b5" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" computerName="fv-az1057-923" duration="00:01:09.7777758" startTime="2025-06-21T12:04:34.9000081+00:00" endTime="2025-06-21T12:05:44.5931363+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="acdb8802-3db2-4e2a-a781-e7f39e3fab82">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ddbe9f39-765b-4ff2-b4eb-82937ad6d2ac" testId="ff67983f-a08d-8ae6-30f8-797fe5ebc29b" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:08.0163550" startTime="2025-06-21T12:04:34.9591436+00:00" endTime="2025-06-21T12:05:42.8351005+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ddbe9f39-765b-4ff2-b4eb-82937ad6d2ac">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws(new ArgumentException());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d6cdff2-a89b-442b-8422-ac603726e689" testId="b30bd7c0-056b-404c-ca86-6df314217d41" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:00:56.8569780" startTime="2025-06-21T12:04:35.1902091+00:00" endTime="2025-06-21T12:05:31.8078422+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d6cdff2-a89b-442b-8422-ac603726e689" />
    <UnitTestResult executionId="f7144d0e-2e20-48a6-9cc0-1acf31e5b670" testId="e0de6683-ea88-c688-a958-3a7680427192" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" computerName="fv-az1057-923" duration="00:01:01.0046270" startTime="2025-06-21T12:04:35.9473991+00:00" endTime="2025-06-21T12:05:36.3108659+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7144d0e-2e20-48a6-9cc0-1acf31e5b670">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetString(It.IsRegex(@"\d+")));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0635214d-3e57-4b22-b811-7b599163b61a" testId="cfddaee7-c7bc-f787-3555-eace198d730c" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" computerName="fv-az1057-923" duration="00:01:05.0453841" startTime="2025-06-21T12:04:35.2631370+00:00" endTime="2025-06-21T12:05:40.0519929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0635214d-3e57-4b22-b811-7b599163b61a">
      <Output>
        <StdOut>namespace MyNamespace;

public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAsync()).ReturnsAsync(string.Empty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f9d3fbe-8a8a-472c-9427-82ef40d1763a" testId="a6e808aa-ba20-35e9-6cee-6ecb784fdc12" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3007118" startTime="2025-06-21T12:04:34.6076894+00:00" endTime="2025-06-21T12:05:53.8850033+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f9d3fbe-8a8a-472c-9427-82ef40d1763a" />
    <UnitTestResult executionId="017539b2-d8dd-47f7-88d7-130bbc4f0d8e" testId="14f7ee72-36f2-1b05-ad35-0fa12232daaa" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" computerName="fv-az1057-923" duration="00:01:13.8244184" startTime="2025-06-21T12:04:36.4340408+00:00" endTime="2025-06-21T12:05:49.3786029+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="017539b2-d8dd-47f7-88d7-130bbc4f0d8e" />
    <UnitTestResult executionId="e9d41399-9b13-4da7-a0bd-bcd85963693b" testId="e8a756cd-a0d2-097e-b24d-f2afca7f0464" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:02.5697686" startTime="2025-06-21T12:04:35.4956252+00:00" endTime="2025-06-21T12:05:37.6612918+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9d41399-9b13-4da7-a0bd-bcd85963693b" />
    <UnitTestResult executionId="85c438bf-a69d-4960-958a-fea8b2dedf0b" testId="38c8274b-5b3d-ca62-31af-dd8e70824ff5" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:18.7397023" startTime="2025-06-21T12:04:35.4212455+00:00" endTime="2025-06-21T12:05:53.8496731+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="85c438bf-a69d-4960-958a-fea8b2dedf0b" />
    <UnitTestResult executionId="b8410ed4-fcd7-4f0c-934c-8e403e76e5c8" testId="49344f75-33a2-4e3a-af92-4d6b06050707" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:16.1344098" startTime="2025-06-21T12:04:35.7285256+00:00" endTime="2025-06-21T12:05:51.4090601+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8410ed4-fcd7-4f0c-934c-8e403e76e5c8" />
    <UnitTestResult executionId="960789da-ef3e-46db-bb0a-c674d3a1eb83" testId="931e394d-f30c-d46e-cd32-44de44d715b6" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:00:58.3109755" startTime="2025-06-21T12:04:35.0766779+00:00" endTime="2025-06-21T12:05:33.1768877+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="960789da-ef3e-46db-bb0a-c674d3a1eb83" />
    <UnitTestResult executionId="801ee7b0-f55f-42b2-a2ff-4c033a7942bb" testId="75f93c4a-de08-ef70-93f2-7332046188a9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" computerName="fv-az1057-923" duration="00:01:16.9204750" startTime="2025-06-21T12:04:36.5391597+00:00" endTime="2025-06-21T12:05:52.5083341+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="801ee7b0-f55f-42b2-a2ff-4c033a7942bb" />
    <UnitTestResult executionId="b47aa8a6-d6c5-4989-b5ea-729a0da4558f" testId="54d4b074-d83b-d0e3-5b1b-590faf970865" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:16.3728088" startTime="2025-06-21T12:04:35.4138486+00:00" endTime="2025-06-21T12:05:51.4419451+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b47aa8a6-d6c5-4989-b5ea-729a0da4558f" />
    <UnitTestResult executionId="aa17d9d3-68eb-4d4b-9454-74d8b6ca2510" testId="e171d48d-ebfc-79d6-4dab-e109afd22556" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:01:08.3286000" startTime="2025-06-21T12:04:35.0403665+00:00" endTime="2025-06-21T12:05:43.1762948+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa17d9d3-68eb-4d4b-9454-74d8b6ca2510" />
    <UnitTestResult executionId="b716a89b-0b09-47e8-8a77-34a4c1e87de0" testId="1a2a372d-1e4e-5c9f-4553-477b72cddfe1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock1 = new Mock&lt;IMyService&gt;(\&quot;4\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:03.1566331" startTime="2025-06-21T12:04:36.0149499+00:00" endTime="2025-06-21T12:05:38.6191513+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b716a89b-0b09-47e8-8a77-34a4c1e87de0" />
    <UnitTestResult executionId="f5298100-cd0a-40b1-97cb-4863c1c7488b" testId="27df31b8-deb1-dc6f-0c1e-cd7d663b4d7c" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" computerName="fv-az1057-923" duration="00:00:54.0247481" startTime="2025-06-21T12:04:34.9812795+00:00" endTime="2025-06-21T12:05:28.8525523+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5298100-cd0a-40b1-97cb-4863c1c7488b">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c6c2f46-be8f-47fe-9af5-34748bc69790" testId="369301a2-fea9-725a-75d0-5d43f7e31964" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:19.6969156" startTime="2025-06-21T12:04:36.3934125+00:00" endTime="2025-06-21T12:05:55.3213784+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c6c2f46-be8f-47fe-9af5-34748bc69790" />
    <UnitTestResult executionId="7b7f05c6-0f79-419a-b344-d21761d24bd9" testId="44770953-fdc8-b029-e601-0c880a375c3a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:13.4805891" startTime="2025-06-21T12:04:35.6486333+00:00" endTime="2025-06-21T12:05:48.6331434+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b7f05c6-0f79-419a-b344-d21761d24bd9" />
    <UnitTestResult executionId="ab6c7f2e-af8f-441b-9e8a-4ffd8bdabe96" testId="e51ee1df-bdd3-3c1e-8d52-c99803ceea24" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:15.3865086" startTime="2025-06-21T12:04:34.6260939+00:00" endTime="2025-06-21T12:05:49.9668806+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab6c7f2e-af8f-441b-9e8a-4ffd8bdabe96" />
    <UnitTestResult executionId="27e7c5d3-f63c-4431-9a19-c6c98bd44e81" testId="60c76dc5-4c4e-b32f-b77c-7d308c2dfc19" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:18.9763675" startTime="2025-06-21T12:04:35.7319131+00:00" endTime="2025-06-21T12:05:54.1785801+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27e7c5d3-f63c-4431-9a19-c6c98bd44e81" />
    <UnitTestResult executionId="2980b4dd-4911-4547-b47d-3c207fa05e73" testId="2f236870-3e46-5e00-1de8-d7f3d358f0ce" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:12.5587012" startTime="2025-06-21T12:04:35.6698815+00:00" endTime="2025-06-21T12:05:47.7649149+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2980b4dd-4911-4547-b47d-3c207fa05e73" />
    <UnitTestResult executionId="1ca3e33a-7d54-43fc-b8a0-3d3460463246" testId="ae0fbced-2298-222c-b00d-1eb146d4516c" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.4516774" startTime="2025-06-21T12:04:35.4578893+00:00" endTime="2025-06-21T12:05:50.5700173+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ca3e33a-7d54-43fc-b8a0-3d3460463246" />
    <UnitTestResult executionId="e711efd3-1999-4065-98f6-41de9a68599d" testId="54bfa6a2-6f3d-3e09-b29d-fb612642abf8" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.GetBooleanA&quot;···)" computerName="fv-az1057-923" duration="00:01:10.6536006" startTime="2025-06-21T12:04:37.0641400+00:00" endTime="2025-06-21T12:05:46.3963534+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e711efd3-1999-4065-98f6-41de9a68599d">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.GetBooleanAsync().Result).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="586252c6-eb10-4d1c-a1ce-282a78f54133" testId="8b0cd8a3-e242-d4f2-01dd-506b84c1c3d0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5272097" startTime="2025-06-21T12:04:36.5855836+00:00" endTime="2025-06-21T12:05:55.1951787+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="586252c6-eb10-4d1c-a1ce-282a78f54133" />
    <UnitTestResult executionId="39b3604a-0795-412c-8182-16ebde8e7b6b" testId="91ee4c58-379e-4809-0012-5d644f69ae03" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:14.6501178" startTime="2025-06-21T12:04:36.6074797+00:00" endTime="2025-06-21T12:05:50.2495574+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39b3604a-0795-412c-8182-16ebde8e7b6b" />
    <UnitTestResult executionId="20d39f5b-623e-4d79-8077-525da86296a8" testId="989ed284-ae58-8273-6075-856d45f9d69c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:00:59.5318613" startTime="2025-06-21T12:04:35.9691760+00:00" endTime="2025-06-21T12:05:34.8729017+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20d39f5b-623e-4d79-8077-525da86296a8" />
    <UnitTestResult executionId="2ed457c5-8fce-4586-a8ad-bb26b5518d1c" testId="916bd290-0ab9-fe4e-b092-45bd9cd2ed00" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:54.7559142" startTime="2025-06-21T12:04:36.0396618+00:00" endTime="2025-06-21T12:05:30.1591957+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ed457c5-8fce-4586-a8ad-bb26b5518d1c" />
    <UnitTestResult executionId="330cf2b1-668a-4958-800b-7b8c94bcc5fe" testId="ed980dc6-0394-d430-fea3-bcf91e9b80e6" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:08.3312871" startTime="2025-06-21T12:04:36.8558809+00:00" endTime="2025-06-21T12:05:44.0275256+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="330cf2b1-668a-4958-800b-7b8c94bcc5fe">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b6cdde9-3f29-4a4d-b133-70f09ac63e9d" testId="c595018e-f6ce-a265-1602-8256b4a792ef" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:19.1139432" startTime="2025-06-21T12:04:36.7528851+00:00" endTime="2025-06-21T12:05:54.7773723+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b6cdde9-3f29-4a4d-b133-70f09ac63e9d">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3eae7340-b47a-42e6-b06c-0e017dc74be2" testId="635aaa3a-d93f-fa5b-1fe8-c6cf66c7eb93" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" computerName="fv-az1057-923" duration="00:01:19.1143125" startTime="2025-06-21T12:04:36.5378195+00:00" endTime="2025-06-21T12:05:54.7639797+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3eae7340-b47a-42e6-b06c-0e017dc74be2" />
    <UnitTestResult executionId="76bd1e2c-de34-4a7b-b7de-5f3bd6f9d7a9" testId="25440e48-7e58-8e1a-ca5a-0980f370ec08" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5287609" startTime="2025-06-21T12:04:35.4117084+00:00" endTime="2025-06-21T12:05:54.6202568+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76bd1e2c-de34-4a7b-b7de-5f3bd6f9d7a9" />
    <UnitTestResult executionId="acc1034d-1edb-4687-b708-34da5535373f" testId="40a59b2d-37fc-050a-c610-545d3a6b187a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:18.0618893" startTime="2025-06-21T12:04:36.3704437+00:00" endTime="2025-06-21T12:05:53.5816942+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="acc1034d-1edb-4687-b708-34da5535373f" />
    <UnitTestResult executionId="be0a5b85-7c5b-4e37-807e-248320a24d51" testId="519e8547-e292-17a6-820b-656a609a3aee" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" computerName="fv-az1057-923" duration="00:01:21.4233766" startTime="2025-06-21T12:04:35.1965963+00:00" endTime="2025-06-21T12:05:56.3790608+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be0a5b85-7c5b-4e37-807e-248320a24d51" />
    <UnitTestResult executionId="b7268402-cead-42d5-a4f4-e7773f4a7c55" testId="d98f073a-7ce5-6eb5-1be5-e8ea3ab7064b" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.5641549" startTime="2025-06-21T12:04:34.6203177+00:00" endTime="2025-06-21T12:05:43.1431203+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7268402-cead-42d5-a4f4-e7773f4a7c55" />
    <UnitTestResult executionId="275317fe-c7ec-4c64-a8df-719e515c958f" testId="7078d1f2-a0c0-a2e9-8204-26e07496e15d" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:19.9122445" startTime="2025-06-21T12:04:35.3982228+00:00" endTime="2025-06-21T12:05:55.0030596+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="275317fe-c7ec-4c64-a8df-719e515c958f" />
    <UnitTestResult executionId="cfbd617c-8a27-48f9-8144-1dfccb6cee4a" testId="70a86064-2cfc-9bc3-71a7-ce8a1d2afcd1" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.2955959" startTime="2025-06-21T12:04:35.6409370+00:00" endTime="2025-06-21T12:05:36.3955143+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cfbd617c-8a27-48f9-8144-1dfccb6cee4a" />
    <UnitTestResult executionId="0bc5c7d8-10ac-411b-bce0-454aa26c1145" testId="94d077aa-42a9-02df-cedb-9f6304760e13" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.GetNumb&quot;···)" computerName="fv-az1057-923" duration="00:01:03.4666630" startTime="2025-06-21T12:04:37.0517461+00:00" endTime="2025-06-21T12:05:39.1810872+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bc5c7d8-10ac-411b-bce0-454aa26c1145">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.GetNumberAsync()).Returns(ValueTask.FromResult(42));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b08fd592-2e69-43d2-9f71-9b2329132ed6" testId="b43bb6e2-2962-f083-9d22-1cdeacc8fc35" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.5005825" startTime="2025-06-21T12:04:36.0240332+00:00" endTime="2025-06-21T12:05:36.9162448+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b08fd592-2e69-43d2-9f71-9b2329132ed6" />
    <UnitTestResult executionId="1ce067db-62e2-43ee-b58a-4661469a7e4f" testId="5a7b1ff9-dcc6-0df1-bbae-11939eee6684" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfRealMoqIsUsedWithValidParameters" computerName="fv-az1057-923" duration="00:01:02.6152682" startTime="2025-06-21T12:04:35.8445574+00:00" endTime="2025-06-21T12:05:37.8921235+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ce067db-62e2-43ee-b58a-4661469a7e4f" />
    <UnitTestResult executionId="876ea201-7ba7-442e-b169-116619931b8b" testId="447d92ff-a11c-8677-f5e5-e66a62b7db44" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:58.9599758" startTime="2025-06-21T12:04:35.1126887+00:00" endTime="2025-06-21T12:05:33.8576997+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="876ea201-7ba7-442e-b169-116619931b8b" />
    <UnitTestResult executionId="5f0f31d2-1b68-4349-bc41-6f4be037732f" testId="845d2943-50c7-1222-88fa-08d770bf7129" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.5299418" startTime="2025-06-21T12:04:35.6622803+00:00" endTime="2025-06-21T12:05:49.7066215+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f0f31d2-1b68-4349-bc41-6f4be037732f" />
    <UnitTestResult executionId="b8fc3b4c-bb21-4f4b-b335-cf19a88b6f4f" testId="8eb5a606-b7d3-4c20-4e7e-c419bb67667c" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:12.8306916" startTime="2025-06-21T12:04:36.6349825+00:00" endTime="2025-06-21T12:05:48.4498020+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8fc3b4c-bb21-4f4b-b335-cf19a88b6f4f">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculator())|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7dbcafbc-f0b3-46e8-824a-6d76f6c1db3c" testId="f4933e3d-e658-e8c4-5656-25bafef17bc5" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:08.7938362" startTime="2025-06-21T12:04:34.8554593+00:00" endTime="2025-06-21T12:05:43.5461917+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7dbcafbc-f0b3-46e8-824a-6d76f6c1db3c">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8bb37a6a-3e59-46fb-a252-54d906da1ec2" testId="4d082c57-7250-986c-b28f-267288bcf6d6" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:07.5491117" startTime="2025-06-21T12:04:35.1746246+00:00" endTime="2025-06-21T12:05:42.4967322+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8bb37a6a-3e59-46fb-a252-54d906da1ec2" />
    <UnitTestResult executionId="05b1a204-79ba-4f1d-968e-8e1d4301e9e7" testId="ea7497a8-e682-019c-2264-80a65489c59b" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.3529371" startTime="2025-06-21T12:04:35.2002815+00:00" endTime="2025-06-21T12:05:43.3160656+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05b1a204-79ba-4f1d-968e-8e1d4301e9e7" />
    <UnitTestResult executionId="be620083-3ee7-402b-a793-1489e26479c9" testId="bd20a732-3bae-ac36-388b-99311791e790" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:16.5831901" startTime="2025-06-21T12:04:34.6160435+00:00" endTime="2025-06-21T12:05:51.1619168+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be620083-3ee7-402b-a793-1489e26479c9" />
    <UnitTestResult executionId="1463962f-b3b6-47ad-b52f-dffab5a7f780" testId="db3e82e4-45bf-6ad0-0612-5944b09fca12" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:18.5984074" startTime="2025-06-21T12:04:36.4738289+00:00" endTime="2025-06-21T12:05:54.1684712+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1463962f-b3b6-47ad-b52f-dffab5a7f780" />
    <UnitTestResult executionId="91591662-2abf-42e6-8ba2-7f19ab94477c" testId="ff5e99fb-4a04-235c-d50d-9679c70b0b05" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:01.6989284" startTime="2025-06-21T12:04:35.7646184+00:00" endTime="2025-06-21T12:05:36.9159029+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91591662-2abf-42e6-8ba2-7f19ab94477c" />
    <UnitTestResult executionId="5d330e2d-4419-4b25-9b9e-3e7e15ea04ea" testId="6e189c17-77e7-fcf7-ee5d-bc133ae19b97" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupRemove(x =&gt; x.TestEve&quot;···)" computerName="fv-az1057-923" duration="00:01:07.1514617" startTime="2025-06-21T12:04:37.0509623+00:00" endTime="2025-06-21T12:05:42.9003374+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d330e2d-4419-4b25-9b9e-3e7e15ea04ea">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().SetupRemove(x =&gt; x.TestEvent -= It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a25bd8cb-698b-4c0a-ba2d-b0af996e40e0" testId="9ec73178-8587-635f-a9a8-1aebd2dcc81e" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:04.8525336" startTime="2025-06-21T12:04:36.7662213+00:00" endTime="2025-06-21T12:05:40.5277331+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a25bd8cb-698b-4c0a-ba2d-b0af996e40e0">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e0600774-a207-4540-939a-d3bad7feef79" testId="ab326a52-971c-78b7-895d-a95c1592ee81" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" computerName="fv-az1057-923" duration="00:01:16.5478580" startTime="2025-06-21T12:04:34.8068773+00:00" endTime="2025-06-21T12:05:51.3059563+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0600774-a207-4540-939a-d3bad7feef79">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c15b0e03-b657-484a-9fc7-fbe48500eb07" testId="e2fb77fd-c040-1248-3eb0-28407cf45126" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:05.4066668" startTime="2025-06-21T12:04:35.0318095+00:00" endTime="2025-06-21T12:05:40.2541459+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c15b0e03-b657-484a-9fc7-fbe48500eb07">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws&lt;InvalidOperationException&gt;();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="db9120a3-42d3-4b8f-b926-7e0c5e87696e" testId="a0537bda-04f5-08c9-c19d-dd3495d5f478" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" computerName="fv-az1057-923" duration="00:01:14.7909653" startTime="2025-06-21T12:04:36.4135416+00:00" endTime="2025-06-21T12:05:50.3529976+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db9120a3-42d3-4b8f-b926-7e0c5e87696e" />
    <UnitTestResult executionId="4ae6a182-98f9-4c43-ac30-2f4b26f92e18" testId="aa76dbb3-9096-0d0a-f3e3-d2314e84ea11" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:50.5786945" startTime="2025-06-21T12:04:36.1231904+00:00" endTime="2025-06-21T12:05:26.0161809+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ae6a182-98f9-4c43-ac30-2f4b26f92e18" />
    <UnitTestResult executionId="f319e597-c49f-40e9-ba12-b02e2b7ad24a" testId="a96c3e30-6c25-ee48-b724-ee63d6381533" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.3227682" startTime="2025-06-21T12:04:35.5485552+00:00" endTime="2025-06-21T12:05:52.4399632+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f319e597-c49f-40e9-ba12-b02e2b7ad24a" />
    <UnitTestResult executionId="b2db0b55-2e13-43a4-b4f6-2dff5be36ef7" testId="ac20cadf-ebae-bb3e-b742-1a375cd302b9" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:01.6939109" startTime="2025-06-21T12:04:35.1099274+00:00" endTime="2025-06-21T12:05:36.5803750+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b2db0b55-2e13-43a4-b4f6-2dff5be36ef7" />
    <UnitTestResult executionId="0af28189-aa5d-4df1-b9fb-96ad7a7ef9e1" testId="d091611e-e5a8-e030-98e6-ba24fa9b1cf5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:54.7688564" startTime="2025-06-21T12:04:35.9866194+00:00" endTime="2025-06-21T12:05:30.1344534+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0af28189-aa5d-4df1-b9fb-96ad7a7ef9e1" />
    <UnitTestResult executionId="33a101c1-0f72-4f0b-8632-7356ee9bb7f6" testId="627a1a20-1cfe-bf9b-e958-d12fc7f814fd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5566520" startTime="2025-06-21T12:04:36.5906005+00:00" endTime="2025-06-21T12:05:55.2499763+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33a101c1-0f72-4f0b-8632-7356ee9bb7f6" />
    <UnitTestResult executionId="fc34a8e4-21ee-4c1b-8fd1-87103cb1674e" testId="d807e89b-ed9e-f280-c741-aff0f94d4b01" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock6 = new Mock&lt;IMyService&gt;(MockBehavior.Loos&quot;···)" computerName="fv-az1057-923" duration="00:00:55.0807171" startTime="2025-06-21T12:04:36.0186490+00:00" endTime="2025-06-21T12:05:30.4829180+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc34a8e4-21ee-4c1b-8fd1-87103cb1674e" />
    <UnitTestResult executionId="b92b0470-6469-4116-be11-25fee353abb5" testId="fce1d262-0491-e21a-8bcf-34b8bf53021f" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.3839251" startTime="2025-06-21T12:04:35.8895843+00:00" endTime="2025-06-21T12:05:51.7082708+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b92b0470-6469-4116-be11-25fee353abb5" />
    <UnitTestResult executionId="cf6e10d8-c00c-4765-85d0-688964005b9c" testId="383c0209-3a8c-6c13-1ad2-1a4e0e7f0d0d" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:11.8210486" startTime="2025-06-21T12:04:34.7082048+00:00" endTime="2025-06-21T12:05:46.5331919+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf6e10d8-c00c-4765-85d0-688964005b9c">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56b415ca-4570-4661-b66f-f509b7e9aeed" testId="3c67ac09-995f-a8f8-1586-40323c310ad0" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:02.8290252" startTime="2025-06-21T12:04:35.9584186+00:00" endTime="2025-06-21T12:05:38.2059721+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56b415ca-4570-4661-b66f-f509b7e9aeed">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e12443db-0a68-4b91-9015-c87d9f2fdf22" testId="1374a7ae-ee43-4141-716a-e6c49614136c" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:00.6770009" startTime="2025-06-21T12:04:34.9668732+00:00" endTime="2025-06-21T12:05:35.5431497+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e12443db-0a68-4b91-9015-c87d9f2fdf22" />
    <UnitTestResult executionId="0acb5423-8974-47aa-b7fe-b15ff794ab63" testId="02501572-be45-5f55-62eb-e470d85df547" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" computerName="fv-az1057-923" duration="00:00:53.6394025" startTime="2025-06-21T12:04:36.1863052+00:00" endTime="2025-06-21T12:05:29.0919006+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0acb5423-8974-47aa-b7fe-b15ff794ab63" />
    <UnitTestResult executionId="4de697a1-e7ed-4c57-befd-4ba3fefa5af6" testId="0b83f25a-bcd7-2ee6-3c77-1c52235b6b7b" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.1402887" startTime="2025-06-21T12:04:35.6650634+00:00" endTime="2025-06-21T12:05:49.2940261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4de697a1-e7ed-4c57-befd-4ba3fefa5af6" />
    <UnitTestResult executionId="6ed822e7-d9e6-41ab-84aa-221ba83e1dac" testId="1a7a3934-8583-8718-cb4b-cb078fd2b2f8" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenMultipleMatches" computerName="fv-az1057-923" duration="00:00:00.0018732" startTime="2025-06-21T12:04:35.9021722+00:00" endTime="2025-06-21T12:04:35.9053998+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ed822e7-d9e6-41ab-84aa-221ba83e1dac" />
    <UnitTestResult executionId="2b7d8066-4598-4330-bc44-8c1ca2a585d3" testId="24e82897-7471-acd7-1fe4-95f5e00133bf" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:00:58.0791432" startTime="2025-06-21T12:04:36.8470643+00:00" endTime="2025-06-21T12:05:33.7568855+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b7d8066-4598-4330-bc44-8c1ca2a585d3">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d5918b9-0ac9-4349-88d5-57230f85329c" testId="83a1de75-ac25-d2e2-f696-c129dc3b533f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:52.2385322" startTime="2025-06-21T12:04:36.0246339+00:00" endTime="2025-06-21T12:05:27.6963547+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d5918b9-0ac9-4349-88d5-57230f85329c" />
    <UnitTestResult executionId="34a5ffc4-b1a6-4c35-a659-d76646173910" testId="9f96f86f-05a1-4871-bad8-bfef2eb50f7c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:12.2011821" startTime="2025-06-21T12:04:36.3869624+00:00" endTime="2025-06-21T12:05:47.7133922+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34a5ffc4-b1a6-4c35-a659-d76646173910" />
    <UnitTestResult executionId="c9e10a44-259b-42df-90e2-6e378575f88c" testId="ee2fce53-6fac-96c2-0c79-595291907672" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:20.4547215" startTime="2025-06-21T12:04:34.5995638+00:00" endTime="2025-06-21T12:05:55.0143624+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9e10a44-259b-42df-90e2-6e378575f88c" />
    <UnitTestResult executionId="12f91524-dcab-41cd-9b8e-271599b263ec" testId="cd385045-d4c8-916f-20c0-3c491744135d" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" computerName="fv-az1057-923" duration="00:01:19.1160026" startTime="2025-06-21T12:04:36.6804600+00:00" endTime="2025-06-21T12:05:54.8200150+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12f91524-dcab-41cd-9b8e-271599b263ec">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0708c702-b4e4-48f7-9554-1e81b0da9423" testId="6bfca6e9-be8b-df0d-b566-5225ea1e6c64" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5984333" startTime="2025-06-21T12:04:36.3740094+00:00" endTime="2025-06-21T12:05:55.1052920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0708c702-b4e4-48f7-9554-1e81b0da9423" />
    <UnitTestResult executionId="e8690a24-4e69-4f47-9944-78b4a172c61e" testId="c5ad02cf-276f-a66c-47f6-ca3585e38aef" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:17.4435090" startTime="2025-06-21T12:04:36.3514612+00:00" endTime="2025-06-21T12:05:52.9926700+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8690a24-4e69-4f47-9944-78b4a172c61e" />
    <UnitTestResult executionId="1a60c61e-4a32-4306-9795-52e8c1bc85ec" testId="413854af-fe3b-9cf0-1d28-96941551c7b4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" computerName="fv-az1057-923" duration="00:00:53.2112140" startTime="2025-06-21T12:04:36.0524709+00:00" endTime="2025-06-21T12:05:28.6272891+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a60c61e-4a32-4306-9795-52e8c1bc85ec" />
    <UnitTestResult executionId="2ddae27c-eedc-4e55-b854-febe4c62342e" testId="e306c60f-2833-eb1c-01f1-6e6ad79b936c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" computerName="fv-az1057-923" duration="00:00:51.1261997" startTime="2025-06-21T12:04:36.3159783+00:00" endTime="2025-06-21T12:05:26.6136650+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ddae27c-eedc-4e55-b854-febe4c62342e" />
    <UnitTestResult executionId="70553cee-dea6-4314-af7d-bcba9da8139a" testId="87806d17-b69c-e960-cfda-1a55d4fc7f2b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:18.3057751" startTime="2025-06-21T12:04:36.4682544+00:00" endTime="2025-06-21T12:05:53.9024797+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70553cee-dea6-4314-af7d-bcba9da8139a" />
    <UnitTestResult executionId="1d85fc02-3eb8-4fc1-8b4f-e46261812f58" testId="f139f5ac-f240-83d8-f623-c1567622a139" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:14.7400232" startTime="2025-06-21T12:04:35.7932534+00:00" endTime="2025-06-21T12:05:50.0683605+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d85fc02-3eb8-4fc1-8b4f-e46261812f58">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c448d8c1-5dc1-49cd-9d0a-0c3b92f9b4e8" testId="05b7ddbc-4e92-0a6c-b7a0-005564b78e17" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:14.1713687" startTime="2025-06-21T12:04:35.7591632+00:00" endTime="2025-06-21T12:05:49.3751394+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c448d8c1-5dc1-49cd-9d0a-0c3b92f9b4e8" />
    <UnitTestResult executionId="15ac03b3-b199-4687-8080-43af0264e8c2" testId="6f3c99b1-36a5-f753-0fc3-0786370c60e3" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" computerName="fv-az1057-923" duration="00:01:00.3770881" startTime="2025-06-21T12:04:35.9184940+00:00" endTime="2025-06-21T12:05:35.6771767+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15ac03b3-b199-4687-8080-43af0264e8c2">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="697e39ff-0a0f-45fe-b393-ba2057ed711d" testId="7fad766e-3e0f-d167-d85b-8a4507176670" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithSuppressMessage(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:01:16.3881505" startTime="2025-06-21T12:04:35.7804045+00:00" endTime="2025-06-21T12:05:51.6201193+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="697e39ff-0a0f-45fe-b393-ba2057ed711d" />
    <UnitTestResult executionId="d3964596-4f3b-4d52-a148-bb6c2b21e449" testId="88b0edc6-bd51-7d04-1f6c-ab4fc7940b6c" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:04.4747773" startTime="2025-06-21T12:04:35.0870659+00:00" endTime="2025-06-21T12:05:39.3452924+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3964596-4f3b-4d52-a148-bb6c2b21e449" />
    <UnitTestResult executionId="8d7c3e32-b644-4d1b-b31e-cfb4c2939d34" testId="78826fd7-3ad2-e401-6c6a-b38f3eec38bb" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" computerName="fv-az1057-923" duration="00:01:07.0212330" startTime="2025-06-21T12:04:34.8393240+00:00" endTime="2025-06-21T12:05:41.8203888+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d7c3e32-b644-4d1b-b31e-cfb4c2939d34">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66412100-c2c0-4bca-b755-18f97bc8316f" testId="af0465d9-15ea-2855-23c1-d25706ddfb4a" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" computerName="fv-az1057-923" duration="00:01:15.4121667" startTime="2025-06-21T12:04:34.7951836+00:00" endTime="2025-06-21T12:05:50.1466278+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66412100-c2c0-4bca-b755-18f97bc8316f">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexer&gt;().Verify(x =&gt; x[0])|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d69c0825-c01f-48fb-ba91-9f3e71796627" testId="eb28d933-f13d-d4f7-d00b-566a1d5fc9b0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:07.9854041" startTime="2025-06-21T12:04:36.0508112+00:00" endTime="2025-06-21T12:05:43.4020610+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d69c0825-c01f-48fb-ba91-9f3e71796627" />
    <UnitTestResult executionId="925f1e2e-caa3-4c5e-bc23-57d9b37030c0" testId="31b9211e-5e4c-1b32-1f26-b112038cb1da" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" computerName="fv-az1057-923" duration="00:01:15.8354856" startTime="2025-06-21T12:04:36.4757917+00:00" endTime="2025-06-21T12:05:51.4349585+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="925f1e2e-caa3-4c5e-bc23-57d9b37030c0" />
    <UnitTestResult executionId="55915d00-c651-423c-a4df-8d3da7689690" testId="cc2a7fb0-b711-a032-e42d-9e4dfd6251f2" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.SimpleEvent += It.IsA&quot;···)" computerName="fv-az1057-923" duration="00:01:19.0365185" startTime="2025-06-21T12:04:34.6292806+00:00" endTime="2025-06-21T12:05:53.6653713+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55915d00-c651-423c-a4df-8d3da7689690" />
    <UnitTestResult executionId="4806c07c-7683-40a4-b100-6a38cac9c9b0" testId="8a83f806-8f22-ae83-a082-590827d93218" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" computerName="fv-az1057-923" duration="00:01:04.8569715" startTime="2025-06-21T12:04:35.1053630+00:00" endTime="2025-06-21T12:05:39.7509861+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4806c07c-7683-40a4-b100-6a38cac9c9b0" />
    <UnitTestResult executionId="d2fa4acf-45e7-4d97-9ccd-7696e63cf323" testId="c08961be-429c-46f9-1bd6-33b22621c518" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifySet(x =&gt; {&quot;···)" computerName="fv-az1057-923" duration="00:01:06.2387967" startTime="2025-06-21T12:04:34.8877103+00:00" endTime="2025-06-21T12:05:41.0049309+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2fa4acf-45e7-4d97-9ccd-7696e63cf323">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().VerifySet(x =&gt; { x.Property = It.IsAny&lt;int&gt;(); })|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cf6cf39c-5c9f-465e-a9bf-28cc73f587bf" testId="c1967d96-584a-f346-0029-ce4150b669dd" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.7482951" startTime="2025-06-21T12:04:35.3156337+00:00" endTime="2025-06-21T12:05:45.7398626+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf6cf39c-5c9f-465e-a9bf-28cc73f587bf" />
    <UnitTestResult executionId="bffe45c7-47f4-40d5-bccc-a673e2c92231" testId="373e5f57-3a6d-e220-bb6f-8c9c7f39375b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:17.1055753" startTime="2025-06-21T12:04:35.9834327+00:00" endTime="2025-06-21T12:05:52.4434959+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bffe45c7-47f4-40d5-bccc-a673e2c92231" />
    <UnitTestResult executionId="569ffbd4-f89e-499a-999c-e180d6ffa3d6" testId="0c9c7536-30aa-8708-79c3-4cbd914c2af7" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:01.5317818" startTime="2025-06-21T12:04:35.1184440+00:00" endTime="2025-06-21T12:05:36.4349093+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="569ffbd4-f89e-499a-999c-e180d6ffa3d6" />
    <UnitTestResult executionId="b3cd98bf-0d3d-4313-8f6f-096fbd610ae2" testId="fb549ae8-934a-3af1-8595-d1df222bbb27" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(MockBehavior&quot;···)" computerName="fv-az1057-923" duration="00:00:52.2500980" startTime="2025-06-21T12:04:36.0102181+00:00" endTime="2025-06-21T12:05:27.6260711+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3cd98bf-0d3d-4313-8f6f-096fbd610ae2" />
    <UnitTestResult executionId="5346752d-0b98-4a00-8c86-e918a757fa73" testId="8c0aa406-9cd5-6402-3a10-c892c26c5eb3" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:00.7068296" startTime="2025-06-21T12:04:35.8939156+00:00" endTime="2025-06-21T12:05:36.0019826+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5346752d-0b98-4a00-8c86-e918a757fa73">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5d379a6-0288-4610-a19e-061766c8808a" testId="a1f8c002-88b3-5f86-7a01-d60cd8de3d1a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" computerName="fv-az1057-923" duration="00:00:51.9598020" startTime="2025-06-21T12:04:36.0117974+00:00" endTime="2025-06-21T12:05:27.3331199+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5d379a6-0288-4610-a19e-061766c8808a" />
    <UnitTestResult executionId="c7345760-4d76-409e-b8a3-9f5f93143fc9" testId="2cdf9022-17b5-2b3b-6e4c-ee305ef50b8d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.6783945" startTime="2025-06-21T12:04:35.4063740+00:00" endTime="2025-06-21T12:05:47.7654140+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7345760-4d76-409e-b8a3-9f5f93143fc9" />
    <UnitTestResult executionId="4d356001-baa1-4b3c-afe7-adc49e01b6dd" testId="cc82fd6b-5128-0bab-b357-91f15f7a8200" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" computerName="fv-az1057-923" duration="00:00:54.8178918" startTime="2025-06-21T12:04:36.3026007+00:00" endTime="2025-06-21T12:05:30.3023375+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4d356001-baa1-4b3c-afe7-adc49e01b6dd" />
    <UnitTestResult executionId="c798ce96-e0f5-4c30-a653-f3d0f65e45ce" testId="f2ec93e9-2da2-4fa0-bfe7-1b41e9e050aa" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" computerName="fv-az1057-923" duration="00:01:18.2412450" startTime="2025-06-21T12:04:34.9009043+00:00" endTime="2025-06-21T12:05:53.0496487+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c798ce96-e0f5-4c30-a653-f3d0f65e45ce">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="61ca1605-517b-4d5f-9a76-3e6ae1ca5a53" testId="edeb4141-7d95-10f8-3fc9-a9a9bc9f466f" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:03.1157902" startTime="2025-06-21T12:04:34.9728474+00:00" endTime="2025-06-21T12:05:37.9384836+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61ca1605-517b-4d5f-9a76-3e6ae1ca5a53" />
    <UnitTestResult executionId="5af0a0af-a53b-4675-84ce-f465a801c29e" testId="25448c90-3b22-e733-c608-a5e672c5398e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:51.1607624" startTime="2025-06-21T12:04:36.0557946+00:00" endTime="2025-06-21T12:05:26.6051323+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5af0a0af-a53b-4675-84ce-f465a801c29e" />
    <UnitTestResult executionId="ba93f763-a6ca-4b83-accc-f4e04c61a9b0" testId="e717a128-aad5-94ff-a038-5bedf19449ea" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" computerName="fv-az1057-923" duration="00:01:08.4817647" startTime="2025-06-21T12:04:35.8217273+00:00" endTime="2025-06-21T12:05:43.7460692+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba93f763-a6ca-4b83-accc-f4e04c61a9b0">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="79fff83f-cc00-4087-b7ea-6e8f96e385c1" testId="1c0f8c1e-c5e8-5cc4-0233-51e9e8f0a968" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:00.0696103" startTime="2025-06-21T12:04:35.1381916+00:00" endTime="2025-06-21T12:05:34.9742057+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79fff83f-cc00-4087-b7ea-6e8f96e385c1" />
    <UnitTestResult executionId="7053705b-a97e-4862-a0f5-dfdf5af20c00" testId="f0e0acb2-12d4-14a7-4c51-4e445dfbaa37" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:10.3489607" startTime="2025-06-21T12:04:34.6580797+00:00" endTime="2025-06-21T12:05:45.0579535+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7053705b-a97e-4862-a0f5-dfdf5af20c00" />
    <UnitTestResult executionId="880f8b59-6fa1-47af-bb84-eca87596d73a" testId="d9c6a304-3a03-ea6e-9174-9adcf72b6d34" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:00:59.5230896" startTime="2025-06-21T12:04:35.9406678+00:00" endTime="2025-06-21T12:05:34.8301929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="880f8b59-6fa1-47af-bb84-eca87596d73a">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8dffdb2-bd8d-4070-8b24-18923e44598a" testId="cab8858d-bd81-ddea-54ca-bdc820201dbf" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:16.1065519" startTime="2025-06-21T12:04:34.5981414+00:00" endTime="2025-06-21T12:05:50.6627098+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8dffdb2-bd8d-4070-8b24-18923e44598a" />
    <UnitTestResult executionId="05bb5dbf-7a91-4358-9580-29453510f8aa" testId="d354d7f0-ad7f-bd86-fd42-3ec5722402fd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" computerName="fv-az1057-923" duration="00:00:55.1060399" startTime="2025-06-21T12:04:36.3308632+00:00" endTime="2025-06-21T12:05:30.6003414+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05bb5dbf-7a91-4358-9580-29453510f8aa" />
    <UnitTestResult executionId="17fcf59e-cea9-434f-a1a3-fb69ae75cedd" testId="9d0382bf-e9dc-2344-8769-35a8ba666be3" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IIndexerInterface&gt;().Setup(x =&gt; x[0]);&quot;)" computerName="fv-az1057-923" duration="00:01:01.8823591" startTime="2025-06-21T12:04:35.9279909+00:00" endTime="2025-06-21T12:05:37.1890288+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17fcf59e-cea9-434f-a1a3-fb69ae75cedd">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IIndexerInterface&gt;().Setup(x =&gt; x[0]);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5efcaeb-2919-4ce9-9c2c-836925d2eca3" testId="0b1fb93a-347e-43ca-1df2-4b4f1e6902b4" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:05.0431988" startTime="2025-06-21T12:04:35.0044446+00:00" endTime="2025-06-21T12:05:39.8811981+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5efcaeb-2919-4ce9-9c2c-836925d2eca3" />
    <UnitTestResult executionId="ebb40c91-8e66-4109-9ebe-1564882365f9" testId="f1fded68-0c10-6600-47db-05f80f0574b3" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:20.2243046" startTime="2025-06-21T12:04:35.1655651+00:00" endTime="2025-06-21T12:05:55.1911195+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ebb40c91-8e66-4109-9ebe-1564882365f9" />
    <UnitTestResult executionId="7f2c82f3-6dc3-4ad0-b3aa-f74362d114ee" testId="d78dd45c-bc4a-8547-4b4a-4932b20af1cf" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" computerName="fv-az1057-923" duration="00:01:19.9999158" startTime="2025-06-21T12:04:34.7051313+00:00" endTime="2025-06-21T12:05:54.7132300+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f2c82f3-6dc3-4ad0-b3aa-f74362d114ee">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d45bfd9d-d2da-4833-b7eb-00ba65a9afd0" testId="cdc305de-fec6-9776-d90b-9c9814e25391" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:02.2854703" startTime="2025-06-21T12:04:36.0382445+00:00" endTime="2025-06-21T12:05:37.6892421+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d45bfd9d-d2da-4833-b7eb-00ba65a9afd0" />
    <UnitTestResult executionId="67d0e1d6-7f43-46ac-956b-55259e81724d" testId="b408f8c0-2d97-8ee6-6a5e-e64080c32baa" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" computerName="fv-az1057-923" duration="00:00:54.8840062" startTime="2025-06-21T12:04:36.0261030+00:00" endTime="2025-06-21T12:05:30.2773917+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67d0e1d6-7f43-46ac-956b-55259e81724d" />
    <UnitTestResult executionId="2559c841-9b3e-40c8-b8c3-722c98670b1c" testId="9d8b4867-4123-c157-202c-3288288231d8" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:04.9680831" startTime="2025-06-21T12:04:35.1848561+00:00" endTime="2025-06-21T12:05:39.9211323+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2559c841-9b3e-40c8-b8c3-722c98670b1c" />
    <UnitTestResult executionId="339a0c33-5c63-45dc-95b7-2e2768b78b9c" testId="e026e72f-4d88-b363-f894-324a08777650" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:10.5157004" startTime="2025-06-21T12:04:34.9389766+00:00" endTime="2025-06-21T12:05:45.3198502+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="339a0c33-5c63-45dc-95b7-2e2768b78b9c" />
    <UnitTestResult executionId="71ee01f2-d1fc-4903-8cd5-07277dfb82ea" testId="bbe8a229-a133-c2ec-df45-1e4d4e3d009b" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:00:55.0706142" startTime="2025-06-21T12:04:35.1007611+00:00" endTime="2025-06-21T12:05:29.9535646+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71ee01f2-d1fc-4903-8cd5-07277dfb82ea" />
    <UnitTestResult executionId="6de96658-d164-4b54-84c4-bc1382614a85" testId="bf5377ba-e86a-2980-2249-3dfac08904d0" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ThrowsArgumentNullException_WhenPredicateIsNull" computerName="fv-az1057-923" duration="00:00:00.0184020" startTime="2025-06-21T12:04:36.6570129+00:00" endTime="2025-06-21T12:04:36.7517356+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6de96658-d164-4b54-84c4-bc1382614a85" />
    <UnitTestResult executionId="3d41412c-44cb-4d21-8081-9850b4a64aed" testId="42b06cc7-95be-f03b-5c7f-ff36df7b8df6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:19.1764344" startTime="2025-06-21T12:04:36.5333984+00:00" endTime="2025-06-21T12:05:54.7644791+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d41412c-44cb-4d21-8081-9850b4a64aed" />
    <UnitTestResult executionId="35499401-cdd6-4b1a-a2b3-fab80e335057" testId="3f07c33e-257a-9e46-9882-c25bb3ce55e2" testName="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" computerName="fv-az1057-923" duration="00:01:19.9764335" startTime="2025-06-21T12:04:35.7998210+00:00" endTime="2025-06-21T12:05:55.2110607+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35499401-cdd6-4b1a-a2b3-fab80e335057" />
    <UnitTestResult executionId="dbcd649e-4c48-4371-8fab-71b23ecf2854" testId="6c069d1a-d6ee-6bd0-25bd-e8e5c6b5fb57" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" computerName="fv-az1057-923" duration="00:01:12.0679488" startTime="2025-06-21T12:04:37.0315183+00:00" endTime="2025-06-21T12:05:47.7675161+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dbcd649e-4c48-4371-8fab-71b23ecf2854">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClassWithNonVirtualIndexer&gt;().Setup(x =&gt; x[0])|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="48510f2d-cedf-4e0d-adbc-920aa0cc674d" testId="76e5f031-4b4b-9cb0-c707-a9001c7b50ef" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" computerName="fv-az1057-923" duration="00:01:16.7509464" startTime="2025-06-21T12:04:36.5525896+00:00" endTime="2025-06-21T12:05:52.3901248+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48510f2d-cedf-4e0d-adbc-920aa0cc674d" />
    <UnitTestResult executionId="bf7d827f-54a6-4cd6-80e7-ed31e6f63206" testId="380d2d8a-9dc3-48d7-d960-d918f94e2286" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" computerName="fv-az1057-923" duration="00:01:18.6610096" startTime="2025-06-21T12:04:36.4019983+00:00" endTime="2025-06-21T12:05:54.2722059+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf7d827f-54a6-4cd6-80e7-ed31e6f63206" />
    <UnitTestResult executionId="4875dac3-a984-4ab6-8d09-3535091c4420" testId="a2be3ce0-e168-1783-dcbc-21b691453dcb" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:00:57.6522269" startTime="2025-06-21T12:04:36.9211657+00:00" endTime="2025-06-21T12:05:33.3349809+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4875dac3-a984-4ab6-8d09-3535091c4420">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8f08bebf-a88b-4425-a830-28486cc466b7" testId="42cd8ef0-523b-1dc0-f5d2-bd8126fbc0e3" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:06.0482788" startTime="2025-06-21T12:04:34.5448856+00:00" endTime="2025-06-21T12:05:40.5953892+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f08bebf-a88b-4425-a830-28486cc466b7" />
    <UnitTestResult executionId="bb05f265-84b3-4dd3-8ee4-3da5a8d7cbc7" testId="0f3942e4-ae3d-5f54-a6c8-4b9521f839bb" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" computerName="fv-az1057-923" duration="00:01:13.0585498" startTime="2025-06-21T12:04:36.4792993+00:00" endTime="2025-06-21T12:05:48.7171363+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb05f265-84b3-4dd3-8ee4-3da5a8d7cbc7" />
    <UnitTestResult executionId="c1bc51a4-db95-4156-a0a2-0bc2b1e23c2b" testId="f836cea3-54d1-7216-3ab5-2afed32c432a" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.6124373" startTime="2025-06-21T12:04:34.5464332+00:00" endTime="2025-06-21T12:05:42.1628755+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1bc51a4-db95-4156-a0a2-0bc2b1e23c2b" />
    <UnitTestResult executionId="c0c5ba63-6d8e-4470-aa16-e4cd0ad1b45e" testId="f8689325-bb18-af36-7ff9-d55d0b31d69b" testName="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Succeeds_WithValidDictionary" computerName="fv-az1057-923" duration="00:00:00.0213839" startTime="2025-06-21T12:04:34.7801800+00:00" endTime="2025-06-21T12:04:34.8140754+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0c5ba63-6d8e-4470-aa16-e4cd0ad1b45e" />
    <UnitTestResult executionId="e1942575-9070-48c5-8d3e-1e8f3c183485" testId="20195953-6929-4a6c-e5be-58d5c94d2e00" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" computerName="fv-az1057-923" duration="00:00:53.9094608" startTime="2025-06-21T12:04:35.8890022+00:00" endTime="2025-06-21T12:05:29.1907506+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1942575-9070-48c5-8d3e-1e8f3c183485" />
    <UnitTestResult executionId="b7937ab7-6ff1-44e5-90f6-fb03494acb33" testId="2d168e6d-3806-48eb-826b-5022f52a6376" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" computerName="fv-az1057-923" duration="00:00:53.0309196" startTime="2025-06-21T12:04:35.9558219+00:00" endTime="2025-06-21T12:05:28.3402929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7937ab7-6ff1-44e5-90f6-fb03494acb33" />
    <UnitTestResult executionId="9c251135-df80-4bc1-a4bc-e9cc0ba92a94" testId="0c18c425-de15-3c20-9b48-26da9261b623" testName="Moq.Analyzers.Test.ProtectedMemberBasicPatternsAnalyzerTests.ShouldNotReportDiagnosticsForBasicProtectedPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;CommandBase&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:21.5263398" startTime="2025-06-21T12:04:35.8574750+00:00" endTime="2025-06-21T12:05:56.8314829+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c251135-df80-4bc1-a4bc-e9cc0ba92a94">
      <Output>
        <StdOut>Original:

using Moq.Protected;

public abstract class CommandBase
{
    protected virtual int Execute() =&gt; 0;
    protected int NonVirtualExecute() =&gt; 0;
}

internal class UnitTest
{
    private void Test()
    {
        var mock = new Mock&lt;CommandBase&gt;(MockBehavior.Strict);
mock.Protected().Setup&lt;int&gt;("Execute").Returns(5);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cdfad0d2-583c-4241-ac74-ebfb66e107c9" testId="702dd27f-170e-20e3-4df5-e3dfaf479bc9" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:20.0732297" startTime="2025-06-21T12:04:35.8069343+00:00" endTime="2025-06-21T12:05:55.3683073+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cdfad0d2-583c-4241-ac74-ebfb66e107c9">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0957ac9a-9b62-4886-a2ad-496c906f0a38" testId="765d9c59-0796-beb6-082d-70599b9ef0b5" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:00:57.7952935" startTime="2025-06-21T12:04:35.1909568+00:00" endTime="2025-06-21T12:05:32.7489778+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0957ac9a-9b62-4886-a2ad-496c906f0a38" />
    <UnitTestResult executionId="b8ff1014-aecd-43bd-bbf9-4938d3a0569f" testId="1a6f65da-3ffd-4b9d-8485-0ed56964c473" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:00:59.8010300" startTime="2025-06-21T12:04:37.0266559+00:00" endTime="2025-06-21T12:05:35.5434052+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8ff1014-aecd-43bd-bbf9-4938d3a0569f" />
    <UnitTestResult executionId="e9ad5a6d-00cc-46dd-ab8c-6cb62837d9b2" testId="3b148d2b-baad-a66c-4364-9c93c8a4f81b" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:07.6132266" startTime="2025-06-21T12:04:37.0246774+00:00" endTime="2025-06-21T12:05:43.3128782+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9ad5a6d-00cc-46dd-ab8c-6cb62837d9b2" />
    <UnitTestResult executionId="9250907e-df15-4e86-b6c4-4f2358bd7478" testId="05733545-ef12-a259-6f38-d98c4b065ae2" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" computerName="fv-az1057-923" duration="00:01:18.7307182" startTime="2025-06-21T12:04:34.7959926+00:00" endTime="2025-06-21T12:05:53.5170906+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9250907e-df15-4e86-b6c4-4f2358bd7478">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="21b22cb6-5bdc-4636-bbe2-e24514ec02cc" testId="be6abb17-51df-dd40-2ca5-2b4b9d90c2a8" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:05.8997459" startTime="2025-06-21T12:04:35.0125569+00:00" endTime="2025-06-21T12:05:40.7431933+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="21b22cb6-5bdc-4636-bbe2-e24514ec02cc" />
    <UnitTestResult executionId="a2e1c130-97a0-46d5-be6f-b5c9c2ac09a1" testId="c2edd9c1-f96e-115a-c464-98fa8ca8e6e3" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:03.3198351" startTime="2025-06-21T12:04:35.9239879+00:00" endTime="2025-06-21T12:05:38.6451068+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2e1c130-97a0-46d5-be6f-b5c9c2ac09a1">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="716adb43-2b7f-48c2-9510-5d9464945686" testId="e11ad657-1d9e-f2b8-d4ff-d360443f60a0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:11.2405120" startTime="2025-06-21T12:04:35.9813179+00:00" endTime="2025-06-21T12:05:46.5786185+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="716adb43-2b7f-48c2-9510-5d9464945686" />
    <UnitTestResult executionId="8a23c992-fb8c-4863-859e-b3fca70e32b1" testId="25915602-30a1-11c3-1441-58ce4ebf36c9" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:01.0724065" startTime="2025-06-21T12:04:37.0190929+00:00" endTime="2025-06-21T12:05:36.8153345+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a23c992-fb8c-4863-859e-b3fca70e32b1" />
    <UnitTestResult executionId="78c777e3-6fbc-4af4-87d8-899e8b1fe1e8" testId="151e6b6d-d9ed-0790-78c3-14eff8d77f56" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:00:58.2064279" startTime="2025-06-21T12:04:35.1921973+00:00" endTime="2025-06-21T12:05:33.1661115+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78c777e3-6fbc-4af4-87d8-899e8b1fe1e8" />
    <UnitTestResult executionId="f17e6150-a400-46bb-a6f3-38b7a08d762b" testId="f1cf13a1-ae98-b65a-d9a8-765a84782843" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:07.5210695" startTime="2025-06-21T12:04:35.0808500+00:00" endTime="2025-06-21T12:05:42.4086903+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f17e6150-a400-46bb-a6f3-38b7a08d762b" />
    <UnitTestResult executionId="ca8ce7c3-f667-4386-b928-66c561805eca" testId="a56d1103-29ad-994d-0833-6475cbdb3d7e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:59.9325224" startTime="2025-06-21T12:04:35.9419625+00:00" endTime="2025-06-21T12:05:35.2371230+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ca8ce7c3-f667-4386-b928-66c561805eca" />
    <UnitTestResult executionId="59c03f61-f5b7-4903-a642-9510a2550ed6" testId="93e483d1-0d13-c3ee-52d7-ac1ddcc4beb8" testName="Moq.Analyzers.Test.ProtectedMemberBasicPatternsAnalyzerTests.ShouldNotReportDiagnosticsForBasicProtectedPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;CommandBase&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:21.1619140" startTime="2025-06-21T12:04:35.8876475+00:00" endTime="2025-06-21T12:05:56.4639480+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59c03f61-f5b7-4903-a642-9510a2550ed6">
      <Output>
        <StdOut>Original:
namespace MyNamespace;
using Moq.Protected;

public abstract class CommandBase
{
    protected virtual int Execute() =&gt; 0;
    protected int NonVirtualExecute() =&gt; 0;
}

internal class UnitTest
{
    private void Test()
    {
        var mock = new Mock&lt;CommandBase&gt;(MockBehavior.Strict);
mock.Protected().Setup&lt;int&gt;("Execute").Returns(5);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40bd4071-f761-4669-af1c-e8766c11975d" testId="0371dd69-06df-7998-a7ca-5b07d5ce10d8" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.6918131" startTime="2025-06-21T12:04:35.6636475+00:00" endTime="2025-06-21T12:05:54.8852620+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40bd4071-f761-4669-af1c-e8766c11975d" />
    <UnitTestResult executionId="d9282cf1-088b-4f70-9377-6ef65d320055" testId="58db66fa-ba47-0932-fe1b-8886624fbb36" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:02.2401226" startTime="2025-06-21T12:04:35.1120018+00:00" endTime="2025-06-21T12:05:37.1271502+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9282cf1-088b-4f70-9377-6ef65d320055" />
    <UnitTestResult executionId="3c0f28e6-a745-4cd2-9e8b-9ded50af3310" testId="ff90c02b-a0a7-7a7f-ccac-06eb6c6eea6a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.9990924" startTime="2025-06-21T12:04:35.3988682+00:00" endTime="2025-06-21T12:05:51.0491967+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c0f28e6-a745-4cd2-9e8b-9ded50af3310" />
    <UnitTestResult executionId="781ee039-d396-4b41-b7f1-f8e94bc52880" testId="15749751-a3d3-2955-f2ea-d4f0baa46657" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.TestProp&quot;···)" computerName="fv-az1057-923" duration="00:00:58.9882242" startTime="2025-06-21T12:04:37.0433051+00:00" endTime="2025-06-21T12:05:34.6988799+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="781ee039-d396-4b41-b7f1-f8e94bc52880">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="30c6288a-cda1-4e18-b0fd-5d5ce820206a" testId="d5c079cf-8e5e-3c57-648d-56ac74f7510d" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" computerName="fv-az1057-923" duration="00:01:21.2453702" startTime="2025-06-21T12:04:35.2113523+00:00" endTime="2025-06-21T12:05:56.2144464+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30c6288a-cda1-4e18-b0fd-5d5ce820206a" />
    <UnitTestResult executionId="559d9be6-e164-4a05-a7ed-5b6c92e5f4db" testId="6dfa87eb-9b4b-a97b-31e0-f41d0f1148e4" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.GetNumb&quot;···)" computerName="fv-az1057-923" duration="00:00:52.1980633" startTime="2025-06-21T12:04:37.0699050+00:00" endTime="2025-06-21T12:05:27.9347235+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="559d9be6-e164-4a05-a7ed-5b6c92e5f4db">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.GetNumberAsync()).Returns(ValueTask.FromResult(42));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ad02ac4d-d6e4-47fd-a6ef-b70d150f02e4" testId="1e1ab32f-a463-3c8a-9040-abe7355c6f4c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:16.8467532" startTime="2025-06-21T12:04:36.4819986+00:00" endTime="2025-06-21T12:05:52.4580208+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad02ac4d-d6e4-47fd-a6ef-b70d150f02e4" />
    <UnitTestResult executionId="b680f2ec-2e9b-454e-bea7-cbde45507643" testId="612ad57f-7b3f-4988-a801-3bc0d08b608d" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:03.6551064" startTime="2025-06-21T12:04:35.8604381+00:00" endTime="2025-06-21T12:05:38.9302297+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b680f2ec-2e9b-454e-bea7-cbde45507643">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fa139d05-e600-4a24-8612-f4cf6d0ca0c9" testId="6058ca6e-038e-3995-3d5c-5996434ef0f3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:17.3799351" startTime="2025-06-21T12:04:36.5810930+00:00" endTime="2025-06-21T12:05:52.9931711+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa139d05-e600-4a24-8612-f4cf6d0ca0c9" />
    <UnitTestResult executionId="f79bd80f-a83a-4629-a33d-52913f302c8b" testId="20e6e9ba-e717-a238-e38e-363903d2b78d" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" computerName="fv-az1057-923" duration="00:01:15.9407867" startTime="2025-06-21T12:04:35.7871711+00:00" endTime="2025-06-21T12:05:51.1679745+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f79bd80f-a83a-4629-a33d-52913f302c8b">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="343b7b03-9ae6-444d-b79c-74805419f438" testId="d9bcc0fc-ff6c-e48b-fd4d-2c27d60b6764" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:17.6165229" startTime="2025-06-21T12:04:35.8501401+00:00" endTime="2025-06-21T12:05:52.9367506+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="343b7b03-9ae6-444d-b79c-74805419f438">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback({|Moq1100:(string s1, string s2)|} =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3835ef12-3c7a-4f89-a0ee-c8905726a427" testId="9f38e032-92c7-fde0-2083-513b829d65db" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.7919959" startTime="2025-06-21T12:04:35.8984010+00:00" endTime="2025-06-21T12:05:37.0934615+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3835ef12-3c7a-4f89-a0ee-c8905726a427">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c79e5a0-476a-4060-b98e-d85d734982e6" testId="392e7459-7348-c714-fcd1-e0dda0a8e259" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:01:18.7536166" startTime="2025-06-21T12:04:35.0642033+00:00" endTime="2025-06-21T12:05:53.6624589+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c79e5a0-476a-4060-b98e-d85d734982e6" />
    <UnitTestResult executionId="1bde3cfb-a956-4def-88f6-6cf553ac44bd" testId="eb5c705e-276a-b57b-9ec1-e3888dd98af6" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:14.6196603" startTime="2025-06-21T12:04:34.6117360+00:00" endTime="2025-06-21T12:05:49.1952761+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1bde3cfb-a956-4def-88f6-6cf553ac44bd" />
    <UnitTestResult executionId="93d53313-b5a1-41cc-bb7c-a07d8e9ce6a4" testId="d7144b69-c307-d44d-89d6-98eba81b79ff" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:02.2781998" startTime="2025-06-21T12:04:35.6450820+00:00" endTime="2025-06-21T12:05:37.3954983+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93d53313-b5a1-41cc-bb7c-a07d8e9ce6a4" />
    <UnitTestResult executionId="d2c877fb-c2e7-4baa-adfc-ead82f83c4f5" testId="aed32561-5f20-1bac-99fe-d0a7e89774eb" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:05.7335468" startTime="2025-06-21T12:04:34.9835663+00:00" endTime="2025-06-21T12:05:40.5650400+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2c877fb-c2e7-4baa-adfc-ead82f83c4f5">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData("test"));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e5a39a10-880e-43f5-b028-aa91a369f687" testId="b0ea241e-b30f-c096-d0f5-7afa8a27de6a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:13.9895242" startTime="2025-06-21T12:04:36.6109991+00:00" endTime="2025-06-21T12:05:49.6630399+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e5a39a10-880e-43f5-b028-aa91a369f687" />
    <UnitTestResult executionId="d0d1cea2-7b5e-4d7d-a321-ee81a6d8cb1b" testId="f4158d98-2984-c2bb-766f-527772ea0a24" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:17.4197669" startTime="2025-06-21T12:04:36.5825898+00:00" endTime="2025-06-21T12:05:53.0104193+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0d1cea2-7b5e-4d7d-a321-ee81a6d8cb1b" />
    <UnitTestResult executionId="8dfb9e32-6f3d-4025-bca7-31d808936871" testId="86ba5fec-af48-033a-e445-2a1330408bbe" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:08.3116349" startTime="2025-06-21T12:04:34.9974454+00:00" endTime="2025-06-21T12:05:43.1456950+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8dfb9e32-6f3d-4025-bca7-31d808936871" />
    <UnitTestResult executionId="2b3233b6-0fc9-4c89-a141-bfbd1b83d18d" testId="c12a9084-2213-5ca5-3946-6d22675684c8" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:18.8337937" startTime="2025-06-21T12:04:35.0061303+00:00" endTime="2025-06-21T12:05:53.7234301+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b3233b6-0fc9-4c89-a141-bfbd1b83d18d">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0b28d7e2-a1c3-415a-a920-1d5ec87909bd" testId="fd522f2e-0bc7-5c1e-5748-4501860d7f93" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:00:57.0088518" startTime="2025-06-21T12:04:35.0788258+00:00" endTime="2025-06-21T12:05:31.8715495+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b28d7e2-a1c3-415a-a920-1d5ec87909bd" />
    <UnitTestResult executionId="166c904b-b67c-423e-9f85-fdbc2967c28a" testId="c8bd649f-26b2-55e7-50e4-0b6b4c66ddf9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:15.0583024" startTime="2025-06-21T12:04:36.6158172+00:00" endTime="2025-06-21T12:05:50.6700632+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="166c904b-b67c-423e-9f85-fdbc2967c28a" />
    <UnitTestResult executionId="daab238c-3f3e-42c2-a4bd-06c79bc04a7c" testId="eeebf50b-5feb-d90e-ff6a-d27ddb55002c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" computerName="fv-az1057-923" duration="00:00:51.5004386" startTime="2025-06-21T12:04:36.1335241+00:00" endTime="2025-06-21T12:05:26.9466675+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="daab238c-3f3e-42c2-a4bd-06c79bc04a7c" />
    <UnitTestResult executionId="93894ba2-fcbf-4e91-87dc-c6413f9f7b5a" testId="89f326d5-f978-fdf7-31d7-bf5e211e7882" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" computerName="fv-az1057-923" duration="00:00:51.6840420" startTime="2025-06-21T12:04:36.1662911+00:00" endTime="2025-06-21T12:05:27.1389162+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93894ba2-fcbf-4e91-87dc-c6413f9f7b5a" />
    <UnitTestResult executionId="a5d494b2-8d03-4b66-b428-ba57d4669ad4" testId="712cda48-f222-70d4-07d0-30d8d6dc0fb4" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:07.5714282" startTime="2025-06-21T12:04:37.0282262+00:00" endTime="2025-06-21T12:05:43.2852890+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5d494b2-8d03-4b66-b428-ba57d4669ad4" />
    <UnitTestResult executionId="09b846fd-111b-4330-a6e2-a59b6221c030" testId="bd57cf90-a388-8ada-ff2a-1a5e336dede0" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.9100746" startTime="2025-06-21T12:04:35.3692685+00:00" endTime="2025-06-21T12:05:45.9132031+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09b846fd-111b-4330-a6e2-a59b6221c030" />
    <UnitTestResult executionId="718e5cd3-a56b-4c01-8b62-98e8a521ba23" testId="4ae82ef2-44a5-d65e-0037-5bd79cc4a8db" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" computerName="fv-az1057-923" duration="00:01:08.3860253" startTime="2025-06-21T12:04:35.0971187+00:00" endTime="2025-06-21T12:05:43.2780711+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="718e5cd3-a56b-4c01-8b62-98e8a521ba23" />
    <UnitTestResult executionId="cb1c7e96-2c2d-46f7-9c6d-8f33efeebd56" testId="6e7729c5-617e-0f4f-f7ab-81a3ffcef53e" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:06.8965540" startTime="2025-06-21T12:04:34.6616270+00:00" endTime="2025-06-21T12:05:41.5498842+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb1c7e96-2c2d-46f7-9c6d-8f33efeebd56" />
    <UnitTestResult executionId="2cd95623-f35e-4934-9b42-49465cad873c" testId="66e63ca8-5252-053b-8302-ccce87fd75dd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:01:14.7307928" startTime="2025-06-21T12:04:36.4448759+00:00" endTime="2025-06-21T12:05:50.2981053+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cd95623-f35e-4934-9b42-49465cad873c" />
    <UnitTestResult executionId="cc1232f9-7de3-4d95-8fbf-7c9252700774" testId="65dbd63c-5fcb-1226-a31b-58934c0375ad" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:18.7393656" startTime="2025-06-21T12:04:35.5722638+00:00" endTime="2025-06-21T12:05:53.8401798+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc1232f9-7de3-4d95-8fbf-7c9252700774" />
    <UnitTestResult executionId="784f919d-8e93-4690-bf02-cb7e6d1e2acc" testId="c4fcda4d-bb7a-ca45-f419-893fcadcf06f" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:10.2672994" startTime="2025-06-21T12:04:35.8930695+00:00" endTime="2025-06-21T12:05:45.5529684+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="784f919d-8e93-4690-bf02-cb7e6d1e2acc">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="de44fc3e-4442-4e06-baa9-ea2a7961840d" testId="aa8d8c79-8ba8-903f-8b9e-16718a9150f6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:13.6261619" startTime="2025-06-21T12:04:36.4151172+00:00" endTime="2025-06-21T12:05:49.1747062+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de44fc3e-4442-4e06-baa9-ea2a7961840d" />
    <UnitTestResult executionId="1eadb1ae-9f53-4981-aba4-fe53554ecb74" testId="55628be9-b819-2110-dc20-1379da13b1fd" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" computerName="fv-az1057-923" duration="00:00:56.3899548" startTime="2025-06-21T12:04:35.8952075+00:00" endTime="2025-06-21T12:05:31.6904673+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1eadb1ae-9f53-4981-aba4-fe53554ecb74">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="691e286f-cd55-44f7-81ed-83ecb79004f8" testId="692fe558-2ca8-0879-02b1-56fb3585a329" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:15.5240628" startTime="2025-06-21T12:04:35.7163632+00:00" endTime="2025-06-21T12:05:50.7103542+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="691e286f-cd55-44f7-81ed-83ecb79004f8" />
    <UnitTestResult executionId="d946c6dc-5153-4351-a6ec-1b008f62ecda" testId="7c78c171-21fb-ada0-f5c0-13b32a33905c" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:05.8953511" startTime="2025-06-21T12:04:35.0035566+00:00" endTime="2025-06-21T12:05:40.7390779+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d946c6dc-5153-4351-a6ec-1b008f62ecda">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1b6b47a7-b08d-404b-aa33-57c284b37a2d" testId="c6477aec-6b3f-97d1-4f9c-b6878ea976f2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.6518400" startTime="2025-06-21T12:04:35.4600638+00:00" endTime="2025-06-21T12:05:48.7438952+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b6b47a7-b08d-404b-aa33-57c284b37a2d" />
    <UnitTestResult executionId="e7c20fb9-ed59-4218-9615-f129ff876311" testId="1c9d640e-add2-496b-4065-a3c823768c21" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:11.1678713" startTime="2025-06-21T12:04:35.9464051+00:00" endTime="2025-06-21T12:05:46.4745417+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7c20fb9-ed59-4218-9615-f129ff876311">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback({|Moq1100:(string s1, int i1)|} =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c42ec2c-7d46-4a35-aeaa-41d32ab2c0f4" testId="f3565819-d11f-1fe7-68fe-ecc4ed90d30d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:14.5706027" startTime="2025-06-21T12:04:36.3989637+00:00" endTime="2025-06-21T12:05:50.1110167+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c42ec2c-7d46-4a35-aeaa-41d32ab2c0f4" />
    <UnitTestResult executionId="e08d8537-5169-4db4-8be2-9c13dc6a9cec" testId="c552a047-c4bc-9a51-d335-4a335218b2f7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:06.8611860" startTime="2025-06-21T12:04:36.3069906+00:00" endTime="2025-06-21T12:05:42.3461354+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e08d8537-5169-4db4-8be2-9c13dc6a9cec" />
    <UnitTestResult executionId="e4957808-b830-4860-8ee9-0dfde887c8ee" testId="691cb344-acf8-07d9-149f-4d10c8531e03" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:02.6103813" startTime="2025-06-21T12:04:35.9028420+00:00" endTime="2025-06-21T12:05:37.9016653+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4957808-b830-4860-8ee9-0dfde887c8ee" />
    <UnitTestResult executionId="3853af2f-b3eb-4b33-9921-29cdac11ef27" testId="7f27c765-73d7-716a-2d8a-746509fd951e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:00:51.0980561" startTime="2025-06-21T12:04:36.3037210+00:00" endTime="2025-06-21T12:05:26.6021784+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3853af2f-b3eb-4b33-9921-29cdac11ef27" />
    <UnitTestResult executionId="2fa943fb-d4d0-4f11-b72e-8232d612708f" testId="14c44760-4e56-9d4d-b09d-9ff5f8b888fb" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" computerName="fv-az1057-923" duration="00:01:09.2893054" startTime="2025-06-21T12:04:35.2243449+00:00" endTime="2025-06-21T12:05:44.3080131+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2fa943fb-d4d0-4f11-b72e-8232d612708f">
      <Output>
        <StdOut>namespace MyNamespace;

public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAsync().Result);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8ce41df-a070-48e0-be03-92c07c47bbe3" testId="29649cfc-fc7d-6637-fc22-f97955b1613b" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.9246818" startTime="2025-06-21T12:04:35.6512684+00:00" endTime="2025-06-21T12:05:49.0488725+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8ce41df-a070-48e0-be03-92c07c47bbe3" />
    <UnitTestResult executionId="5b70fd96-8331-4473-98d6-514f2461fc83" testId="1b2013e3-d413-69f9-02f4-a7e4ab508dfe" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.6668150" startTime="2025-06-21T12:04:35.6480218+00:00" endTime="2025-06-21T12:05:47.7937186+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b70fd96-8331-4473-98d6-514f2461fc83" />
    <UnitTestResult executionId="2da5dd97-fc10-452a-b1dc-9d42c68ddc9f" testId="db216584-ee9f-3d6f-5eed-f30ebcf2c868" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:01:15.4152362" startTime="2025-06-21T12:04:36.6234012+00:00" endTime="2025-06-21T12:05:51.1254539+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2da5dd97-fc10-452a-b1dc-9d42c68ddc9f" />
    <UnitTestResult executionId="f3094ee0-e106-49d1-89dd-e48d6134b9ad" testId="b4304a90-2046-7e2e-0654-fdc0fc4059f1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:11.3978990" startTime="2025-06-21T12:04:36.4048495+00:00" endTime="2025-06-21T12:05:46.9290126+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3094ee0-e106-49d1-89dd-e48d6134b9ad" />
    <UnitTestResult executionId="d814d95a-fcae-4a43-91a4-e20c752710b2" testId="dc3a3424-8ced-16f6-3ceb-539b6b976e5d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.7769155" startTime="2025-06-21T12:04:35.3845596+00:00" endTime="2025-06-21T12:05:45.8152633+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d814d95a-fcae-4a43-91a4-e20c752710b2" />
    <UnitTestResult executionId="d8f7c1e0-0ac2-45a3-a374-5455b53d02c9" testId="468bfca5-300a-87c2-f7eb-1ac41c0960ac" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:00:51.1209952" startTime="2025-06-21T12:04:36.2860756+00:00" endTime="2025-06-21T12:05:26.6123316+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8f7c1e0-0ac2-45a3-a374-5455b53d02c9" />
    <UnitTestResult executionId="22933c48-a3d6-4837-bc92-e42f7ce6dc89" testId="0a717009-b496-f4e8-292c-a005fb572692" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" computerName="fv-az1057-923" duration="00:00:59.4430953" startTime="2025-06-21T12:04:35.9697332+00:00" endTime="2025-06-21T12:05:34.7690560+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22933c48-a3d6-4837-bc92-e42f7ce6dc89" />
    <UnitTestResult executionId="7a05e78c-ee83-4bc3-b873-1a89a72739ff" testId="17c2a940-7aaf-3c95-f2ab-507c4ff9d7ea" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:19.7538387" startTime="2025-06-21T12:04:34.6182822+00:00" endTime="2025-06-21T12:05:54.3249380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a05e78c-ee83-4bc3-b873-1a89a72739ff" />
    <UnitTestResult executionId="d4e39f43-b0e3-4dc4-902b-327150e995d7" testId="59878915-f70b-9901-834c-54c0c28aee51" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:00.5484165" startTime="2025-06-21T12:04:35.4942179+00:00" endTime="2025-06-21T12:05:35.6781847+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4e39f43-b0e3-4dc4-902b-327150e995d7" />
    <UnitTestResult executionId="571750f5-58f0-4d58-9e15-3581eb2804d1" testId="c5f3d0b0-1290-9e1f-a687-de94f70c7ef7" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:05.9001419" startTime="2025-06-21T12:04:35.0424862+00:00" endTime="2025-06-21T12:05:40.7571316+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="571750f5-58f0-4d58-9e15-3581eb2804d1" />
    <UnitTestResult executionId="53ff8785-03e3-403d-8bc3-5f3b84652c58" testId="8c1b107c-f1e4-7e98-09b5-bce23c52b356" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:16.6235152" startTime="2025-06-21T12:04:35.7689389+00:00" endTime="2025-06-21T12:05:51.8769965+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53ff8785-03e3-403d-8bc3-5f3b84652c58" />
    <UnitTestResult executionId="5c1b2dd0-b038-453b-9de5-6bdf31ee53b4" testId="c600abf1-7803-e257-d0d2-0fe4da95b3c1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:19.4537797" startTime="2025-06-21T12:04:36.5120189+00:00" endTime="2025-06-21T12:05:55.0286253+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c1b2dd0-b038-453b-9de5-6bdf31ee53b4" />
    <UnitTestResult executionId="b264ac3a-90a3-4327-ad4d-31e761559c8b" testId="8ef3957b-abc9-1099-3ea1-845e371ff51f" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:09.7879847" startTime="2025-06-21T12:04:34.6300176+00:00" endTime="2025-06-21T12:05:44.3680711+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b264ac3a-90a3-4327-ad4d-31e761559c8b" />
    <UnitTestResult executionId="4536b236-1140-4203-b1a5-12fc362aa80c" testId="9587797b-f9f3-c372-c160-ee39e3f5c56f" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:17.9570070" startTime="2025-06-21T12:04:36.8442626+00:00" endTime="2025-06-21T12:05:53.6333662+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4536b236-1140-4203-b1a5-12fc362aa80c">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9f96744-4dad-47c2-bed3-3d8ef7052a53" testId="1872df90-8cb5-7d4c-ba09-e35e00359994" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" computerName="fv-az1057-923" duration="00:01:19.9198129" startTime="2025-06-21T12:04:34.6684081+00:00" endTime="2025-06-21T12:05:54.5854604+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9f96744-4dad-47c2-bed3-3d8ef7052a53" />
    <UnitTestResult executionId="17aca4ba-63b5-48ce-8d7b-74d47a649195" testId="cc02e2b5-ce12-acbc-ebb5-9b7c11fa7ead" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:16.4032649" startTime="2025-06-21T12:04:35.4239615+00:00" endTime="2025-06-21T12:05:51.5621649+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="17aca4ba-63b5-48ce-8d7b-74d47a649195" />
    <UnitTestResult executionId="47213818-93da-472f-88ff-9174536f6948" testId="8695e72e-08cd-7b05-5ad9-a993d5fb61d6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" computerName="fv-az1057-923" duration="00:01:12.0875339" startTime="2025-06-21T12:04:36.4689415+00:00" endTime="2025-06-21T12:05:47.6610303+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47213818-93da-472f-88ff-9174536f6948" />
    <UnitTestResult executionId="809d47a3-36ac-404c-ac8f-f23729e1925c" testId="5e5f14af-1695-94ca-eae8-8c16f5331b92" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2185391" startTime="2025-06-21T12:04:34.6635015+00:00" endTime="2025-06-21T12:05:52.8855262+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="809d47a3-36ac-404c-ac8f-f23729e1925c" />
    <UnitTestResult executionId="d46a39ef-4a00-424a-a948-439e8a1dab98" testId="831b930a-bc9a-73d0-2e8b-c8dd2cda553b" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.0011971" startTime="2025-06-21T12:04:35.6725140+00:00" endTime="2025-06-21T12:05:51.1644825+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d46a39ef-4a00-424a-a948-439e8a1dab98" />
    <UnitTestResult executionId="708cdf41-cb17-4096-9af7-7838bacca4cb" testId="78b5492f-26c1-6f2f-5a04-36ccf021b50c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:53.6387766" startTime="2025-06-21T12:04:36.0915137+00:00" endTime="2025-06-21T12:05:29.0643369+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="708cdf41-cb17-4096-9af7-7838bacca4cb" />
    <UnitTestResult executionId="779ffa43-0e6f-4449-b36a-d3549dc12480" testId="a39c0351-7c2d-5b35-756f-0821070b3e4c" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:17.8209343" startTime="2025-06-21T12:04:35.4452821+00:00" endTime="2025-06-21T12:05:52.9284924+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="779ffa43-0e6f-4449-b36a-d3549dc12480" />
    <UnitTestResult executionId="20e40b0a-c9c9-4041-a33e-2407a6dcf241" testId="bd543530-3c66-48da-0e4e-464142293968" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:08.8309805" startTime="2025-06-21T12:04:34.5973993+00:00" endTime="2025-06-21T12:05:43.3848807+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20e40b0a-c9c9-4041-a33e-2407a6dcf241" />
    <UnitTestResult executionId="30dcc374-0ad8-46c2-bf39-b537d44907d8" testId="c27f7b37-1dab-8f2a-0a25-cfb18618bdf3" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:05.6478922" startTime="2025-06-21T12:04:34.6249045+00:00" endTime="2025-06-21T12:05:40.2359298+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30dcc374-0ad8-46c2-bf39-b537d44907d8" />
    <UnitTestResult executionId="c70275c6-2ad1-4800-b4cb-a932957e1800" testId="50770159-1f0a-0314-79b9-6013e27ddffe" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:00:58.9312873" startTime="2025-06-21T12:04:35.9775179+00:00" endTime="2025-06-21T12:05:34.2870448+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c70275c6-2ad1-4800-b4cb-a932957e1800" />
    <UnitTestResult executionId="de28c771-cb69-4db0-9b0f-63f4a8130bb5" testId="537eb5d2-a824-975a-0613-0c1354039157" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7033232" startTime="2025-06-21T12:04:36.3454669+00:00" endTime="2025-06-21T12:05:55.2496768+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de28c771-cb69-4db0-9b0f-63f4a8130bb5" />
    <UnitTestResult executionId="48cef4fe-6f90-4a73-bdc2-2f2e4d435322" testId="548873da-aaf9-3cdb-51eb-a84966fca79b" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:19.2647606" startTime="2025-06-21T12:04:34.5448125+00:00" endTime="2025-06-21T12:05:53.8399420+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48cef4fe-6f90-4a73-bdc2-2f2e4d435322" />
    <UnitTestResult executionId="4fe4befb-78b7-4e8e-b87d-eac6f2a5782c" testId="999e4374-aebe-5684-3171-b323d5c5e9b1" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" computerName="fv-az1057-923" duration="00:01:18.9360313" startTime="2025-06-21T12:04:35.3778670+00:00" endTime="2025-06-21T12:05:53.9950309+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4fe4befb-78b7-4e8e-b87d-eac6f2a5782c" />
    <UnitTestResult executionId="a1568ee2-22d1-42c3-ae66-4d26ab70c349" testId="5ccc639c-11db-1192-d7fc-e993da646164" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:09.9701456" startTime="2025-06-21T12:04:36.8576376+00:00" endTime="2025-06-21T12:05:45.6495254+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a1568ee2-22d1-42c3-ae66-4d26ab70c349">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0eca480c-29f8-4d2a-9e84-5fad89cc8385" testId="d23e30b4-11eb-4064-0f9d-744a894ce55f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:02.2798339" startTime="2025-06-21T12:04:36.0422651+00:00" endTime="2025-06-21T12:05:37.6895527+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0eca480c-29f8-4d2a-9e84-5fad89cc8385" />
    <UnitTestResult executionId="83100013-c66e-44b1-b31a-21130c397eac" testId="34ff3004-ac12-2f3b-52da-13995ef4b4d3" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.6048155" startTime="2025-06-21T12:04:35.8545511+00:00" endTime="2025-06-21T12:05:36.9299563+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="83100013-c66e-44b1-b31a-21130c397eac">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a080eae-d0c5-43dd-a1af-38fd35f6eecd" testId="890b2ac1-fe82-8019-0c0b-54bb6eca93f8" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" computerName="fv-az1057-923" duration="00:01:17.8489174" startTime="2025-06-21T12:04:34.6917466+00:00" endTime="2025-06-21T12:05:52.5360422+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a080eae-d0c5-43dd-a1af-38fd35f6eecd">
      <Output>
        <StdOut>Original:


public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:


public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal virtual string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e0d4855-1bab-49bb-aef5-3f44125fb39a" testId="bc1d9eb4-7516-3caa-e2b5-c889b4b7c1f2" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" computerName="fv-az1057-923" duration="00:01:08.2571807" startTime="2025-06-21T12:04:34.8957077+00:00" endTime="2025-06-21T12:05:43.0346864+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e0d4855-1bab-49bb-aef5-3f44125fb39a">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ade3d2f-7e32-41e7-8b8c-cb25836323c1" testId="08ff69e3-980a-fe77-4d59-3b0688d78c0a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" computerName="fv-az1057-923" duration="00:01:04.2617828" startTime="2025-06-21T12:04:36.0273960+00:00" endTime="2025-06-21T12:05:39.6598631+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ade3d2f-7e32-41e7-8b8c-cb25836323c1" />
    <UnitTestResult executionId="02598f82-8911-46b1-a4ae-09daef6f69b9" testId="79e826a7-e525-1553-5277-c140737937c2" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:05.1022258" startTime="2025-06-21T12:04:35.8760644+00:00" endTime="2025-06-21T12:05:40.3858880+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02598f82-8911-46b1-a4ae-09daef6f69b9">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:Mock.Of&lt;ISample&gt;()|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="686205bf-e381-4881-a769-ae87a7bee179" testId="cce9ab88-2092-a6b7-1940-cae712184a14" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:01:13.9325199" startTime="2025-06-21T12:04:35.6920291+00:00" endTime="2025-06-21T12:05:49.1139776+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="686205bf-e381-4881-a769-ae87a7bee179" />
    <UnitTestResult executionId="465df792-4a2c-4c08-a617-3288787e5493" testId="64446e51-c162-6cff-522c-b8d7df1029f9" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:13.8079748" startTime="2025-06-21T12:04:35.7659526+00:00" endTime="2025-06-21T12:05:49.0382802+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="465df792-4a2c-4c08-a617-3288787e5493" />
    <UnitTestResult executionId="e2b91309-cc09-4c11-ba34-c3f87bdf233b" testId="7fa7b917-9635-509d-ee53-facbe73572e9" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:05.6831830" startTime="2025-06-21T12:04:36.9928885+00:00" endTime="2025-06-21T12:05:41.3690501+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2b91309-cc09-4c11-ba34-c3f87bdf233b">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d2a1856-9cc8-4bb9-8aed-051980b36cdd" testId="3f274b91-6c63-6b34-6c49-4d30619094eb" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:00:55.2382775" startTime="2025-06-21T12:04:35.0780883+00:00" endTime="2025-06-21T12:05:30.1049951+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d2a1856-9cc8-4bb9-8aed-051980b36cdd" />
    <UnitTestResult executionId="94a63ade-81fd-49c3-af97-1f309a1d5905" testId="d8580ded-7e39-20ef-08bc-47cfb1e5e703" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" computerName="fv-az1057-923" duration="00:01:11.3802580" startTime="2025-06-21T12:04:34.8001043+00:00" endTime="2025-06-21T12:05:46.1099832+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94a63ade-81fd-49c3-af97-1f309a1d5905">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9aaec6c-3d2c-4f66-93de-2b590e729016" testId="07bbd722-0772-ca21-49c0-970e2badb486" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:04.1335780" startTime="2025-06-21T12:04:35.8914689+00:00" endTime="2025-06-21T12:05:39.4180952+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9aaec6c-3d2c-4f66-93de-2b590e729016">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="244b8434-1282-407a-ad6a-8fdbb3e8b721" testId="8f0c2dec-dea2-a0b9-3270-2764e2950034" testName="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" computerName="fv-az1057-923" duration="00:01:22.1441215" startTime="2025-06-21T12:04:35.0649855+00:00" endTime="2025-06-21T12:05:57.0028380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="244b8434-1282-407a-ad6a-8fdbb3e8b721" />
    <UnitTestResult executionId="d12ea6f2-2a2b-4f07-b9c8-5d5ef2cf97a7" testId="cc308633-3d62-d14c-1ee4-654f05b9dba8" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:05.4895463" startTime="2025-06-21T12:04:37.0341959+00:00" endTime="2025-06-21T12:05:41.1926572+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d12ea6f2-2a2b-4f07-b9c8-5d5ef2cf97a7">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.Is&lt;int&gt;(i =&gt; i % 2 == 0), It.Is&lt;int&gt;(j =&gt; j &lt; 100)));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="431f14e0-c667-49c6-8e88-a5b89e9647c6" testId="1b66b14f-6aa4-5a79-9057-28c9d23d95af" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" computerName="fv-az1057-923" duration="00:01:18.5608221" startTime="2025-06-21T12:04:36.4440593+00:00" endTime="2025-06-21T12:05:54.1679485+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="431f14e0-c667-49c6-8e88-a5b89e9647c6" />
    <UnitTestResult executionId="0f34149a-8624-44a0-8bcb-0e09b1272ff3" testId="655ca05a-8ae4-dfb2-3707-ed2692a54d75" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:17.3140554" startTime="2025-06-21T12:04:37.0289408+00:00" endTime="2025-06-21T12:05:53.0291962+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f34149a-8624-44a0-8bcb-0e09b1272ff3" />
    <UnitTestResult executionId="34c992e0-7b09-43c0-941c-51a647c29db4" testId="68d8efc3-b3d3-bfa0-7251-de5b2f6725e3" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:16.8700532" startTime="2025-06-21T12:04:34.6235381+00:00" endTime="2025-06-21T12:05:51.4490264+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34c992e0-7b09-43c0-941c-51a647c29db4" />
    <UnitTestResult executionId="7e02e0e3-f39e-4d70-8267-acc30bccc1d6" testId="194992c2-87c4-a802-1d25-3745046efc62" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:01:11.3524103" startTime="2025-06-21T12:04:36.4704617+00:00" endTime="2025-06-21T12:05:46.9243948+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e02e0e3-f39e-4d70-8267-acc30bccc1d6" />
    <UnitTestResult executionId="1632a4bd-7e58-412a-916a-98088500dc56" testId="1862c672-8f91-7e4d-b935-4969b7f31831" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.3644939" startTime="2025-06-21T12:04:36.0448502+00:00" endTime="2025-06-21T12:05:45.8039211+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1632a4bd-7e58-412a-916a-98088500dc56" />
    <UnitTestResult executionId="363dfd0a-190a-4018-a4df-daa6049476d3" testId="60fff66a-937d-c28b-19eb-e144f4c964b9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.9730543" startTime="2025-06-21T12:04:36.6151176+00:00" endTime="2025-06-21T12:05:51.6053279+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="363dfd0a-190a-4018-a4df-daa6049476d3" />
    <UnitTestResult executionId="197f6165-1f32-4b4e-bfa2-65c1f6560fab" testId="c208df3c-a06c-d3a8-3763-093f565d69c3" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:17.9830710" startTime="2025-06-21T12:04:36.8699710+00:00" endTime="2025-06-21T12:05:53.6622359+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="197f6165-1f32-4b4e-bfa2-65c1f6560fab">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1126fdf8-2e66-4242-91b5-7b4e110c2f8d" testId="a1878a49-0be7-d056-2556-a53e6ed0c5cb" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IIndexerInterface&gt;().Setup(x =&gt; x[0]);&quot;)" computerName="fv-az1057-923" duration="00:01:09.5160055" startTime="2025-06-21T12:04:37.0441470+00:00" endTime="2025-06-21T12:05:45.2309032+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1126fdf8-2e66-4242-91b5-7b4e110c2f8d">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IIndexerInterface&gt;().Setup(x =&gt; x[0]);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4db96de5-d679-4757-bf38-be3e5c5c1f99" testId="b7975642-cea0-bf2a-d0d9-d2b4c7142bdc" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:00:58.1947439" startTime="2025-06-21T12:04:36.3345151+00:00" endTime="2025-06-21T12:05:33.6876619+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4db96de5-d679-4757-bf38-be3e5c5c1f99" />
    <UnitTestResult executionId="abb141a8-7277-4bc9-a4a0-ce78bc4b84ea" testId="606aca6b-78f2-520e-9cbc-fb1f7c2f6b27" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldProduceDiagnosticsWhenNotSuppressed" computerName="fv-az1057-923" duration="00:01:14.1062897" startTime="2025-06-21T12:04:35.7279601+00:00" endTime="2025-06-21T12:05:49.3036131+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abb141a8-7277-4bc9-a4a0-ce78bc4b84ea" />
    <UnitTestResult executionId="7957f1a3-0619-4e53-b98e-08275dae23dd" testId="13ec5b1c-c5c6-3f0c-5569-76e0ec61674e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:01:19.1576941" startTime="2025-06-21T12:04:36.4276746+00:00" endTime="2025-06-21T12:05:54.7119838+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7957f1a3-0619-4e53-b98e-08275dae23dd" />
    <UnitTestResult executionId="74011d32-975a-4cbd-9aec-88da4e0f783b" testId="a84a7e1c-3df3-0faf-6518-d4df30ea888f" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" computerName="fv-az1057-923" duration="00:01:22.6288685" startTime="2025-06-21T12:04:35.2002274+00:00" endTime="2025-06-21T12:05:57.5949474+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74011d32-975a-4cbd-9aec-88da4e0f783b" />
    <UnitTestResult executionId="bc711550-7d1a-4857-ad45-c093d7a9a012" testId="f75df37b-431e-5ae9-1643-dd2e056de097" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:09.8281396" startTime="2025-06-21T12:04:35.8383162+00:00" endTime="2025-06-21T12:05:45.1374852+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc711550-7d1a-4857-ad45-c093d7a9a012">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8419c3d-9cae-4dec-8d96-df74ff7f7118" testId="92d2c55c-198d-0d74-5c9b-dde45de3c1a0" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" computerName="fv-az1057-923" duration="00:01:22.6895028" startTime="2025-06-21T12:04:35.2639583+00:00" endTime="2025-06-21T12:05:57.6703299+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8419c3d-9cae-4dec-8d96-df74ff7f7118" />
    <UnitTestResult executionId="956d78ea-7105-4340-8aec-35572febfe5c" testId="ab1072a1-b0ea-1679-9e3f-0b1dbda50c52" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:12.9293004" startTime="2025-06-21T12:04:36.6307108+00:00" endTime="2025-06-21T12:05:48.5619479+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="956d78ea-7105-4340-8aec-35572febfe5c">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new MockRepository(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b4800219-d61b-4bab-900a-7bc4f2c3c5e4" testId="17ab6ef3-409a-8d1c-29c3-f369ada273cb" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:10.6315920" startTime="2025-06-21T12:04:37.0534454+00:00" endTime="2025-06-21T12:05:46.3783871+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4800219-d61b-4bab-900a-7bc4f2c3c5e4">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c02b249-6846-4667-91e4-b13be3a91daf" testId="2331914b-afe4-d381-35da-c0138ba1ac3b" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:10.5468759" startTime="2025-06-21T12:04:35.3699906+00:00" endTime="2025-06-21T12:05:45.5608642+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c02b249-6846-4667-91e4-b13be3a91daf" />
    <UnitTestResult executionId="dfba6b29-2bb4-44eb-bca5-4e212155c0dc" testId="5cf69d1d-6b2d-7736-8e50-131649888972" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" computerName="fv-az1057-923" duration="00:01:19.6624767" startTime="2025-06-21T12:04:34.8561862+00:00" endTime="2025-06-21T12:05:54.4176567+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dfba6b29-2bb4-44eb-bca5-4e212155c0dc" />
    <UnitTestResult executionId="3c1a24be-0a3a-497b-99b9-accf164e9032" testId="8501d3ec-4167-5b8e-8549-0547e4e4afcc" testName="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_EmptyArray_ThrowsException" computerName="fv-az1057-923" duration="00:00:00.0003151" startTime="2025-06-21T12:04:35.0581001+00:00" endTime="2025-06-21T12:04:35.0584110+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c1a24be-0a3a-497b-99b9-accf164e9032" />
    <UnitTestResult executionId="89a09d91-3897-4a3b-81da-4f674b5b42e6" testId="f0f96a12-5525-0627-48c0-da5aa4fa9858" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" computerName="fv-az1057-923" duration="00:01:00.1060456" startTime="2025-06-21T12:04:35.1083807+00:00" endTime="2025-06-21T12:05:34.9961253+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89a09d91-3897-4a3b-81da-4f674b5b42e6" />
    <UnitTestResult executionId="0c830c34-f539-4259-b3ef-6f2e484d3b57" testId="aacff6c7-2fa6-09f6-e43b-a03e145b7a5f" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IExplicitInterface&gt;().Setup(x =&gt; ((IExpli&quot;···)" computerName="fv-az1057-923" duration="00:00:52.7241507" startTime="2025-06-21T12:04:37.0655545+00:00" endTime="2025-06-21T12:05:28.4538526+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c830c34-f539-4259-b3ef-6f2e484d3b57">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IExplicitInterface&gt;().Setup(x =&gt; ((IExplicitInterface)x).ExplicitMethod());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d00aa5d-3d8f-46a0-a0b6-48ab50bf4afc" testId="a650ac64-f726-b56c-026c-2d977dc44645" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new MockRepository(MockBehavior.Loose);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:00:58.9655440" startTime="2025-06-21T12:04:35.9518112+00:00" endTime="2025-06-21T12:05:34.3438826+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d00aa5d-3d8f-46a0-a0b6-48ab50bf4afc">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Loose);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6369f834-b692-432c-b5c7-6323a4686074" testId="2b444ba7-807d-10f9-3507-0f392580a248" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" computerName="fv-az1057-923" duration="00:01:08.4532268" startTime="2025-06-21T12:04:34.8603064+00:00" endTime="2025-06-21T12:05:43.2081537+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6369f834-b692-432c-b5c7-6323a4686074" />
    <UnitTestResult executionId="94192087-20ba-4ad7-b53a-c88225c51a03" testId="4f1ce5a5-2cde-ed7c-9e82-5c71b386a093" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.&quot;···)" computerName="fv-az1057-923" duration="00:01:02.9495407" startTime="2025-06-21T12:04:37.0501413+00:00" endTime="2025-06-21T12:05:38.6661477+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94192087-20ba-4ad7-b53a-c88225c51a03">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5af6d489-b38f-434f-b8ff-9f06bef9a76f" testId="22b19898-b21d-6105-6c06-a5b6ec0065e1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:00:58.6102867" startTime="2025-06-21T12:04:35.9768911+00:00" endTime="2025-06-21T12:05:33.9460951+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5af6d489-b38f-434f-b8ff-9f06bef9a76f" />
    <UnitTestResult executionId="6a0e0daa-f6e3-4a1d-b9da-df9fc27faa73" testId="0514debc-c616-2066-bb5e-66581f407587" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:20.4914477" startTime="2025-06-21T12:04:34.6677155+00:00" endTime="2025-06-21T12:05:55.1506439+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a0e0daa-f6e3-4a1d-b9da-df9fc27faa73" />
    <UnitTestResult executionId="f17e2690-db4c-4093-890a-78ce66c5b88a" testId="fd9eaf7b-a332-936f-8c03-a3143b66581f" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" computerName="fv-az1057-923" duration="00:01:14.2135239" startTime="2025-06-21T12:04:34.8548042+00:00" endTime="2025-06-21T12:05:48.9681416+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f17e2690-db4c-4093-890a-78ce66c5b88a" />
    <UnitTestResult executionId="8fc9f78f-2877-462e-8a01-ea7151135cbc" testId="4fe9fa88-94b3-1c3a-b35a-946b92e4f5c2" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:16.7410064" startTime="2025-06-21T12:04:36.3771557+00:00" endTime="2025-06-21T12:05:52.3289593+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fc9f78f-2877-462e-8a01-ea7151135cbc" />
    <UnitTestResult executionId="cc914c22-355c-465a-95a7-9c099b8b6d45" testId="5927cb7a-0333-198c-38f1-1cc0d7f90f3a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" computerName="fv-az1057-923" duration="00:01:04.2850440" startTime="2025-06-21T12:04:36.3388569+00:00" endTime="2025-06-21T12:05:39.7807025+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc914c22-355c-465a-95a7-9c099b8b6d45" />
    <UnitTestResult executionId="c22da795-f50a-413e-99d0-735393911d59" testId="91906b72-9217-f3d2-9c30-6dc33b380aff" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.7215298" startTime="2025-06-21T12:04:35.6935210+00:00" endTime="2025-06-21T12:05:48.9083519+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c22da795-f50a-413e-99d0-735393911d59" />
    <UnitTestResult executionId="12c13bac-384e-4003-9c2a-4c204d25c19e" testId="afdb48fb-3fea-4c74-c764-e1845b9b7633" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:07.3226648" startTime="2025-06-21T12:04:35.0417874+00:00" endTime="2025-06-21T12:05:42.1761609+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12c13bac-384e-4003-9c2a-4c204d25c19e" />
    <UnitTestResult executionId="22a24891-eb24-4feb-97b6-dc0f546b413d" testId="16018a80-3717-b374-a6f5-dc193d246435" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" computerName="fv-az1057-923" duration="00:00:08.2086450" startTime="2025-06-21T12:04:34.4312097+00:00" endTime="2025-06-21T12:04:42.6253351+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22a24891-eb24-4feb-97b6-dc0f546b413d">
      <Output>
        <StdOut>public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7cdc179-44ac-4032-997c-745d5283f1bd" testId="812240f4-e092-2057-ec20-a37ad736875a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:57.0907724" startTime="2025-06-21T12:04:36.0495243+00:00" endTime="2025-06-21T12:05:32.5041952+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7cdc179-44ac-4032-997c-745d5283f1bd" />
    <UnitTestResult executionId="4b76583a-5604-4085-8289-30f8e1bf5d53" testId="c4e836a5-165e-318a-02b6-be8df818f474" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.0593317" startTime="2025-06-21T12:04:34.6268042+00:00" endTime="2025-06-21T12:05:44.6692990+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b76583a-5604-4085-8289-30f8e1bf5d53" />
    <UnitTestResult executionId="4afdeb86-3434-4b11-8e44-dbc678734914" testId="f988ad87-4917-3edd-0322-741dfa68adbf" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:01:16.0694270" startTime="2025-06-21T12:04:36.6088628+00:00" endTime="2025-06-21T12:05:51.6740577+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4afdeb86-3434-4b11-8e44-dbc678734914" />
    <UnitTestResult executionId="0a635913-123d-4d71-8f2a-b11a283a9972" testId="36c76ccf-4e1a-b24d-5b6c-fdf93c19d34f" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.8820338" startTime="2025-06-21T12:04:35.4523534+00:00" endTime="2025-06-21T12:05:38.9655910+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a635913-123d-4d71-8f2a-b11a283a9972" />
    <UnitTestResult executionId="a8f3f4c5-a175-4af4-95aa-888c3691e537" testId="84b3a9f0-9236-3451-e4b3-f22664b2fd3f" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" computerName="fv-az1057-923" duration="00:01:22.4112238" startTime="2025-06-21T12:04:35.2106980+00:00" endTime="2025-06-21T12:05:57.3780909+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8f3f4c5-a175-4af4-95aa-888c3691e537" />
    <UnitTestResult executionId="a06dfcea-7197-42f0-a19b-d6a7014a191f" testId="df508473-adda-9053-f311-ac9fb8171143" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:00:52.9232837" startTime="2025-06-21T12:04:35.0859084+00:00" endTime="2025-06-21T12:05:27.7898479+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a06dfcea-7197-42f0-a19b-d6a7014a191f" />
    <UnitTestResult executionId="bf2d8d22-fb17-4dda-98d9-c27aeb1884f6" testId="0533875d-6218-8dde-0fb3-b39e309c901d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:17.5650195" startTime="2025-06-21T12:04:36.3762984+00:00" endTime="2025-06-21T12:05:53.0723000+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf2d8d22-fb17-4dda-98d9-c27aeb1884f6" />
    <UnitTestResult executionId="a749451d-8c13-4ad8-8954-f39f7d75b11b" testId="dd50e690-44ad-3311-b768-8963d681486c" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2111778" startTime="2025-06-21T12:04:34.8524328+00:00" endTime="2025-06-21T12:05:51.9979855+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a749451d-8c13-4ad8-8954-f39f7d75b11b" />
    <UnitTestResult executionId="a91f8647-5728-4d01-8a6a-4258a26625cf" testId="2fae4574-2457-172c-4718-c6a6b185459c" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:13.5677554" startTime="2025-06-21T12:04:36.7609965+00:00" endTime="2025-06-21T12:05:49.2506844+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a91f8647-5728-4d01-8a6a-4258a26625cf">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="af9e9b60-2bba-4bc8-bf8d-36bcb257fdcd" testId="7a4739c5-c17e-59fe-7366-e8e222a26964" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:02.3907130" startTime="2025-06-21T12:04:35.9004135+00:00" endTime="2025-06-21T12:05:37.6808862+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af9e9b60-2bba-4bc8-bf8d-36bcb257fdcd">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="50c09de3-03b0-4540-a93c-7c69d5a5cd0d" testId="b0eb0072-d1a8-c1c0-40ad-fa4d8b4ee66e" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:17.0508722" startTime="2025-06-21T12:04:34.6560804+00:00" endTime="2025-06-21T12:05:51.7066665+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50c09de3-03b0-4540-a93c-7c69d5a5cd0d" />
    <UnitTestResult executionId="a6c711ec-fbec-4a57-9840-911557351467" testId="17e4de40-597c-33e9-9d20-0cbf3384a751" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupAdd(x =&gt; x.TestEvent &quot;···)" computerName="fv-az1057-923" duration="00:01:08.0566828" startTime="2025-06-21T12:04:37.0349537+00:00" endTime="2025-06-21T12:05:43.7589883+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6c711ec-fbec-4a57-9840-911557351467">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().SetupAdd(x =&gt; x.TestEvent += It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04105fc1-d5d8-43fe-8c09-50772693d6a6" testId="242f48c6-1a5f-dda6-4eef-44ddf68ee2a0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.8473037" startTime="2025-06-21T12:04:36.6009835+00:00" endTime="2025-06-21T12:05:50.5376157+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04105fc1-d5d8-43fe-8c09-50772693d6a6" />
    <UnitTestResult executionId="c9cea92c-2ac4-4133-aab8-8fea1a8e352c" testId="c77bb93c-885f-84ac-ca92-25010599909a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:13.7018604" startTime="2025-06-21T12:04:35.6429824+00:00" endTime="2025-06-21T12:05:48.8196018+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9cea92c-2ac4-4133-aab8-8fea1a8e352c" />
    <UnitTestResult executionId="8ba96d4f-ce91-4cc5-9074-fdc3c8ae3fe4" testId="82f31cb3-17dd-0086-da80-1486ad49d487" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:13.8667602" startTime="2025-06-21T12:04:35.7242427+00:00" endTime="2025-06-21T12:05:49.0996734+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ba96d4f-ce91-4cc5-9074-fdc3c8ae3fe4" />
    <UnitTestResult executionId="c5e7bd67-1869-4f81-9c9e-c13905682d18" testId="521c0c90-839b-7300-1957-c8c11f94eed6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:15.9196382" startTime="2025-06-21T12:04:36.3994204+00:00" endTime="2025-06-21T12:05:51.5118674+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5e7bd67-1869-4f81-9c9e-c13905682d18" />
    <UnitTestResult executionId="75627977-041d-435a-9b8e-7d1a0b9237ee" testId="063fe473-ef17-c7cd-292e-473793547c66" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:11.0938996" startTime="2025-06-21T12:04:35.9109017+00:00" endTime="2025-06-21T12:05:46.3969771+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75627977-041d-435a-9b8e-7d1a0b9237ee">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8ea2d2cf-4f3a-4978-b5e1-c5f44e55e77d" testId="dfa12b1d-7789-34a7-a62f-c0acdd02b1d7" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:18.4877458" startTime="2025-06-21T12:04:34.6189663+00:00" endTime="2025-06-21T12:05:53.0766015+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ea2d2cf-4f3a-4978-b5e1-c5f44e55e77d" />
    <UnitTestResult executionId="f521923f-c1ed-4d2e-9ee1-fb893b45f480" testId="c0a320d4-669f-b5ab-19f0-d64a51f682f2" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1791877" startTime="2025-06-21T12:04:34.6275219+00:00" endTime="2025-06-21T12:05:52.7571316+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f521923f-c1ed-4d2e-9ee1-fb893b45f480" />
    <UnitTestResult executionId="fec40ae5-d9a5-4c44-a6c3-446778f1898e" testId="c17d2ae2-01c0-322e-f39b-5687ad1e5caf" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.8127372" startTime="2025-06-21T12:04:35.8426675+00:00" endTime="2025-06-21T12:05:37.0931136+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fec40ae5-d9a5-4c44-a6c3-446778f1898e">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7f0ddfab-ca66-44d2-80e6-80f6eed70b01" testId="150a65c2-00b8-87ed-7d73-69e2b3dc2efc" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.&quot;···)" computerName="fv-az1057-923" duration="00:01:18.0956898" startTime="2025-06-21T12:04:37.0450208+00:00" endTime="2025-06-21T12:05:53.8071164+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f0ddfab-ca66-44d2-80e6-80f6eed70b01">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="717664bc-2563-4880-b193-2825298b3241" testId="a8f78510-6137-dbec-5401-2aa19e507437" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.DoSomet&quot;···)" computerName="fv-az1057-923" duration="00:01:00.2460991" startTime="2025-06-21T12:04:37.0525946+00:00" endTime="2025-06-21T12:05:35.9912922+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="717664bc-2563-4880-b193-2825298b3241">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.DoSomethingValueTask());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dde7eb3a-05f0-4223-b49e-04e6b74f8324" testId="7478ed45-5a19-6ec5-7735-8eb45c89609b" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:03.8739580" startTime="2025-06-21T12:04:35.1669269+00:00" endTime="2025-06-21T12:05:38.8180605+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dde7eb3a-05f0-4223-b49e-04e6b74f8324" />
    <UnitTestResult executionId="65a6919b-885e-476a-8b06-e6e1938bb5c5" testId="a40d5647-4b85-37bc-638a-207cdaeb69d0" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:07.2503112" startTime="2025-06-21T12:04:37.0048278+00:00" endTime="2025-06-21T12:05:42.9460380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65a6919b-885e-476a-8b06-e6e1938bb5c5">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="62f64e79-6d2f-4ba3-8725-48764364afd2" testId="899dd003-1bfd-e224-24be-d7c2bda94f91" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:15.0518318" startTime="2025-06-21T12:04:36.7538478+00:00" endTime="2025-06-21T12:05:50.7987125+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62f64e79-6d2f-4ba3-8725-48764364afd2">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4cf59c20-d517-45a7-b78e-480f52d80cf2" testId="759d27e1-6976-5322-46f1-4e5bfed94822" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" computerName="fv-az1057-923" duration="00:01:14.3643527" startTime="2025-06-21T12:04:36.4744708+00:00" endTime="2025-06-21T12:05:49.9674736+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4cf59c20-d517-45a7-b78e-480f52d80cf2" />
    <UnitTestResult executionId="69243563-92c8-4e45-bf4d-bcf2add89e69" testId="96117b32-0bb5-be5a-143f-a15e67526e66" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:06.1585682" startTime="2025-06-21T12:04:34.9436460+00:00" endTime="2025-06-21T12:05:40.9760024+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="69243563-92c8-4e45-bf4d-bcf2add89e69" />
    <UnitTestResult executionId="b395d7c7-7c01-4300-b2f0-6529e1fc4242" testId="7918fed1-bdaf-4489-95cd-1e2b7c6c4c09" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.2092508" startTime="2025-06-21T12:04:34.5495601+00:00" endTime="2025-06-21T12:05:41.8250282+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b395d7c7-7c01-4300-b2f0-6529e1fc4242" />
    <UnitTestResult executionId="d3bb4b2b-4737-4373-a591-b3ee8e703628" testId="6963eea4-85ab-6cec-88cf-c082afb527d6" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:12.0969358" startTime="2025-06-21T12:04:35.8091984+00:00" endTime="2025-06-21T12:05:47.3486027+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3bb4b2b-4737-4373-a591-b3ee8e703628">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="202ce493-5ab1-458f-8b44-9bee4f947e5e" testId="87a7e748-94b1-4e9b-a97d-b58bd567453b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:01:02.9205721" startTime="2025-06-21T12:04:35.9720935+00:00" endTime="2025-06-21T12:05:38.2593705+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="202ce493-5ab1-458f-8b44-9bee4f947e5e" />
    <UnitTestResult executionId="2caa2989-37f0-4025-86b6-0a314afa8bb9" testId="b19d8299-9083-8a39-38b0-aa008a8ced53" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" computerName="fv-az1057-923" duration="00:01:18.5586238" startTime="2025-06-21T12:04:34.9661485+00:00" endTime="2025-06-21T12:05:53.3850433+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2caa2989-37f0-4025-86b6-0a314afa8bb9">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8010073-872b-44d0-ba33-1d6a8b82d33d" testId="c99f5a6f-9bde-c6e3-1894-b9ae5f230d49" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" computerName="fv-az1057-923" duration="00:01:12.2587239" startTime="2025-06-21T12:04:35.4285272+00:00" endTime="2025-06-21T12:05:47.3312304+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8010073-872b-44d0-ba33-1d6a8b82d33d" />
    <UnitTestResult executionId="b29b7749-7115-493b-b330-4a1907b79984" testId="e5cdd042-12ac-a14c-1162-7183fd8d28f3" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" computerName="fv-az1057-923" duration="00:00:52.5874279" startTime="2025-06-21T12:04:35.9351725+00:00" endTime="2025-06-21T12:05:27.8894885+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b29b7749-7115-493b-b330-4a1907b79984" />
    <UnitTestResult executionId="3cfe7ed1-3808-45d5-a0d6-8ecc532ca996" testId="8983fb77-9f55-d809-4155-a3082b59f7bd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:56.5238975" startTime="2025-06-21T12:04:36.3913671+00:00" endTime="2025-06-21T12:05:32.0571413+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cfe7ed1-3808-45d5-a0d6-8ecc532ca996" />
    <UnitTestResult executionId="3394fb38-34c4-441e-b866-30f0fb0d4691" testId="610374ef-1122-fcaf-70f5-1794f8e8353e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleVariousBuiltInSealedTypes" computerName="fv-az1057-923" duration="00:01:00.9870818" startTime="2025-06-21T12:04:35.1476917+00:00" endTime="2025-06-21T12:05:35.9272999+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3394fb38-34c4-441e-b866-30f0fb0d4691" />
    <UnitTestResult executionId="d932d383-a973-4d95-ba9a-a90f39dd8cfc" testId="3c2a1615-3cc8-1dac-031b-add21eac4860" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1846063" startTime="2025-06-21T12:04:34.6532289+00:00" endTime="2025-06-21T12:05:52.7878749+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d932d383-a973-4d95-ba9a-a90f39dd8cfc" />
    <UnitTestResult executionId="ee583331-977d-4f9e-b6eb-358b477d78b4" testId="fdcece57-9003-68ef-f695-6e9ee17f585b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2540860" startTime="2025-06-21T12:04:36.4806481+00:00" endTime="2025-06-21T12:05:52.8918692+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee583331-977d-4f9e-b6eb-358b477d78b4" />
    <UnitTestResult executionId="5dfaba9f-23f9-4086-a769-be43a224215d" testId="15600f89-daa0-8169-3c9a-b66c0bbba3b2" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:08.9541098" startTime="2025-06-21T12:04:35.8375186+00:00" endTime="2025-06-21T12:05:44.2209571+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5dfaba9f-23f9-4086-a769-be43a224215d" />
    <UnitTestResult executionId="a2ecd00a-a90c-454d-926a-5e42db173f13" testId="a25fe87c-52fa-1e10-48c6-8da95661c8df" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" computerName="fv-az1057-923" duration="00:01:07.5333539" startTime="2025-06-21T12:04:34.8661410+00:00" endTime="2025-06-21T12:05:42.2981003+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2ecd00a-a90c-454d-926a-5e42db173f13">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="86c01c17-c215-49a7-8142-0c27a669e1c6" testId="98a98465-2e2a-4289-12f2-17a4cc649802" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" computerName="fv-az1057-923" duration="00:01:03.8490896" startTime="2025-06-21T12:04:36.1677257+00:00" endTime="2025-06-21T12:05:39.3000158+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86c01c17-c215-49a7-8142-0c27a669e1c6" />
    <UnitTestResult executionId="7334f84e-8164-4c26-8186-5aecbd9fd2eb" testId="29b9f04c-3d2c-e7d2-c6bf-8dd894da511f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:51.0977932" startTime="2025-06-21T12:04:36.3395697+00:00" endTime="2025-06-21T12:05:26.6119828+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7334f84e-8164-4c26-8186-5aecbd9fd2eb" />
    <UnitTestResult executionId="87a9d789-21aa-446b-8f8a-ece9354cf0a7" testId="a5a27d47-cab3-61b8-1917-30a3e7d3872f" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" computerName="fv-az1057-923" duration="00:00:51.6058338" startTime="2025-06-21T12:04:35.0943218+00:00" endTime="2025-06-21T12:05:26.4893849+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87a9d789-21aa-446b-8f8a-ece9354cf0a7" />
    <UnitTestResult executionId="798e6f08-9765-446d-ac66-0a792436a9b1" testId="bb13dbc0-9768-938d-14e5-b7f42db24959" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:01:17.5609680" startTime="2025-06-21T12:04:36.3185214+00:00" endTime="2025-06-21T12:05:53.0671103+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="798e6f08-9765-446d-ac66-0a792436a9b1" />
    <UnitTestResult executionId="86639ec3-db2c-4933-99a1-635901732beb" testId="83847d44-2753-ea3d-f588-b3f956aa037b" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:14.4751233" startTime="2025-06-21T12:04:35.8119364+00:00" endTime="2025-06-21T12:05:49.7310493+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86639ec3-db2c-4933-99a1-635901732beb">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1be383d3-02f7-4de4-8d46-3e1adacb55f4" testId="f9baad39-ed40-1c95-664b-b42af8b4953b" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.7734553" startTime="2025-06-21T12:04:35.2602405+00:00" endTime="2025-06-21T12:05:48.7570971+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1be383d3-02f7-4de4-8d46-3e1adacb55f4" />
    <UnitTestResult executionId="347af8f9-f264-49a1-9bb7-37f1c4aa1731" testId="733cb1c0-533d-b31f-6978-668ef23d2200" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:55.0436961" startTime="2025-06-21T12:04:36.0667207+00:00" endTime="2025-06-21T12:05:30.4838687+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="347af8f9-f264-49a1-9bb7-37f1c4aa1731" />
    <UnitTestResult executionId="ef08d277-9884-42f3-b0ab-0d030694b66a" testId="f6e78a98-7cf9-b095-5c8a-928122eb287f" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:02.7470096" startTime="2025-06-21T12:04:35.4154235+00:00" endTime="2025-06-21T12:05:37.8669132+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef08d277-9884-42f3-b0ab-0d030694b66a" />
    <UnitTestResult executionId="2723723d-9b7d-4096-bf6b-73c89f81f5a3" testId="b541a45d-9cb1-5094-2d7d-88af65564e59" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.StringEvent += It.IsA&quot;···)" computerName="fv-az1057-923" duration="00:01:12.1385771" startTime="2025-06-21T12:04:34.6398861+00:00" endTime="2025-06-21T12:05:46.7261068+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2723723d-9b7d-4096-bf6b-73c89f81f5a3" />
    <UnitTestResult executionId="44edf9c3-85f8-4f8e-93ab-c459513e6956" testId="3a2cc97f-c20d-d4a3-580b-34db605a5e07" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new SealedClass();&quot;)" computerName="fv-az1057-923" duration="00:01:10.6500163" startTime="2025-06-21T12:04:35.3340345+00:00" endTime="2025-06-21T12:05:45.6459227+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44edf9c3-85f8-4f8e-93ab-c459513e6956" />
    <UnitTestResult executionId="d2d2c5a2-f700-4349-8ee5-4c217d81f726" testId="72668e72-fc62-2889-87a9-6c5783426c9a" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:04.8172558" startTime="2025-06-21T12:04:34.9506427+00:00" endTime="2025-06-21T12:05:39.6405314+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2d2c5a2-f700-4349-8ee5-4c217d81f726" />
    <UnitTestResult executionId="805107c6-e83b-40d0-a9c3-1fb4012e6164" testId="6d1acd69-14d4-3261-4d51-5ff1fdbba306" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupAdd(x&quot;···)" computerName="fv-az1057-923" duration="00:00:52.6631078" startTime="2025-06-21T12:04:35.9240533+00:00" endTime="2025-06-21T12:05:27.9676322+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="805107c6-e83b-40d0-a9c3-1fb4012e6164">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupAdd(x =&gt; x.TestEvent += It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da08f9df-78af-47a4-bda7-afa7c341e0aa" testId="f6f9a63a-1e58-1b4a-20cd-7f6856c737dc" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForVirtualMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:16.4815468" startTime="2025-06-21T12:04:34.6806609+00:00" endTime="2025-06-21T12:05:51.1654066+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da08f9df-78af-47a4-bda7-afa7c341e0aa" />
    <UnitTestResult executionId="af2c663d-e97f-4f49-9135-b234411ba27f" testId="f5869bef-9331-1494-60f7-6c8301bac361" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:09.8425837" startTime="2025-06-21T12:04:34.9921894+00:00" endTime="2025-06-21T12:05:44.6900397+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af2c663d-e97f-4f49-9135-b234411ba27f" />
    <UnitTestResult executionId="abedf0b4-8449-47ae-aa46-204558f2daee" testId="aa13eaf6-b3d2-3c99-a791-206e2203137d" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:01:07.8533068" startTime="2025-06-21T12:04:35.0948958+00:00" endTime="2025-06-21T12:05:42.7296729+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abedf0b4-8449-47ae-aa46-204558f2daee" />
    <UnitTestResult executionId="8865b3dd-884e-4711-bcbf-ef791c9af18c" testId="3a6e8518-17bc-6ae8-120a-cecfd0376ff9" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:14.2704238" startTime="2025-06-21T12:04:34.6051976+00:00" endTime="2025-06-21T12:05:48.8283479+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8865b3dd-884e-4711-bcbf-ef791c9af18c" />
    <UnitTestResult executionId="903098cd-1535-44ad-a496-0c34cf12e2fc" testId="ec062dfc-321d-6497-b076-8d80b2d217e7" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:01:05.3954398" startTime="2025-06-21T12:04:37.0083207+00:00" endTime="2025-06-21T12:05:41.1032967+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="903098cd-1535-44ad-a496-0c34cf12e2fc" />
    <UnitTestResult executionId="b8ca546e-d7f3-427c-b5d8-aa5714ce0ddc" testId="15e4a081-0194-297f-f267-cd79b5327388" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.DoSomet&quot;···)" computerName="fv-az1057-923" duration="00:01:05.2403579" startTime="2025-06-21T12:04:35.8604985+00:00" endTime="2025-06-21T12:05:40.5273888+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8ca546e-d7f3-427c-b5d8-aa5714ce0ddc">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.DoSomethingValueTask());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="460cd7d5-32e5-4766-adbf-1a0db6218ad0" testId="9b6aa232-0b8b-5cbb-0191-0cf613d6bd08" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" computerName="fv-az1057-923" duration="00:01:15.6594628" startTime="2025-06-21T12:04:36.4813281+00:00" endTime="2025-06-21T12:05:51.3288701+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="460cd7d5-32e5-4766-adbf-1a0db6218ad0" />
    <UnitTestResult executionId="34eaa64b-09e1-4e52-9cde-af3aa65b5053" testId="8a2aa2a6-6829-4e84-817f-455d337a4b67" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" computerName="fv-az1057-923" duration="00:01:03.7547162" startTime="2025-06-21T12:04:36.3452079+00:00" endTime="2025-06-21T12:05:39.2571720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34eaa64b-09e1-4e52-9cde-af3aa65b5053" />
    <UnitTestResult executionId="7abd64db-5dc9-41b6-aae1-95afdbf23d34" testId="da468cfe-4e8b-e49d-3ff3-dffe77f73f3b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:55.1368016" startTime="2025-06-21T12:04:36.0921529+00:00" endTime="2025-06-21T12:05:30.5662994+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7abd64db-5dc9-41b6-aae1-95afdbf23d34" />
    <UnitTestResult executionId="47bcfe0a-5452-46f3-b505-b33c09e91197" testId="512ff198-4421-dfa6-6484-dd58ceb28dde" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:53.4732906" startTime="2025-06-21T12:04:36.0988338+00:00" endTime="2025-06-21T12:05:28.9101408+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47bcfe0a-5452-46f3-b505-b33c09e91197" />
    <UnitTestResult executionId="0345e2cb-7583-448d-8954-220557655c56" testId="7bf36bf1-adce-1f61-9f13-39612921c26f" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:09.8568476" startTime="2025-06-21T12:04:34.9615824+00:00" endTime="2025-06-21T12:05:44.6800278+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0345e2cb-7583-448d-8954-220557655c56" />
    <UnitTestResult executionId="852dbc11-5bb9-41ca-aa89-fcab68d0f1da" testId="af814600-d603-4f5d-41ed-02c12a0801a6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:01:12.5202821" startTime="2025-06-21T12:04:35.9258862+00:00" endTime="2025-06-21T12:05:47.8479440+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="852dbc11-5bb9-41ca-aa89-fcab68d0f1da" />
    <UnitTestResult executionId="acb07154-a7cc-441a-84d5-971e6c2c6af4" testId="5e4863fe-9252-0cf0-55e9-20754ffe72a8" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:12.6155552" startTime="2025-06-21T12:04:35.4531162+00:00" endTime="2025-06-21T12:05:47.7218704+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="acb07154-a7cc-441a-84d5-971e6c2c6af4" />
    <UnitTestResult executionId="73f25764-918c-4651-8c41-45843885cd79" testId="044335f7-ccf6-4dbe-e4c9-dd5cee98e87d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:15.3484627" startTime="2025-06-21T12:04:35.6663917+00:00" endTime="2025-06-21T12:05:50.5778847+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73f25764-918c-4651-8c41-45843885cd79" />
    <UnitTestResult executionId="c5d13c4b-399d-4309-b75a-04dd7493686e" testId="c20982a2-a31a-ca6e-aa9f-262244a2292f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.1920529" startTime="2025-06-21T12:04:36.6016505+00:00" endTime="2025-06-21T12:05:38.8039289+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5d13c4b-399d-4309-b75a-04dd7493686e" />
    <UnitTestResult executionId="23d7f1dc-517d-4c3d-a07a-70f00722d191" testId="4070278e-56ba-2c59-d557-71bbd7e9eb40" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupRemov&quot;···)" computerName="fv-az1057-923" duration="00:01:00.6591973" startTime="2025-06-21T12:04:35.9312039+00:00" endTime="2025-06-21T12:05:35.9961448+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23d7f1dc-517d-4c3d-a07a-70f00722d191">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupRemove(x =&gt; x.TestEvent -= It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bb67cbd4-0f57-4852-91dd-cc0049a838a2" testId="996bbd72-2fc2-c5c4-baa7-a248176bcb3b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:14.5693168" startTime="2025-06-21T12:04:36.4105749+00:00" endTime="2025-06-21T12:05:50.1359147+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb67cbd4-0f57-4852-91dd-cc0049a838a2" />
    <UnitTestResult executionId="ff5d4227-be4a-4c5b-9835-6987f83f3d63" testId="3fc29aac-2d64-232e-236b-ae0adc0fd56e" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:06.3414818" startTime="2025-06-21T12:04:35.0440466+00:00" endTime="2025-06-21T12:05:41.2012435+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff5d4227-be4a-4c5b-9835-6987f83f3d63" />
    <UnitTestResult executionId="707b1bad-90d0-4950-a484-adf3beedce6c" testId="ed5441a3-2b44-6172-6cc4-b41691196e64" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:09.0088959" startTime="2025-06-21T12:04:35.8018360+00:00" endTime="2025-06-21T12:05:44.2820017+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="707b1bad-90d0-4950-a484-adf3beedce6c" />
    <UnitTestResult executionId="59fb4833-9802-4406-a800-e6e6096d6bac" testId="934805b1-b38d-1073-4ab2-dfb73ae589c4" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" computerName="fv-az1057-923" duration="00:01:06.4247738" startTime="2025-06-21T12:04:34.8805158+00:00" endTime="2025-06-21T12:05:41.1923284+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59fb4833-9802-4406-a800-e6e6096d6bac">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="025de8e6-7a6e-45b1-8b51-69a0ef05a5c1" testId="7067aaa8-d6f8-45b0-0ab0-39fb4ba424a5" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:19.7928471" startTime="2025-06-21T12:04:34.9828183+00:00" endTime="2025-06-21T12:05:54.6424393+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="025de8e6-7a6e-45b1-8b51-69a0ef05a5c1">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="708577c8-15e3-4ecb-99c2-ef20464b412f" testId="8d4d824c-5ea9-f09d-78c9-c31df08da8bc" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5831576" startTime="2025-06-21T12:04:36.7556838+00:00" endTime="2025-06-21T12:05:55.2571458+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="708577c8-15e3-4ecb-99c2-ef20464b412f">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a3e73bcd-24a3-4c16-9942-18710873e8d1" testId="3b12d6d1-d8af-12de-076d-70c1e48b3708" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:12.8741721" startTime="2025-06-21T12:04:35.4076586+00:00" endTime="2025-06-21T12:05:47.9351234+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3e73bcd-24a3-4c16-9942-18710873e8d1" />
    <UnitTestResult executionId="c5c6ff10-7119-4c79-9189-6ad2fd2afae5" testId="dc5c02ee-9c3e-feb9-4a04-0ec7d4037890" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true, M&quot;···)" computerName="fv-az1057-923" duration="00:00:59.8232795" startTime="2025-06-21T12:04:35.9741621+00:00" endTime="2025-06-21T12:05:35.1629723+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5c6ff10-7119-4c79-9189-6ad2fd2afae5" />
    <UnitTestResult executionId="e342e88e-57b9-418a-9902-f99ab8fe888b" testId="c3fa71d1-fe2b-2b3e-8951-e72720da868a" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" computerName="fv-az1057-923" duration="00:01:19.8689335" startTime="2025-06-21T12:04:34.6936501+00:00" endTime="2025-06-21T12:05:54.5758651+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e342e88e-57b9-418a-9902-f99ab8fe888b">
      <Output>
        <StdOut>Original:


public class MyClass
{
    public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:


public class MyClass
{
    public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56d223b0-11dc-42ef-8d91-53d93539cbf3" testId="61732d76-971e-f3ae-cb56-2c520f1add44" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:09.3706674" startTime="2025-06-21T12:04:35.0339948+00:00" endTime="2025-06-21T12:05:44.2203785+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56d223b0-11dc-42ef-8d91-53d93539cbf3">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws(new ArgumentException());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d7ad835-5e8d-4f44-9feb-6ab90677e4aa" testId="47131d00-d047-d99e-b755-9c87e2486502" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" computerName="fv-az1057-923" duration="00:01:13.3298846" startTime="2025-06-21T12:04:34.6538928+00:00" endTime="2025-06-21T12:05:47.9809575+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d7ad835-5e8d-4f44-9feb-6ab90677e4aa" />
    <UnitTestResult executionId="7a519d32-605f-4686-ac62-7cd320bb432d" testId="243530d0-146c-c89f-0fd0-612f6c13a9cc" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:01:18.0050074" startTime="2025-06-21T12:04:35.4191462+00:00" endTime="2025-06-21T12:05:53.0790034+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a519d32-605f-4686-ac62-7cd320bb432d" />
    <UnitTestResult executionId="2246f57a-1705-4948-897a-6852d2fd5145" testId="eaf13974-cd79-25d1-0272-3c52d906a5a5" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:05.6233284" startTime="2025-06-21T12:04:34.6091300+00:00" endTime="2025-06-21T12:05:40.2181245+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2246f57a-1705-4948-897a-6852d2fd5145" />
    <UnitTestResult executionId="8ab98a12-60d7-4e25-993d-38e3a0b1d0f2" testId="3995284d-076a-a673-1f54-7b50e8f2b53e" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:05.2100285" startTime="2025-06-21T12:04:36.6394911+00:00" endTime="2025-06-21T12:05:40.8229218+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ab98a12-60d7-4e25-993d-38e3a0b1d0f2">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d998b48-7015-41ca-8993-947582bf4057" testId="797719d9-06fa-fe2a-13d2-71efcf28e428" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate&quot;···)" computerName="fv-az1057-923" duration="00:01:08.4956412" startTime="2025-06-21T12:04:35.8194884+00:00" endTime="2025-06-21T12:05:43.7568152+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d998b48-7015-41ca-8993-947582bf4057">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd2b5433-43bf-4121-9bee-e33cdebefce8" testId="94a2244e-0d93-7a16-40c4-6c97edda2257" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:10.7453175" startTime="2025-06-21T12:04:35.3672335+00:00" endTime="2025-06-21T12:05:45.7490179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd2b5433-43bf-4121-9bee-e33cdebefce8" />
    <UnitTestResult executionId="a80a0557-f927-49d3-8f73-514997a1b3fd" testId="15dd13fb-232d-11e4-b4c8-b1997b13a31e" testName="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditTypeKeyMissing" computerName="fv-az1057-923" duration="00:00:00.0001126" startTime="2025-06-21T12:04:34.8198228+00:00" endTime="2025-06-21T12:04:34.8201345+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a80a0557-f927-49d3-8f73-514997a1b3fd" />
    <UnitTestResult executionId="959ea0c0-c1aa-4020-96d9-58e80d9bb2c7" testId="08a7c46d-156f-d5ba-aadc-e8633cc4cda4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" computerName="fv-az1057-923" duration="00:00:51.9309152" startTime="2025-06-21T12:04:35.9852726+00:00" endTime="2025-06-21T12:05:27.3010479+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="959ea0c0-c1aa-4020-96d9-58e80d9bb2c7" />
    <UnitTestResult executionId="806d2d00-299f-4c91-99d9-07fccab2fa53" testId="b5c71270-fc4f-d076-831e-f732c4a47222" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" computerName="fv-az1057-923" duration="00:01:18.3758893" startTime="2025-06-21T12:04:36.4826372+00:00" endTime="2025-06-21T12:05:53.9544950+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="806d2d00-299f-4c91-99d9-07fccab2fa53" />
    <UnitTestResult executionId="0c68e9e2-0926-44a4-9988-11056d2cd659" testId="e4a20c47-8115-5cd8-7dc1-5493456a14f7" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:15.4570186" startTime="2025-06-21T12:04:35.7260370+00:00" endTime="2025-06-21T12:05:50.6630916+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c68e9e2-0926-44a4-9988-11056d2cd659" />
    <UnitTestResult executionId="5889bbb8-18eb-449d-a9f6-e409c4d9002b" testId="8979d306-8d3a-1ea3-9f81-bb2c3b0ede3b" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:12.6738311" startTime="2025-06-21T12:04:35.6928408+00:00" endTime="2025-06-21T12:05:47.8486501+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5889bbb8-18eb-449d-a9f6-e409c4d9002b" />
    <UnitTestResult executionId="83b26a91-cc9c-4e70-a538-5421e29c4feb" testId="cbf2ace6-2e4f-a569-e0f9-89873457659a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:01:11.0823139" startTime="2025-06-21T12:04:35.9636476+00:00" endTime="2025-06-21T12:05:46.3960803+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="83b26a91-cc9c-4e70-a538-5421e29c4feb" />
    <UnitTestResult executionId="94562fdb-a97e-4e97-9176-bb63b89d5e24" testId="5ec50f6b-d832-169e-e9e9-d1443900b6f3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.5750563" startTime="2025-06-21T12:04:36.3730533+00:00" endTime="2025-06-21T12:05:50.1117552+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94562fdb-a97e-4e97-9176-bb63b89d5e24" />
    <UnitTestResult executionId="f8d143c9-9b51-482a-b202-5b2b66817c98" testId="66027c81-a5a9-3cd3-8e98-bd24862efd4a" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:19.2896626" startTime="2025-06-21T12:04:34.9646162+00:00" endTime="2025-06-21T12:05:54.1783709+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8d143c9-9b51-482a-b202-5b2b66817c98">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9bccd81b-f2db-40e5-b71c-d0e0c79a967c" testId="eedba9d4-13c8-dcd6-e7ec-d14516b826d8" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:10.4301160" startTime="2025-06-21T12:04:36.8456684+00:00" endTime="2025-06-21T12:05:46.1388393+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9bccd81b-f2db-40e5-b71c-d0e0c79a967c">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df2bab4c-40c4-4b07-bbe9-04b2b585b0a8" testId="28d6222e-a603-7aa4-36a1-971f5ff1229b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:01:19.2512404" startTime="2025-06-21T12:04:36.5061717+00:00" endTime="2025-06-21T12:05:54.8470950+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df2bab4c-40c4-4b07-bbe9-04b2b585b0a8" />
    <UnitTestResult executionId="48fa3aed-ebba-4f80-8d2e-a6ed722ea983" testId="50526835-f3af-7d07-e0c3-0e3124fb33b4" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.4148160" startTime="2025-06-21T12:04:34.5474019+00:00" endTime="2025-06-21T12:05:41.9702935+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48fa3aed-ebba-4f80-8d2e-a6ed722ea983" />
    <UnitTestResult executionId="ea059da7-314d-4aee-a06d-2c3e6ca67d54" testId="ee66e994-88c8-1cd1-588c-e26b99d70fa7" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.0859577" startTime="2025-06-21T12:04:35.6416514+00:00" endTime="2025-06-21T12:05:50.2094292+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea059da7-314d-4aee-a06d-2c3e6ca67d54" />
    <UnitTestResult executionId="480698ca-2287-4d37-b2e5-190a03e99b1a" testId="0c4f3764-f1f2-2068-908a-5d7f98b28c8b" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.3433119" startTime="2025-06-21T12:04:35.2032477+00:00" endTime="2025-06-21T12:05:43.3100678+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="480698ca-2287-4d37-b2e5-190a03e99b1a" />
    <UnitTestResult executionId="a48fbf66-29db-446f-8527-4384583dc116" testId="24733208-9b4e-71b8-2dce-918de84e5d92" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:55.1629079" startTime="2025-06-21T12:04:36.0659323+00:00" endTime="2025-06-21T12:05:30.5878895+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a48fbf66-29db-446f-8527-4384583dc116" />
    <UnitTestResult executionId="287d33e3-68b0-40b3-8a39-496f02563a53" testId="9637a5ff-5e5b-22e2-e219-4ed6b142cb0e" testName="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_LastElement_RemovesCorrectly" computerName="fv-az1057-923" duration="00:00:00.0001375" startTime="2025-06-21T12:04:35.0566707+00:00" endTime="2025-06-21T12:04:35.0570103+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="287d33e3-68b0-40b3-8a39-496f02563a53" />
    <UnitTestResult executionId="52caa2d7-f91d-4d06-a27d-9b0092f0a43d" testId="44400f38-a2cc-1589-1518-806a85a87731" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:01:03.7204877" startTime="2025-06-21T12:04:35.1065210+00:00" endTime="2025-06-21T12:05:38.6295735+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52caa2d7-f91d-4d06-a27d-9b0092f0a43d" />
    <UnitTestResult executionId="6938b243-c5be-49f5-b0ea-9e3075ad1c28" testId="21f40236-8846-0651-f72a-53dbdb3e6157" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" computerName="fv-az1057-923" duration="00:01:17.3439734" startTime="2025-06-21T12:04:34.8509576+00:00" endTime="2025-06-21T12:05:52.1142678+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6938b243-c5be-49f5-b0ea-9e3075ad1c28">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="28ce74a3-fb57-4b61-b45e-bab5c31944ee" testId="08102230-f5d9-dd0f-1c6c-c5fc88e60157" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:00:56.8286740" startTime="2025-06-21T12:04:36.9870820+00:00" endTime="2025-06-21T12:05:32.5133559+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28ce74a3-fb57-4b61-b45e-bab5c31944ee">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="53b1c6b9-b564-4718-bec2-4630cac15d26" testId="5ccfa7ad-6283-f63a-8d2f-bee38d894688" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.8976436" startTime="2025-06-21T12:04:35.3726208+00:00" endTime="2025-06-21T12:05:45.9107269+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53b1c6b9-b564-4718-bec2-4630cac15d26" />
    <UnitTestResult executionId="7c63d152-2502-4a9a-9c58-1acb5639b8d7" testId="86e608cc-05c7-e7f5-6a44-fba699d72b14" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" computerName="fv-az1057-923" duration="00:00:54.1776137" startTime="2025-06-21T12:04:35.0702381+00:00" endTime="2025-06-21T12:05:29.0529300+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c63d152-2502-4a9a-9c58-1acb5639b8d7" />
    <UnitTestResult executionId="3299be70-67f9-47d5-b015-97e08c97244b" testId="49aa63a4-01f5-1225-a31c-0199404cb376" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" computerName="fv-az1057-923" duration="00:00:59.5502845" startTime="2025-06-21T12:04:36.0202540+00:00" endTime="2025-06-21T12:05:34.9432580+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3299be70-67f9-47d5-b015-97e08c97244b" />
    <UnitTestResult executionId="574e2d86-5ee0-4eb0-8bfd-254c385e400b" testId="040d93db-8cad-94da-f49b-ad5e5b88428d" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomEvent += It.IsA&quot;···)" computerName="fv-az1057-923" duration="00:01:20.4229867" startTime="2025-06-21T12:04:34.6462471+00:00" endTime="2025-06-21T12:05:55.0043857+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="574e2d86-5ee0-4eb0-8bfd-254c385e400b" />
    <UnitTestResult executionId="1e4d9781-e3e1-4f25-83bd-f8786b1697e4" testId="036ccef3-040e-eef8-14e5-37e9e043c709" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:11.5913223" startTime="2025-06-21T12:04:34.9653488+00:00" endTime="2025-06-21T12:05:46.4116142+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e4d9781-e3e1-4f25-83bd-f8786b1697e4">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ae108a3-71bf-4175-bb0a-06b3e38a4e50" testId="ae3f61b9-7466-23e1-34d3-fcdc76d9d293" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IExplicitInterface&gt;().Setup(x =&gt; ((IExpli&quot;···)" computerName="fv-az1057-923" duration="00:01:12.1011708" startTime="2025-06-21T12:04:37.0414435+00:00" endTime="2025-06-21T12:05:47.8066011+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ae108a3-71bf-4175-bb0a-06b3e38a4e50">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IExplicitInterface&gt;().Setup(x =&gt; ((IExplicitInterface)x).ExplicitMethod());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67f8b02a-ae78-460d-92b0-60f5cc26eebe" testId="a47c7930-40af-b73a-7353-569682b70ec7" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:08.9683055" startTime="2025-06-21T12:04:34.9820892+00:00" endTime="2025-06-21T12:05:43.8001916+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67f8b02a-ae78-460d-92b0-60f5cc26eebe" />
    <UnitTestResult executionId="c58ba8da-f463-4b4e-9869-b89e6a660de6" testId="68ee19e7-b45c-e5d9-3a61-3a23dfdc2902" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.8488640" startTime="2025-06-21T12:04:35.5698334+00:00" endTime="2025-06-21T12:05:54.9630461+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c58ba8da-f463-4b4e-9869-b89e6a660de6" />
    <UnitTestResult executionId="a96c59be-4d55-4297-a273-ece74f17399e" testId="1a3e159f-fbd3-7c7a-7995-3562f823fe92" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:08.7472920" startTime="2025-06-21T12:04:35.9092279+00:00" endTime="2025-06-21T12:05:44.0403108+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a96c59be-4d55-4297-a273-ece74f17399e">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="471da1e9-3890-477b-ba05-b5b93bff0937" testId="81e563b9-9021-e8f1-1496-4e34becc5ac4" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.1198988" startTime="2025-06-21T12:04:35.4404176+00:00" endTime="2025-06-21T12:05:51.1965790+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="471da1e9-3890-477b-ba05-b5b93bff0937" />
    <UnitTestResult executionId="ad8ee0d4-709e-40c2-b0c6-3dc17a3a252b" testId="32a22e65-aea9-01f0-9ca6-56f0a14c4c3f" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:08.0722466" startTime="2025-06-21T12:04:35.8167328+00:00" endTime="2025-06-21T12:05:43.3300365+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad8ee0d4-709e-40c2-b0c6-3dc17a3a252b" />
    <UnitTestResult executionId="42ce3540-a12e-460f-92e7-25edb20dbb6e" testId="b40cc9e2-a2ee-98d8-d3d5-d1354af96000" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" computerName="fv-az1057-923" duration="00:01:15.4972634" startTime="2025-06-21T12:04:35.8367568+00:00" endTime="2025-06-21T12:05:50.8380523+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42ce3540-a12e-460f-92e7-25edb20dbb6e" />
    <UnitTestResult executionId="cda4e615-b1d6-46bd-b6b2-1b9a590c86c0" testId="c67a6e74-296d-29ee-0dca-b48efd4c2222" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:04.3795322" startTime="2025-06-21T12:04:37.0150159+00:00" endTime="2025-06-21T12:05:40.0915193+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cda4e615-b1d6-46bd-b6b2-1b9a590c86c0" />
    <UnitTestResult executionId="bafe8054-61ae-4967-8b4f-c2c8faa6d186" testId="b7fd7b8e-8898-53be-4e7d-f03d0583e142" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8206569" startTime="2025-06-21T12:04:34.6129278+00:00" endTime="2025-06-21T12:05:54.4169533+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bafe8054-61ae-4967-8b4f-c2c8faa6d186" />
    <UnitTestResult executionId="f4ebff6b-fd5a-43a8-b3a7-19b1b2c46efa" testId="46d4dfff-9f57-563f-bbf2-8653800d4bdf" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7699787" startTime="2025-06-21T12:04:36.3753553+00:00" endTime="2025-06-21T12:05:55.3210730+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4ebff6b-fd5a-43a8-b3a7-19b1b2c46efa" />
    <UnitTestResult executionId="12d818cc-84bc-4019-887c-a1dbc045782b" testId="fce80ac2-d844-dc5d-bd1e-812df08525c0" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" computerName="fv-az1057-923" duration="00:01:19.1469936" startTime="2025-06-21T12:04:35.3836988+00:00" endTime="2025-06-21T12:05:54.2330165+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12d818cc-84bc-4019-887c-a1dbc045782b" />
    <UnitTestResult executionId="97e59bda-703c-46be-b669-f5950e8b8b59" testId="1000a059-d92a-607d-e7d0-1a682556e8ed" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupRemove(x =&gt; x.StringEvent -= It.&quot;···)" computerName="fv-az1057-923" duration="00:01:04.9156806" startTime="2025-06-21T12:04:34.6414125+00:00" endTime="2025-06-21T12:05:39.5451473+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97e59bda-703c-46be-b669-f5950e8b8b59" />
    <UnitTestResult executionId="1564a715-e064-47a7-8907-86378b7b499d" testId="7cee6fe2-75f9-808e-7d16-39f7c1bf580e" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsNull" computerName="fv-az1057-923" duration="00:00:00.0000891" startTime="2025-06-21T12:04:36.6483890+00:00" endTime="2025-06-21T12:04:36.6487033+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1564a715-e064-47a7-8907-86378b7b499d" />
    <UnitTestResult executionId="9f86f203-0338-4a9a-a829-355797edc695" testId="d3d4e8ae-8260-c72e-8825-1fc4b742c82c" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:01:12.4432525" startTime="2025-06-21T12:04:35.7991836+00:00" endTime="2025-06-21T12:05:47.7274933+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f86f203-0338-4a9a-a829-355797edc695" />
    <UnitTestResult executionId="d4d98bce-2478-42a9-a5a1-98d560939783" testId="b4995f7b-2251-2083-a3a1-fb61eaf02590" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" computerName="fv-az1057-923" duration="00:01:18.8668057" startTime="2025-06-21T12:04:34.9735543+00:00" endTime="2025-06-21T12:05:53.7245261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4d98bce-2478-42a9-a5a1-98d560939783">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test"))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bbaa2504-cc82-41b3-885e-9722b12d2243" testId="618df55a-34e0-e72d-09c7-3904ac675830" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" computerName="fv-az1057-923" duration="00:01:17.2738156" startTime="2025-06-21T12:04:35.4263361+00:00" endTime="2025-06-21T12:05:52.3439252+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bbaa2504-cc82-41b3-885e-9722b12d2243" />
    <UnitTestResult executionId="5cf5051c-0663-45cb-b6b0-2c2e0725c69a" testId="aa2d1a39-7bc5-69c3-03dd-bc258810475a" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:11.3315460" startTime="2025-06-21T12:04:35.4215281+00:00" endTime="2025-06-21T12:05:46.3984953+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5cf5051c-0663-45cb-b6b0-2c2e0725c69a" />
    <UnitTestResult executionId="16824a43-3918-412f-9ebe-444b6ff3730c" testId="82aca4de-db00-0f05-0677-f236c2fbf3a9" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" computerName="fv-az1057-923" duration="00:01:17.3861467" startTime="2025-06-21T12:04:34.6825457+00:00" endTime="2025-06-21T12:05:52.0932333+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16824a43-3918-412f-9ebe-444b6ff3730c">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal virtual string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="621813a1-2ac2-40b9-b18a-96e2b1e299b5" testId="6e56e7bb-c7f7-557a-4af5-065d6d406887" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.1477107" startTime="2025-06-21T12:04:35.6554454+00:00" endTime="2025-06-21T12:05:49.2872722+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="621813a1-2ac2-40b9-b18a-96e2b1e299b5" />
    <UnitTestResult executionId="37ec29e6-00d3-48f4-bddf-76e7201f631e" testId="fe51042f-4b4d-ec97-b4f4-ea15d7c335c4" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" computerName="fv-az1057-923" duration="00:01:06.8508071" startTime="2025-06-21T12:04:35.0018105+00:00" endTime="2025-06-21T12:05:41.6941159+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37ec29e6-00d3-48f4-bddf-76e7201f631e">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c8791c7-e776-4cc8-af71-ff6fbcddc571" testId="7d4c1da7-034e-ee03-c92b-6ae640ef8c7e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:01:04.4694692" startTime="2025-06-21T12:04:35.1603822+00:00" endTime="2025-06-21T12:05:39.4155580+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c8791c7-e776-4cc8-af71-ff6fbcddc571" />
    <UnitTestResult executionId="bd305354-d7c2-4af3-9950-36ec9ab2ac26" testId="497c0baa-8082-fc86-06c1-ea3b85b951c8" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" computerName="fv-az1057-923" duration="00:01:22.5651225" startTime="2025-06-21T12:04:35.2034009+00:00" endTime="2025-06-21T12:05:57.5258778+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd305354-d7c2-4af3-9950-36ec9ab2ac26" />
    <UnitTestResult executionId="23ef715f-8dfd-4c5d-91d8-d78df88fba78" testId="94ab8bca-607c-17fa-a5d7-20b6b82da8cf" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" computerName="fv-az1057-923" duration="00:01:01.7114096" startTime="2025-06-21T12:04:36.0124351+00:00" endTime="2025-06-21T12:05:37.0937892+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23ef715f-8dfd-4c5d-91d8-d78df88fba78" />
    <UnitTestResult executionId="e264bea3-0204-47d0-b803-474571533a45" testId="f5c01d17-e31a-08cf-332e-d2093756a879" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:00:53.8963849" startTime="2025-06-21T12:04:35.1662564+00:00" endTime="2025-06-21T12:05:28.8429455+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e264bea3-0204-47d0-b803-474571533a45" />
    <UnitTestResult executionId="41a4b95f-00f8-4246-b21f-d402f61b4e2d" testId="775e62d6-5a2b-6bbe-7bcb-d3cc4bcf342e" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" computerName="fv-az1057-923" duration="00:01:08.4338967" startTime="2025-06-21T12:04:34.9371260+00:00" endTime="2025-06-21T12:05:43.2386064+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41a4b95f-00f8-4246-b21f-d402f61b4e2d">
      <Output>
        <StdOut>Original:


public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}

Fixed:


public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="47a17a8c-953c-458c-b02d-322d37217d09" testId="0c465004-23ec-bb83-00e1-406ea693bbd6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:18.7026100" startTime="2025-06-21T12:04:36.5811724+00:00" endTime="2025-06-21T12:05:54.3358930+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47a17a8c-953c-458c-b02d-322d37217d09" />
    <UnitTestResult executionId="41dc391e-41df-4c55-ba2a-9b37a8a966ba" testId="930013f6-6feb-ee30-c736-6987277d9cd3" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:15.1307469" startTime="2025-06-21T12:04:36.7698705+00:00" endTime="2025-06-21T12:05:50.8328962+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41dc391e-41df-4c55-ba2a-9b37a8a966ba">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0e0b9e92-88d0-41c2-8dff-24b181a1140f" testId="80418597-4e81-60bd-4646-4a9b7643c63f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.1293725" startTime="2025-06-21T12:04:36.6002775+00:00" endTime="2025-06-21T12:05:47.7651784+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e0b9e92-88d0-41c2-8dff-24b181a1140f" />
    <UnitTestResult executionId="18a6a5f4-c82b-4e06-9d8a-13201b4c9c24" testId="f9d4b76b-7d45-81a3-f33c-91314ba6e7d7" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:00.4915801" startTime="2025-06-21T12:04:35.9123739+00:00" endTime="2025-06-21T12:05:35.7926332+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18a6a5f4-c82b-4e06-9d8a-13201b4c9c24" />
    <UnitTestResult executionId="831ceb4a-22a1-4539-b18e-355fa584f7b5" testId="84f97ef6-79f1-faad-7862-98990e4f9b3e" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" computerName="fv-az1057-923" duration="00:01:07.7773953" startTime="2025-06-21T12:04:34.8517156+00:00" endTime="2025-06-21T12:05:42.5340506+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="831ceb4a-22a1-4539-b18e-355fa584f7b5" />
    <UnitTestResult executionId="1bcab23a-4666-4d89-8ae5-acc7a5061315" testId="d13a68da-ee97-e194-e8f8-9d3029c353be" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:13.2799086" startTime="2025-06-21T12:04:35.6526435+00:00" endTime="2025-06-21T12:05:48.4000514+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1bcab23a-4666-4d89-8ae5-acc7a5061315" />
    <UnitTestResult executionId="e7d8940a-79f4-4214-8f3e-b5fd0bba16d7" testId="8ed8c19a-3679-16c4-bd73-78626a7450ee" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:16.7089836" startTime="2025-06-21T12:04:35.7816503+00:00" endTime="2025-06-21T12:05:51.9400910+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7d8940a-79f4-4214-8f3e-b5fd0bba16d7" />
    <UnitTestResult executionId="9051c0ed-13ab-4f15-bdda-4d79a04b1d49" testId="fb5a5f4c-445f-9046-1e69-13d7573f665f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:50.6458425" startTime="2025-06-21T12:04:36.1978781+00:00" endTime="2025-06-21T12:05:26.0997518+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9051c0ed-13ab-4f15-bdda-4d79a04b1d49" />
    <UnitTestResult executionId="d11bf5e0-0a8f-4af6-92e1-82a1a4d63641" testId="0148e2db-f8d0-3cb6-5dec-d71f688dabd8" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:10.8802347" startTime="2025-06-21T12:04:35.4162384+00:00" endTime="2025-06-21T12:05:45.9905592+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d11bf5e0-0a8f-4af6-92e1-82a1a4d63641" />
    <UnitTestResult executionId="abfe4650-1982-498b-862b-65ecdcb4fe96" testId="9d9d7863-0731-411a-6d5c-6f0cec225a9d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:17.4319967" startTime="2025-06-21T12:04:36.3941159+00:00" endTime="2025-06-21T12:05:52.9522186+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abfe4650-1982-498b-862b-65ecdcb4fe96" />
    <UnitTestResult executionId="869d9192-04a1-45a6-98f7-3103f83aee8a" testId="c8004cce-f5de-b34c-61cc-9028bc60c32b" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:16.9988137" startTime="2025-06-21T12:04:35.8583244+00:00" endTime="2025-06-21T12:05:52.3309142+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="869d9192-04a1-45a6-98f7-3103f83aee8a">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0de3870-219c-4319-9ba4-f9c5698181c4" testId="2be8f8f7-8957-784b-18fb-ee11f5ee0395" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:13.7424810" startTime="2025-06-21T12:04:35.7761631+00:00" endTime="2025-06-21T12:05:48.9930070+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0de3870-219c-4319-9ba4-f9c5698181c4" />
    <UnitTestResult executionId="a36b90fc-0a26-42a4-ae3d-e7a7fefcf3a5" testId="deda012f-6b0e-0756-54d2-3a60970e92bd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.0224326" startTime="2025-06-21T12:04:35.9068318+00:00" endTime="2025-06-21T12:05:38.3179130+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a36b90fc-0a26-42a4-ae3d-e7a7fefcf3a5" />
    <UnitTestResult executionId="a6fe7974-effb-4a69-a24f-877e39510089" testId="79f3e3ed-759b-1209-1d85-02c4f6548606" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.6757504" startTime="2025-06-21T12:04:36.6031258+00:00" endTime="2025-06-21T12:05:52.3870635+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6fe7974-effb-4a69-a24f-877e39510089" />
    <UnitTestResult executionId="48c64972-82fb-4fff-8705-d8d2bcdeb7e7" testId="b2cafd04-dbbb-aa4b-16d8-599f3cd6c2ab" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:11.2872590" startTime="2025-06-21T12:04:36.3947409+00:00" endTime="2025-06-21T12:05:46.8502593+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="48c64972-82fb-4fff-8705-d8d2bcdeb7e7" />
    <UnitTestResult executionId="087222a9-76a1-42ea-9ac8-bc58bd2a2868" testId="1b154159-e5b9-06e6-f7e9-33b39bf21bd0" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" computerName="fv-az1057-923" duration="00:01:06.2236934" startTime="2025-06-21T12:04:34.8338101+00:00" endTime="2025-06-21T12:05:41.0046122+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="087222a9-76a1-42ea-9ac8-bc58bd2a2868">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexer&gt;().Verify(x =&gt; x[0])|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c910f79-0129-4660-bc4a-373af4510ebf" testId="d7db2dbb-4f46-ad50-1386-97abb1f1d487" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.5706136" startTime="2025-06-21T12:04:36.5317455+00:00" endTime="2025-06-21T12:05:55.2030614+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c910f79-0129-4660-bc4a-373af4510ebf" />
    <UnitTestResult executionId="7eccb73d-0245-40fc-b459-57e80882889d" testId="413e882f-5f73-1a57-373e-d30702772893" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:16.5064040" startTime="2025-06-21T12:04:35.7270951+00:00" endTime="2025-06-21T12:05:51.7072668+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7eccb73d-0245-40fc-b459-57e80882889d" />
    <UnitTestResult executionId="fde84581-1223-433b-8bd2-c0d6de1e997a" testId="10613081-8054-ecae-ed47-83cf6ed30748" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:01:16.8976259" startTime="2025-06-21T12:04:37.0181504+00:00" endTime="2025-06-21T12:05:52.6799505+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fde84581-1223-433b-8bd2-c0d6de1e997a" />
    <UnitTestResult executionId="02414d43-b40a-421d-ad7a-c1726b732102" testId="28dfcfc5-71e4-5551-866d-bd727a2fb916" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:12.0656137" startTime="2025-06-21T12:04:35.7878638+00:00" endTime="2025-06-21T12:05:47.2930929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02414d43-b40a-421d-ad7a-c1726b732102">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculator())|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40ffe6e0-4bc5-4ff9-83d6-88f0cc69f200" testId="f59bc880-ba88-5ccd-d6bd-69f5d95d2c9b" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForInterfaceMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:01:18.7150085" startTime="2025-06-21T12:04:34.6767498+00:00" endTime="2025-06-21T12:05:53.4386792+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40ffe6e0-4bc5-4ff9-83d6-88f0cc69f200" />
    <UnitTestResult executionId="ffc780b4-b744-4eae-bb15-020162380bda" testId="a5aee99b-a815-a85b-9132-0e6659aaf330" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:08.1239340" startTime="2025-06-21T12:04:35.0052655+00:00" endTime="2025-06-21T12:05:42.9648418+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ffc780b4-b744-4eae-bb15-020162380bda">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c28034d-b2db-434c-9fae-d914e9d0d0f8" testId="4d95a7f2-d688-fce8-7691-cd001ee7bfe4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:00:51.8768219" startTime="2025-06-21T12:04:36.0143289+00:00" endTime="2025-06-21T12:05:27.2571391+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c28034d-b2db-434c-9fae-d914e9d0d0f8" />
    <UnitTestResult executionId="e0189798-257f-4647-8893-4d4b5a1abad2" testId="e4a73ec4-8248-27e5-3b81-c661badd3661" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.DoSth());&quot;)" computerName="fv-az1057-923" duration="00:01:12.4712595" startTime="2025-06-21T12:04:35.7905929+00:00" endTime="2025-06-21T12:05:47.7060579+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0189798-257f-4647-8893-4d4b5a1abad2">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.DoSth());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="271308df-d562-4ccb-b6cc-3ba5a28e3b48" testId="8adfbe7e-4cfd-75c1-f96d-49441b95985c" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupRemove(x =&gt; x.StringEvent -= It.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.4725825" startTime="2025-06-21T12:04:34.6315163+00:00" endTime="2025-06-21T12:05:42.0551869+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="271308df-d562-4ccb-b6cc-3ba5a28e3b48" />
    <UnitTestResult executionId="19675bdb-a1e8-4586-80d9-21559effb8ae" testId="ab9e7e6e-6d2f-931c-55d3-aa811c4391b5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock4 = new Mock&lt;IMyService&gt;(Moq.MockBehavior.&quot;···)" computerName="fv-az1057-923" duration="00:01:01.0539793" startTime="2025-06-21T12:04:36.0165800+00:00" endTime="2025-06-21T12:05:36.5181389+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19675bdb-a1e8-4586-80d9-21559effb8ae" />
    <UnitTestResult executionId="f07a42c7-1937-4092-be3b-f666326392f8" testId="91b24974-a164-a7d8-1d37-c0089c06d9b1" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:12.6431624" startTime="2025-06-21T12:04:36.8354660+00:00" endTime="2025-06-21T12:05:48.3365952+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f07a42c7-1937-4092-be3b-f666326392f8">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e44b6523-b5f9-4b64-a1c0-98a0c9cd13ec" testId="d576fd12-dec0-2a83-0c7b-cf68127141a9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:01:02.0772697" startTime="2025-06-21T12:04:35.9726988+00:00" endTime="2025-06-21T12:05:37.4122117+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e44b6523-b5f9-4b64-a1c0-98a0c9cd13ec" />
    <UnitTestResult executionId="e0e8a62f-331f-4f2e-b4ba-568bd6194de6" testId="f4ac8330-f886-4290-e73d-138db862a486" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:14.4682017" startTime="2025-06-21T12:04:35.7226759+00:00" endTime="2025-06-21T12:05:49.7049297+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0e8a62f-331f-4f2e-b4ba-568bd6194de6" />
    <UnitTestResult executionId="5b7db3ad-606a-4ea7-85f0-2574f05416b1" testId="4d4ab1bf-cb73-9c16-9550-622b2abef17d" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" computerName="fv-az1057-923" duration="00:01:07.3612230" startTime="2025-06-21T12:04:34.6567167+00:00" endTime="2025-06-21T12:05:42.0291354+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b7db3ad-606a-4ea7-85f0-2574f05416b1" />
    <UnitTestResult executionId="87b4a13d-60bc-4a5f-8ce7-13f6bd63a284" testId="3faf4abb-5d4f-28d3-227e-0c526e53f977" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:09.0626781" startTime="2025-06-21T12:04:34.6084148+00:00" endTime="2025-06-21T12:05:43.6215600+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87b4a13d-60bc-4a5f-8ce7-13f6bd63a284" />
    <UnitTestResult executionId="15808004-3393-410f-8124-954df160a175" testId="8a17e300-168b-d101-1a2e-de6c626fe847" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8898257" startTime="2025-06-21T12:04:34.6525574+00:00" endTime="2025-06-21T12:05:54.5150261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15808004-3393-410f-8124-954df160a175" />
    <UnitTestResult executionId="49ad9184-8934-4951-b5d9-709b6d818047" testId="cff87ce0-ac02-feeb-01c9-ccecd0d6feeb" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:14.5539335" startTime="2025-06-21T12:04:34.8400805+00:00" endTime="2025-06-21T12:05:49.2986438+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49ad9184-8934-4951-b5d9-709b6d818047">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e79d4856-f408-4b52-84ee-34a3bc6ef732" testId="cc410954-6c77-3aec-8700-58d575c4473d" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:57.1643905" startTime="2025-06-21T12:04:35.8293781+00:00" endTime="2025-06-21T12:05:32.4320493+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e79d4856-f408-4b52-84ee-34a3bc6ef732" />
    <UnitTestResult executionId="d33933d8-435d-4fef-8e7a-e9db779b818a" testId="fa7a80fd-a4c9-4b4d-10c4-cca9bd8d4ae5" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" computerName="fv-az1057-923" duration="00:01:17.6348303" startTime="2025-06-21T12:04:34.8948654+00:00" endTime="2025-06-21T12:05:52.4121589+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d33933d8-435d-4fef-8e7a-e9db779b818a">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58a9ca81-28a6-4746-930e-cac54fc766aa" testId="204c66c9-c5f4-97b4-2d24-46bb9392add7" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" computerName="fv-az1057-923" duration="00:01:12.0475813" startTime="2025-06-21T12:04:35.3757545+00:00" endTime="2025-06-21T12:05:47.0638332+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58a9ca81-28a6-4746-930e-cac54fc766aa" />
    <UnitTestResult executionId="0b223b0d-e32d-4a7c-8c8e-bc4d0941d33d" testId="2e1051c1-9c4c-2067-a7c2-54cb9ce76371" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:17.1940128" startTime="2025-06-21T12:04:35.5946349+00:00" endTime="2025-06-21T12:05:52.3279534+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b223b0d-e32d-4a7c-8c8e-bc4d0941d33d" />
    <UnitTestResult executionId="a42f60cc-d4fa-4222-8283-df4fb9e08da4" testId="f33813cc-d371-e2f2-a61f-d3aa7054e9d1" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" computerName="fv-az1057-923" duration="00:01:18.8011860" startTime="2025-06-21T12:04:34.9396451+00:00" endTime="2025-06-21T12:05:53.6228744+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a42f60cc-d4fa-4222-8283-df4fb9e08da4">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6b9f857-038b-469a-95a0-bdac2e90ebc8" testId="02e99185-227d-462e-8aac-1229e6a642b8" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.8880949" startTime="2025-06-21T12:04:36.3961330+00:00" endTime="2025-06-21T12:05:51.4524593+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6b9f857-038b-469a-95a0-bdac2e90ebc8" />
    <UnitTestResult executionId="5911e57c-32f2-4975-b8a4-38382978fd38" testId="125f5f59-beed-825c-9774-d3019824876b" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsElement_WhenSourceContainsSingleElement" computerName="fv-az1057-923" duration="00:00:00.0204760" startTime="2025-06-21T12:04:36.6576786+00:00" endTime="2025-06-21T12:04:36.7570137+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5911e57c-32f2-4975-b8a4-38382978fd38" />
    <UnitTestResult executionId="7d4ebfc5-865e-4be0-b050-4a6000097de1" testId="1d8de6c3-a4a1-02a8-4ccf-b1865a6a0863" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" computerName="fv-az1057-923" duration="00:00:58.8111800" startTime="2025-06-21T12:04:35.7822977+00:00" endTime="2025-06-21T12:05:34.0419547+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d4ebfc5-865e-4be0-b050-4a6000097de1" />
    <UnitTestResult executionId="45c21b57-b16d-4833-9e9f-e13d997598b4" testId="86490483-c0d7-77ee-fc2e-d47db6335368" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:58.2174003" startTime="2025-06-21T12:04:35.2905571+00:00" endTime="2025-06-21T12:05:33.2019047+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45c21b57-b16d-4833-9e9f-e13d997598b4" />
    <UnitTestResult executionId="bf1092e4-e56e-4d26-870d-3f4cfc2106ec" testId="d8333fed-84ca-d5a2-bc34-5cfe5d9480c6" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:17.5808913" startTime="2025-06-21T12:04:35.4420444+00:00" endTime="2025-06-21T12:05:52.7009500+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf1092e4-e56e-4d26-870d-3f4cfc2106ec" />
    <UnitTestResult executionId="0aeed2d5-9c79-450c-a875-f131f8bb8c02" testId="6bf33806-4140-93ed-2eee-60288d8a0b65" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" computerName="fv-az1057-923" duration="00:01:06.6391793" startTime="2025-06-21T12:04:35.8138845+00:00" endTime="2025-06-21T12:05:41.8947369+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0aeed2d5-9c79-450c-a875-f131f8bb8c02" />
    <UnitTestResult executionId="ae2033ca-35c2-4f95-87bf-7ab701f68307" testId="e8383dbb-e46e-baed-720b-b98cb8845b3d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:17.0736959" startTime="2025-06-21T12:04:36.4992456+00:00" endTime="2025-06-21T12:05:52.6452626+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ae2033ca-35c2-4f95-87bf-7ab701f68307" />
    <UnitTestResult executionId="2a2a8941-b0a9-4f41-a56d-be59c73c83cb" testId="4d93fd39-d9af-0e56-4bc7-f51b250e0307" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:18.2897160" startTime="2025-06-21T12:04:36.6220332+00:00" endTime="2025-06-21T12:05:53.8951075+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a2a8941-b0a9-4f41-a56d-be59c73c83cb" />
    <UnitTestResult executionId="8a5e04db-d700-49c1-9714-1c9bac3d7cac" testId="76c7c833-e888-90e8-f7e0-15d4a8e6ab68" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:53.6456540" startTime="2025-06-21T12:04:35.8420092+00:00" endTime="2025-06-21T12:05:28.9170136+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a5e04db-d700-49c1-9714-1c9bac3d7cac" />
    <UnitTestResult executionId="76838dac-b781-46df-a7cd-0df4c1e08878" testId="14918b2a-aca0-607d-3179-d7917e078a1a" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" computerName="fv-az1057-923" duration="00:01:20.3928930" startTime="2025-06-21T12:04:34.6814026+00:00" endTime="2025-06-21T12:05:55.1467000+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76838dac-b781-46df-a7cd-0df4c1e08878">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    [Obsolete]
public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    [Obsolete]
public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1047b073-232d-4c43-ac2c-651d87d5d545" testId="a898cd21-2dd3-aa11-f5ad-98d4ce3d63c9" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" computerName="fv-az1057-923" duration="00:00:57.3421377" startTime="2025-06-21T12:04:35.8316193+00:00" endTime="2025-06-21T12:05:32.6086989+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1047b073-232d-4c43-ac2c-651d87d5d545" />
    <UnitTestResult executionId="d99d404b-6e7d-4ac2-9866-5a05b84f82a8" testId="92bd9671-8e37-a07f-23a5-76e9d08b4229" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArrayAsIEnumerable_ReturnsNull_WhenIsDefaultOrEmpty" computerName="fv-az1057-923" duration="00:00:00.0001780" startTime="2025-06-21T12:04:36.6461296+00:00" endTime="2025-06-21T12:04:36.6464395+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d99d404b-6e7d-4ac2-9866-5a05b84f82a8" />
    <UnitTestResult executionId="2a38128e-b8aa-4b8e-818e-9f9d4e15a4dd" testId="f6d67d9f-16d8-17f0-a24f-e6d93a14057a" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:05.4744180" startTime="2025-06-21T12:04:34.9569357+00:00" endTime="2025-06-21T12:05:40.3109490+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a38128e-b8aa-4b8e-818e-9f9d4e15a4dd" />
    <UnitTestResult executionId="417f5cd8-f34e-414a-a8a5-6c2e10f2fe0a" testId="e61ed3e0-4274-df45-2ca9-2540936d6d6f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:56.4232784" startTime="2025-06-21T12:04:36.3830321+00:00" endTime="2025-06-21T12:05:31.9342929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="417f5cd8-f34e-414a-a8a5-6c2e10f2fe0a" />
    <UnitTestResult executionId="4eeb5ef1-63f4-4b72-80e9-019bdfbdfb66" testId="f96dba91-df78-49a7-f741-7f6aaf00b872" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:00:55.5138933" startTime="2025-06-21T12:04:35.8342554+00:00" endTime="2025-06-21T12:05:30.7850680+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4eeb5ef1-63f4-4b72-80e9-019bdfbdfb66">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a47f35ea-bc38-4bb0-847f-96e8122a9c91" testId="247cace2-2250-56d0-036c-e5ba16fac99f" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:12.5832824" startTime="2025-06-21T12:04:35.7359671+00:00" endTime="2025-06-21T12:05:47.8090208+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a47f35ea-bc38-4bb0-847f-96e8122a9c91" />
    <UnitTestResult executionId="62588550-3998-430f-8ced-c2dc45cb85d2" testId="15a065bf-6844-92a4-a2ae-1bdcc6c9f747" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" computerName="fv-az1057-923" duration="00:00:56.7487148" startTime="2025-06-21T12:04:35.0960141+00:00" endTime="2025-06-21T12:05:31.6283716+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62588550-3998-430f-8ced-c2dc45cb85d2" />
    <UnitTestResult executionId="41955feb-7905-446c-8d07-073fabf2f7af" testId="68d39d5f-5e26-6b1e-7704-2d52b2eaad56" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.2181964" startTime="2025-06-21T12:04:36.6186278+00:00" endTime="2025-06-21T12:05:51.9262032+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41955feb-7905-446c-8d07-073fabf2f7af" />
    <UnitTestResult executionId="84532757-c264-413a-84bf-bfc7be464455" testId="63a8f3c7-d15e-a139-a333-09366207a0a7" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.4837240" startTime="2025-06-21T12:04:35.3266954+00:00" endTime="2025-06-21T12:05:52.5025933+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84532757-c264-413a-84bf-bfc7be464455" />
    <UnitTestResult executionId="bdf93e85-6b8d-4209-98c5-6e1d1eef7766" testId="8d6e4ebd-9b86-8325-016f-25e77d3b534c" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:14.7127485" startTime="2025-06-21T12:04:35.4029593+00:00" endTime="2025-06-21T12:05:49.7780306+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bdf93e85-6b8d-4209-98c5-6e1d1eef7766" />
    <UnitTestResult executionId="0234f224-d5c2-45d6-b8e6-ddbf18d66d6a" testId="51341829-e88b-399b-3a4a-a99227f2de56" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:18.7767407" startTime="2025-06-21T12:04:36.4731679+00:00" endTime="2025-06-21T12:05:54.3943688+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0234f224-d5c2-45d6-b8e6-ddbf18d66d6a" />
    <UnitTestResult executionId="d9f49f02-9d9b-4c35-b575-dd84ef492e5e" testId="f4e44a8d-8d37-624c-9f54-73da1df2c81a" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:15.9746596" startTime="2025-06-21T12:04:34.9742654+00:00" endTime="2025-06-21T12:05:50.8289218+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9f49f02-9d9b-4c35-b575-dd84ef492e5e">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c14914b7-72b7-4273-b66c-95604cb4afde" testId="4041f6f9-4629-f6c1-d8fa-da9c5896b125" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" computerName="fv-az1057-923" duration="00:01:06.6962032" startTime="2025-06-21T12:04:36.9208716+00:00" endTime="2025-06-21T12:05:42.4040162+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c14914b7-72b7-4273-b66c-95604cb4afde">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92a5cf7f-3f0f-450c-9d9d-8aba4314c8e2" testId="f708a38b-ae92-cf34-8741-3e08188797d0" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" computerName="fv-az1057-923" duration="00:01:11.9589887" startTime="2025-06-21T12:04:36.6749950+00:00" endTime="2025-06-21T12:05:47.6439373+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92a5cf7f-3f0f-450c-9d9d-8aba4314c8e2">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="65ef0dc4-64f9-439e-9f6f-9b030baad782" testId="187ad563-5bad-d3b3-afac-2ddbc36fb5e9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:03.1522766" startTime="2025-06-21T12:04:36.3073113+00:00" endTime="2025-06-21T12:05:38.6482444+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65ef0dc4-64f9-439e-9f6f-9b030baad782" />
    <UnitTestResult executionId="1f8b0cd9-e5e1-4cf1-baf0-bfecc4bca855" testId="1f0cd1c3-c108-7969-43ed-bdb5373559f1" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:18.5403538" startTime="2025-06-21T12:04:36.7019773+00:00" endTime="2025-06-21T12:05:54.2745251+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f8b0cd9-e5e1-4cf1-baf0-bfecc4bca855">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ef88122-a713-4e9c-8f0f-629d1b829196" testId="36144847-de01-fe86-9acd-4f60bdf76449" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:54.9754053" startTime="2025-06-21T12:04:36.0967945+00:00" endTime="2025-06-21T12:05:30.4042690+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ef88122-a713-4e9c-8f0f-629d1b829196" />
    <UnitTestResult executionId="e8b2e5c4-1224-46d9-a2dc-21be9ad572fe" testId="deb05467-e0f5-6998-bc66-831a8929abb8" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" computerName="fv-az1057-923" duration="00:00:55.4195057" startTime="2025-06-21T12:04:36.3104769+00:00" endTime="2025-06-21T12:05:30.9058769+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8b2e5c4-1224-46d9-a2dc-21be9ad572fe" />
    <UnitTestResult executionId="8fe1b6d9-91ed-4fdf-8b97-b06c3a935ac4" testId="9e21d77b-ca59-9c81-5d8b-4b63cc11cb88" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" computerName="fv-az1057-923" duration="00:01:11.9414722" startTime="2025-06-21T12:04:36.5628723+00:00" endTime="2025-06-21T12:05:47.5277840+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fe1b6d9-91ed-4fdf-8b97-b06c3a935ac4" />
    <UnitTestResult executionId="45f813b9-4c3c-4365-998b-41d61493bb8d" testId="5fe44ca4-a628-dd46-1d43-c0811753df46" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:06.6108567" startTime="2025-06-21T12:04:34.9415281+00:00" endTime="2025-06-21T12:05:41.4221404+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45f813b9-4c3c-4365-998b-41d61493bb8d" />
    <UnitTestResult executionId="b32aad2a-005f-422a-8201-f9c3cf9903a9" testId="fa718ec2-8e4a-721b-ecac-e40f6594d885" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:01:19.6083685" startTime="2025-06-21T12:04:35.7984491+00:00" endTime="2025-06-21T12:05:54.8849760+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b32aad2a-005f-422a-8201-f9c3cf9903a9" />
    <UnitTestResult executionId="6b20baa7-3067-4646-b087-a6de8a34c935" testId="b03df8a0-c18d-3b80-0fee-91e020f92e19" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:09.1694486" startTime="2025-06-21T12:04:34.9476329+00:00" endTime="2025-06-21T12:05:43.9861333+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6b20baa7-3067-4646-b087-a6de8a34c935" />
    <UnitTestResult executionId="c2515558-fc02-49f9-bb5f-64fa8aa41588" testId="ecf321dc-fd20-aa30-d5c5-dcb9fede659a" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:04.8373989" startTime="2025-06-21T12:04:34.7066628+00:00" endTime="2025-06-21T12:05:39.5541074+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2515558-fc02-49f9-bb5f-64fa8aa41588">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c68acb0-832f-4a26-85a0-3ca43d4e0cc8" testId="7cf592df-293f-42c5-93a4-cee84f8ec705" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2392499" startTime="2025-06-21T12:04:36.2980718+00:00" endTime="2025-06-21T12:05:53.7420598+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c68acb0-832f-4a26-85a0-3ca43d4e0cc8" />
    <UnitTestResult executionId="1d8e0358-2d8d-4c7d-a039-834c254ec609" testId="020dd076-763d-898b-ac51-63a0c1561c0e" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" computerName="fv-az1057-923" duration="00:01:13.1743271" startTime="2025-06-21T12:04:35.7730770+00:00" endTime="2025-06-21T12:05:48.4021655+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d8e0358-2d8d-4c7d-a039-834c254ec609">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0975bdd0-295a-4fe2-8a68-d54b15743912" testId="14fee0a2-07f0-bc1a-a1e3-5bf881fadb6b" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:14.6052525" startTime="2025-06-21T12:04:35.8490179+00:00" endTime="2025-06-21T12:05:49.8754097+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0975bdd0-295a-4fe2-8a68-d54b15743912">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e6847b8d-b6a7-40a9-8451-ce36d61aff59" testId="757f98f1-6b15-febe-4c27-feb2a5242929" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:01:15.6508398" startTime="2025-06-21T12:04:36.3927143+00:00" endTime="2025-06-21T12:05:51.1915820+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e6847b8d-b6a7-40a9-8451-ce36d61aff59" />
    <UnitTestResult executionId="4c976885-d54e-420c-b668-6cfdd7aea12e" testId="3b63aa8f-9f86-158f-600a-85e113f587d1" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:08.2451257" startTime="2025-06-21T12:04:34.9422263+00:00" endTime="2025-06-21T12:05:43.0554073+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c976885-d54e-420c-b668-6cfdd7aea12e" />
    <UnitTestResult executionId="b54d8d8c-d98f-42f2-bb19-5f818bda6643" testId="d6264142-ed9e-0230-b0c2-c4d54c89f534" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:56.4877475" startTime="2025-06-21T12:04:36.0675813+00:00" endTime="2025-06-21T12:05:31.9111904+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b54d8d8c-d98f-42f2-bb19-5f818bda6643" />
    <UnitTestResult executionId="010cd5ea-9bd0-4973-a274-83872db00c6a" testId="0881dba9-4980-6975-5649-21e5613317c7" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Fie&quot;···)" computerName="fv-az1057-923" duration="00:00:52.6237009" startTime="2025-06-21T12:04:37.0670851+00:00" endTime="2025-06-21T12:05:28.3552377+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="010cd5ea-9bd0-4973-a274-83872db00c6a">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Field)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5f4e2db1-ad8d-4b9a-85d4-15ecd8a56066" testId="a9b431dc-fcb8-667a-a2b2-1332f8570507" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:01:06.8513935" startTime="2025-06-21T12:04:37.0210043+00:00" endTime="2025-06-21T12:05:42.5603142+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f4e2db1-ad8d-4b9a-85d4-15ecd8a56066" />
    <UnitTestResult executionId="062f7033-686c-4678-9751-7a6a1b93d5a9" testId="775a6f83-2593-6301-1bbb-351ddd620d4a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" computerName="fv-az1057-923" duration="00:01:05.4392158" startTime="2025-06-21T12:04:36.6240953+00:00" endTime="2025-06-21T12:05:41.1002247+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="062f7033-686c-4678-9751-7a6a1b93d5a9" />
    <UnitTestResult executionId="2016ca71-31c2-4883-b155-25b875ce2ebc" testId="29c3f391-2a52-0477-1eac-9f7a3fe85ff8" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" computerName="fv-az1057-923" duration="00:00:58.8637585" startTime="2025-06-21T12:04:36.2796154+00:00" endTime="2025-06-21T12:05:34.3520376+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2016ca71-31c2-4883-b155-25b875ce2ebc" />
    <UnitTestResult executionId="b48ccf18-9945-488a-b28a-6572b4862622" testId="8336c08a-3c00-8d52-e909-5b407bd6b011" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" computerName="fv-az1057-923" duration="00:01:18.7554813" startTime="2025-06-21T12:04:36.5204765+00:00" endTime="2025-06-21T12:05:54.3315953+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b48ccf18-9945-488a-b28a-6572b4862622" />
    <UnitTestResult executionId="3804d840-6e63-4233-9bd4-f1286871794b" testId="6aab743f-6931-4fdb-0013-cd4ee4922c3c" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.0136764" startTime="2025-06-21T12:04:35.3258764+00:00" endTime="2025-06-21T12:05:46.0159407+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3804d840-6e63-4233-9bd4-f1286871794b" />
    <UnitTestResult executionId="6f352f08-3703-4e14-8549-81f4f035a2f1" testId="cdce5b04-c693-0dbc-f98b-8f3d658b45bc" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" computerName="fv-az1057-923" duration="00:01:04.4245105" startTime="2025-06-21T12:04:35.9142084+00:00" endTime="2025-06-21T12:05:39.7289895+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f352f08-3703-4e14-8549-81f4f035a2f1" />
    <UnitTestResult executionId="fae02d6f-4cb2-4f5f-8ba6-3d9574ea1834" testId="951d6230-bd65-8702-b149-1adec8fbf533" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.2761620" startTime="2025-06-21T12:04:35.6718763+00:00" endTime="2025-06-21T12:05:52.4470304+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fae02d6f-4cb2-4f5f-8ba6-3d9574ea1834" />
    <UnitTestResult executionId="3cc2f3e7-6364-48a9-9d7e-3850e2fdccd7" testId="c842967e-f057-70fe-949b-010be537e625" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:13.8886365" startTime="2025-06-21T12:04:37.0677283+00:00" endTime="2025-06-21T12:05:49.6432760+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cc2f3e7-6364-48a9-9d7e-3850e2fdccd7">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.IsInRange(1, 10, Moq.Range.Inclusive), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="646d8fad-155d-42ad-aa46-6fe3e8c27252" testId="ba55abe9-72ff-14b0-bf44-3ae01d3fcc30" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:00:52.3009797" startTime="2025-06-21T12:04:36.1302769+00:00" endTime="2025-06-21T12:05:27.7458243+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="646d8fad-155d-42ad-aa46-6fe3e8c27252" />
    <UnitTestResult executionId="e670ca9a-31bf-426f-bc8e-91ca68ea2182" testId="7bc50878-a03f-67ee-ce3e-d0ee490643ae" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:13.1191711" startTime="2025-06-21T12:04:34.6475468+00:00" endTime="2025-06-21T12:05:47.7398675+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e670ca9a-31bf-426f-bc8e-91ca68ea2182" />
    <UnitTestResult executionId="0122f058-0830-456c-9a46-b40ed6e48029" testId="4dd0a504-9a82-e63f-2edd-c4aa80bef3cb" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:11.5426595" startTime="2025-06-21T12:04:34.8764819+00:00" endTime="2025-06-21T12:05:46.3095529+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0122f058-0830-456c-9a46-b40ed6e48029" />
    <UnitTestResult executionId="9ee3c267-18c6-4a43-94f9-2e9cae87eaac" testId="11882a2e-23e7-60fc-aa97-397997e04b25" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.9739917" startTime="2025-06-21T12:04:36.6122258+00:00" endTime="2025-06-21T12:05:51.6091082+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ee3c267-18c6-4a43-94f9-2e9cae87eaac" />
    <UnitTestResult executionId="2919aa46-08a1-47a7-ae7b-89ca26610b15" testId="c2b7e3d2-2366-2478-0c3b-b9f03a61cbb8" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.4293188" startTime="2025-06-21T12:04:35.3954334+00:00" endTime="2025-06-21T12:05:51.5240078+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2919aa46-08a1-47a7-ae7b-89ca26610b15" />
    <UnitTestResult executionId="3a377152-3818-4b6d-b4df-a8f13dfca4e6" testId="d750f795-0da2-bb17-8107-8dd8f9053231" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:01:05.6587079" startTime="2025-06-21T12:04:35.0894094+00:00" endTime="2025-06-21T12:05:40.5374133+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a377152-3818-4b6d-b4df-a8f13dfca4e6" />
    <UnitTestResult executionId="1a75b4bb-3056-46f6-8087-eeaae83c7c7e" testId="376ee951-053d-13de-9e15-70c7b500bfe0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" computerName="fv-az1057-923" duration="00:01:11.0008292" startTime="2025-06-21T12:04:36.4211069+00:00" endTime="2025-06-21T12:05:46.5680330+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a75b4bb-3056-46f6-8087-eeaae83c7c7e" />
    <UnitTestResult executionId="a9087fc2-1e49-4949-85bf-0e3fcdef3724" testId="e89e369b-6136-c4a0-4e31-b68c970692c0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" computerName="fv-az1057-923" duration="00:01:01.4283331" startTime="2025-06-21T12:04:36.3337262+00:00" endTime="2025-06-21T12:05:36.9212330+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9087fc2-1e49-4949-85bf-0e3fcdef3724" />
    <UnitTestResult executionId="fbb79d05-c55a-461a-9958-3ccdca345d02" testId="0ac75799-5490-9ceb-b321-0523c127bb97" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:01:15.1140135" startTime="2025-06-21T12:04:36.6213406+00:00" endTime="2025-06-21T12:05:50.7175661+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbb79d05-c55a-461a-9958-3ccdca345d02" />
    <UnitTestResult executionId="41effe1b-b38e-41db-bb01-dfe8ba1c2463" testId="505bc260-c469-2a6e-c095-4d420025231f" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" computerName="fv-az1057-923" duration="00:01:08.2434245" startTime="2025-06-21T12:04:35.8261924+00:00" endTime="2025-06-21T12:05:43.5070266+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41effe1b-b38e-41db-bb01-dfe8ba1c2463">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="324d832b-9f5c-4a8d-821b-efb87ba299bb" testId="c14417a8-d833-78d5-0427-85f81afa0b82" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:16.8754160" startTime="2025-06-21T12:04:35.3962155+00:00" endTime="2025-06-21T12:05:51.9488734+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="324d832b-9f5c-4a8d-821b-efb87ba299bb" />
    <UnitTestResult executionId="ccccb33b-1a33-4866-b400-fbbbc10a4bc9" testId="ef08cb55-e83f-1917-bacc-6b6746703c6f" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:01:06.0559408" startTime="2025-06-21T12:04:37.0156651+00:00" endTime="2025-06-21T12:05:41.7541344+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ccccb33b-1a33-4866-b400-fbbbc10a4bc9" />
    <UnitTestResult executionId="a511c940-da13-461f-a3a6-785e3ef114f4" testId="4ef72ed1-c31a-e243-67c9-e43375b6340e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" computerName="fv-az1057-923" duration="00:01:18.9795307" startTime="2025-06-21T12:04:36.3484343+00:00" endTime="2025-06-21T12:05:54.4830351+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a511c940-da13-461f-a3a6-785e3ef114f4" />
    <UnitTestResult executionId="7ebf28f7-a6c4-46bc-884e-5362cbce0a91" testId="db15e8e1-f53d-cb27-99c3-739abdffb1ce" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2739456" startTime="2025-06-21T12:04:36.9979272+00:00" endTime="2025-06-21T12:05:52.9919791+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ebf28f7-a6c4-46bc-884e-5362cbce0a91">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d1e5e02-45f6-4d03-afc8-2e7351fe168a" testId="e0662c63-adde-4702-9dd5-70b6afbe8996" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.7601403" startTime="2025-06-21T12:04:35.6499697+00:00" endTime="2025-06-21T12:05:51.9000524+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d1e5e02-45f6-4d03-afc8-2e7351fe168a" />
    <UnitTestResult executionId="47ae3d9b-ca1c-4814-82a5-53d299e7bd11" testId="92b4cf56-0e75-818f-1b86-bd5a2e1613c9" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:00.4453263" startTime="2025-06-21T12:04:34.9891377+00:00" endTime="2025-06-21T12:05:35.3251872+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47ae3d9b-ca1c-4814-82a5-53d299e7bd11">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws&lt;InvalidOperationException&gt;();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc8e0e0e-ece1-45a6-8617-091f204def9e" testId="ea22b0e8-67d7-fa78-f883-820a22f6f302" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Fie&quot;···)" computerName="fv-az1057-923" duration="00:01:02.1632407" startTime="2025-06-21T12:04:35.9616042+00:00" endTime="2025-06-21T12:05:37.4881025+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc8e0e0e-ece1-45a6-8617-091f204def9e">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Field)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac34173f-a7a1-40c8-be34-8dbee7f983a3" testId="0608f51b-eecc-4e8f-f8e6-4d630ce983f6" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5609975" startTime="2025-06-21T12:04:34.9631540+00:00" endTime="2025-06-21T12:05:54.4137035+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac34173f-a7a1-40c8-be34-8dbee7f983a3">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26a8d78c-be70-4e39-a6e6-65824e39e91b" testId="212dd999-4cf7-b083-bd80-135c06132a06" testName="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var repository = new MockRepository(MockBehavior.S&quot;···)" computerName="fv-az1057-923" duration="00:01:21.2282871" startTime="2025-06-21T12:04:35.1059041+00:00" endTime="2025-06-21T12:05:56.1135395+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26a8d78c-be70-4e39-a6e6-65824e39e91b" />
    <UnitTestResult executionId="e127e35d-da25-4a9f-a7b9-8ff1e8bf9044" testId="367e9d53-b1f2-7191-ec48-4448aa95cb33" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" computerName="fv-az1057-923" duration="00:01:11.1372012" startTime="2025-06-21T12:04:35.9544194+00:00" endTime="2025-06-21T12:05:46.4716431+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e127e35d-da25-4a9f-a7b9-8ff1e8bf9044" />
    <UnitTestResult executionId="0cd163ed-81d8-4843-acbc-d796ee4c9dfc" testId="7a770df7-2b79-2e3a-c985-0bd6d970c754" testName="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" computerName="fv-az1057-923" duration="00:01:11.4738065" startTime="2025-06-21T12:04:35.8062619+00:00" endTime="2025-06-21T12:05:46.7479511+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0cd163ed-81d8-4843-acbc-d796ee4c9dfc" />
    <UnitTestResult executionId="8f82555d-516c-4f0d-84b0-36c40ef71a3a" testId="65b422a4-a0c7-462f-ca66-6345b1be0e82" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" computerName="fv-az1057-923" duration="00:00:58.8422024" startTime="2025-06-21T12:04:36.1336134+00:00" endTime="2025-06-21T12:05:34.2891794+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f82555d-516c-4f0d-84b0-36c40ef71a3a" />
    <UnitTestResult executionId="9f27923a-c471-4ac8-8280-40421261b18d" testId="6ea1574a-0d47-3be6-ec8a-ba9673a21164" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" computerName="fv-az1057-923" duration="00:01:16.1297955" startTime="2025-06-21T12:04:36.5069394+00:00" endTime="2025-06-21T12:05:51.7077468+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f27923a-c471-4ac8-8280-40421261b18d" />
    <UnitTestResult executionId="e82c8c16-13ec-4a35-82d7-2ccf9af523cd" testId="2b72fbdb-745d-5e94-0dcc-1004b291f6fb" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" computerName="fv-az1057-923" duration="00:01:22.4068993" startTime="2025-06-21T12:04:35.2616876+00:00" endTime="2025-06-21T12:05:57.3958064+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e82c8c16-13ec-4a35-82d7-2ccf9af523cd" />
    <UnitTestResult executionId="9f74048d-5739-4b24-8930-2cec38cda80f" testId="08e16d68-c179-252b-4d7d-c464f7e1d901" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:10.5183763" startTime="2025-06-21T12:04:35.1958364+00:00" endTime="2025-06-21T12:05:45.4769474+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f74048d-5739-4b24-8930-2cec38cda80f" />
    <UnitTestResult executionId="36a9728e-49ba-4301-9247-7fb1313350f6" testId="ec80dd96-a1ed-8573-058a-c4413ffbf7a0" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" computerName="fv-az1057-923" duration="00:01:15.1523067" startTime="2025-06-21T12:04:35.7933165+00:00" endTime="2025-06-21T12:05:50.4093137+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36a9728e-49ba-4301-9247-7fb1313350f6">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23927ce3-3660-4438-ba30-439e2056f725" testId="627f9952-2edb-5341-7841-201150eba998" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" computerName="fv-az1057-923" duration="00:00:57.4768400" startTime="2025-06-21T12:04:36.2994584+00:00" endTime="2025-06-21T12:05:32.9980118+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23927ce3-3660-4438-ba30-439e2056f725" />
    <UnitTestResult executionId="cef4ae7c-cff2-48ec-8cad-22023ee9d147" testId="cceab81a-506d-6c31-c036-06d3243c9960" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" computerName="fv-az1057-923" duration="00:01:18.9806621" startTime="2025-06-21T12:04:36.4260472+00:00" endTime="2025-06-21T12:05:54.5609431+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cef4ae7c-cff2-48ec-8cad-22023ee9d147" />
    <UnitTestResult executionId="826b15dd-38c9-41c3-b0f9-d8ea0d44dce8" testId="846a45b1-d7f5-1c39-3c0c-a4c23c94133c" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:00.0453811" startTime="2025-06-21T12:04:35.8969864+00:00" endTime="2025-06-21T12:05:35.3420975+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="826b15dd-38c9-41c3-b0f9-d8ea0d44dce8">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2458fff7-31e7-4bb7-a960-7ec06a1e1c0a" testId="0eaced66-8011-c03c-b6f0-aec042fb1578" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:07.6182375" startTime="2025-06-21T12:04:35.0302256+00:00" endTime="2025-06-21T12:05:42.4725427+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2458fff7-31e7-4bb7-a960-7ec06a1e1c0a" />
    <UnitTestResult executionId="23afa485-39a7-4063-b891-4a9f4b76ea4d" testId="ae7d6803-11e1-0081-ce63-78bec00670a7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" computerName="fv-az1057-923" duration="00:01:02.3200824" startTime="2025-06-21T12:04:36.0390462+00:00" endTime="2025-06-21T12:05:37.7270663+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23afa485-39a7-4063-b891-4a9f4b76ea4d" />
    <UnitTestResult executionId="d285daec-9b83-49c8-b9b3-eff1fb9c0cfb" testId="1f3814de-7df6-32a2-b09f-3f28f231eed5" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:05.0882887" startTime="2025-06-21T12:04:34.6469062+00:00" endTime="2025-06-21T12:05:39.6721273+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d285daec-9b83-49c8-b9b3-eff1fb9c0cfb" />
    <UnitTestResult executionId="be2df73c-0bbd-4e8c-8e20-60defe1b86be" testId="3494b454-f14e-f23a-226c-c60b125760ec" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:16.7584859" startTime="2025-06-21T12:04:36.6171776+00:00" endTime="2025-06-21T12:05:52.4359313+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be2df73c-0bbd-4e8c-8e20-60defe1b86be" />
    <UnitTestResult executionId="9ccba08f-8b56-426b-a5b1-f062f3a26e51" testId="fb5e4b4c-b600-6a47-3fee-677fe3df8e3b" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:18.9606273" startTime="2025-06-21T12:04:36.6337326+00:00" endTime="2025-06-21T12:05:54.5671635+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ccba08f-8b56-426b-a5b1-f062f3a26e51">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d0c5f443-0c65-4960-bc76-b8c35ce1b247" testId="5b750fb3-57bc-8cc7-7834-5adc48d2a347" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:02.6021866" startTime="2025-06-21T12:04:36.7136051+00:00" endTime="2025-06-21T12:05:38.3009621+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0c5f443-0c65-4960-bc76-b8c35ce1b247">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback({|Moq1100:(string s1, string s2)|} =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cb327515-786b-46a3-afe4-e12e150cb069" testId="2bf9a495-9b89-5d86-4f7d-fd6ac58f767f" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:04.8709885" startTime="2025-06-21T12:04:36.9961035+00:00" endTime="2025-06-21T12:05:40.5611343+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb327515-786b-46a3-afe4-e12e150cb069">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cb1a47de-5c1d-4af0-bb63-923431d6aa81" testId="4e695683-2469-5cda-a5a6-c08b18f33756" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:09.3403311" startTime="2025-06-21T12:04:36.6308488+00:00" endTime="2025-06-21T12:05:44.9729852+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb1a47de-5c1d-4af0-bb63-923431d6aa81">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculator())|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9c5b8aa-c4a1-42e9-be29-cbf82b863470" testId="8f972a51-db87-1893-cb3d-87479f4e07f3" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:15.2209726" startTime="2025-06-21T12:04:34.6209910+00:00" endTime="2025-06-21T12:05:49.8209968+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9c5b8aa-c4a1-42e9-be29-cbf82b863470" />
    <UnitTestResult executionId="c0843d2a-16eb-4f5e-9596-577981e2ad12" testId="6d3bb3f5-96d6-3247-acc7-1676096b0e7e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" computerName="fv-az1057-923" duration="00:00:54.7368327" startTime="2025-06-21T12:04:36.3476641+00:00" endTime="2025-06-21T12:05:30.2364026+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0843d2a-16eb-4f5e-9596-577981e2ad12" />
    <UnitTestResult executionId="fd109abd-0e9a-4540-9d65-e7827ef53fb1" testId="b3e5b9ac-858b-a8df-0d80-880ecc9808d9" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.5513011" startTime="2025-06-21T12:04:35.6731991+00:00" endTime="2025-06-21T12:05:47.7571617+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd109abd-0e9a-4540-9d65-e7827ef53fb1" />
    <UnitTestResult executionId="5d915e4a-7c4f-4247-80b9-7112e94d9535" testId="ae7d63b6-aeec-239f-8fec-a205376b3c82" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:15.5796367" startTime="2025-06-21T12:04:34.9339939+00:00" endTime="2025-06-21T12:05:50.3914919+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5d915e4a-7c4f-4247-80b9-7112e94d9535">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e30073b-3bef-4d3d-a74b-b9916d526d48" testId="2581c941-3c68-b8e5-8bee-18c1c6d657ee" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" computerName="fv-az1057-923" duration="00:00:57.0093572" startTime="2025-06-21T12:04:35.8307505+00:00" endTime="2025-06-21T12:05:32.2735557+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e30073b-3bef-4d3d-a74b-b9916d526d48">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05b4d789-c06b-4e42-ac1a-889157532a23" testId="a8d02d40-d394-a52c-b088-4c44a55e1e0f" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:18.7687978" startTime="2025-06-21T12:04:35.3894742+00:00" endTime="2025-06-21T12:05:53.8081805+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05b4d789-c06b-4e42-ac1a-889157532a23" />
    <UnitTestResult executionId="cc575479-4d50-4bf2-bbc4-30cae43a067b" testId="a358ccd7-1df7-8395-0955-c52355645e80" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" computerName="fv-az1057-923" duration="00:01:01.5296312" startTime="2025-06-21T12:04:36.3794253+00:00" endTime="2025-06-21T12:05:37.0732774+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc575479-4d50-4bf2-bbc4-30cae43a067b" />
    <UnitTestResult executionId="15fa243f-9564-4d24-9b24-f209911379a5" testId="b85c1ceb-d1a3-5562-cb6b-187c2a702691" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" computerName="fv-az1057-923" duration="00:01:15.8027987" startTime="2025-06-21T12:04:36.3855146+00:00" endTime="2025-06-21T12:05:51.3192566+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15fa243f-9564-4d24-9b24-f209911379a5" />
    <UnitTestResult executionId="2e5b5e8e-0c56-426e-8f42-62628b06feb2" testId="3672eb82-1d35-d44b-2738-825c275b220a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:19.0694797" startTime="2025-06-21T12:04:36.4799880+00:00" endTime="2025-06-21T12:05:54.7082478+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e5b5e8e-0c56-426e-8f42-62628b06feb2" />
    <UnitTestResult executionId="1b2df612-6dd6-49a5-87f5-9da60b881469" testId="7039b170-2191-0406-0300-d7750e9c4590" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.7237801" startTime="2025-06-21T12:04:35.3318436+00:00" endTime="2025-06-21T12:05:45.7211087+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b2df612-6dd6-49a5-87f5-9da60b881469" />
    <UnitTestResult executionId="1167980b-cf54-4f72-b38b-ee780be0701a" testId="238a34b9-ca85-a62e-3c1b-8b7555a106a7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:02.4968446" startTime="2025-06-21T12:04:36.0130824+00:00" endTime="2025-06-21T12:05:37.8749877+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1167980b-cf54-4f72-b38b-ee780be0701a" />
    <UnitTestResult executionId="66ca733d-e2fa-4eb8-8013-25153576c478" testId="f2f8b766-e5bb-791e-f943-b352efa53cd9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3688951" startTime="2025-06-21T12:04:36.4219182+00:00" endTime="2025-06-21T12:05:54.9388665+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66ca733d-e2fa-4eb8-8013-25153576c478" />
    <UnitTestResult executionId="8c6d631a-ca9d-4a98-9423-57ed8f178b36" testId="b37c3bc1-14e0-1fd6-6603-145e64db0863" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.DoSomething&quot;···)" computerName="fv-az1057-923" duration="00:01:03.2348734" startTime="2025-06-21T12:04:35.9178095+00:00" endTime="2025-06-21T12:05:38.5411271+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c6d631a-ca9d-4a98-9423-57ed8f178b36">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.DoSomethingAsync());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d77d10d1-866f-4da3-8571-262642294868" testId="188095da-1c05-9c9b-bb19-a755210a1209" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8080670" startTime="2025-06-21T12:04:36.3843866+00:00" endTime="2025-06-21T12:05:55.3249192+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d77d10d1-866f-4da3-8571-262642294868" />
    <UnitTestResult executionId="79e559f3-08c8-4859-b5d2-18aec605fffc" testId="0f5397e0-47d5-3d17-5348-df08e189acbf" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:11.0907462" startTime="2025-06-21T12:04:35.4354147+00:00" endTime="2025-06-21T12:05:46.1668713+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79e559f3-08c8-4859-b5d2-18aec605fffc" />
    <UnitTestResult executionId="15f0b23b-4ec7-4b06-af4d-5409f29ee59d" testId="1e6977c5-6015-f38a-845f-ce6f0417f4e9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" computerName="fv-az1057-923" duration="00:01:01.2826985" startTime="2025-06-21T12:04:35.8945787+00:00" endTime="2025-06-21T12:05:36.5741140+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15f0b23b-4ec7-4b06-af4d-5409f29ee59d" />
    <UnitTestResult executionId="f49fbbe3-d418-4656-a96d-aaf5d90ed04f" testId="9b0db6f4-72e7-8cf4-fa32-70d2e9331a98" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" computerName="fv-az1057-923" duration="00:01:03.4963464" startTime="2025-06-21T12:04:35.0976517+00:00" endTime="2025-06-21T12:05:38.3869131+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f49fbbe3-d418-4656-a96d-aaf5d90ed04f" />
    <UnitTestResult executionId="f062eaad-6d49-4f76-a292-5c02586181a6" testId="bff89dd8-97ef-eb10-bc88-ca68a1640b67" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" computerName="fv-az1057-923" duration="00:00:53.3092390" startTime="2025-06-21T12:04:36.1443214+00:00" endTime="2025-06-21T12:05:28.8380476+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f062eaad-6d49-4f76-a292-5c02586181a6" />
    <UnitTestResult executionId="b5033836-444f-4989-995c-12de954099d6" testId="71fa71cf-75c3-d0b7-b0d8-21091e60961e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" computerName="fv-az1057-923" duration="00:00:54.3320224" startTime="2025-06-21T12:04:35.9571045+00:00" endTime="2025-06-21T12:05:29.6451541+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5033836-444f-4989-995c-12de954099d6" />
    <UnitTestResult executionId="3208b462-39d0-4dd5-869e-c5c42c0fe488" testId="081ed490-34c1-0646-5886-3cbc33372286" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:00:53.3120071" startTime="2025-06-21T12:04:35.8391680+00:00" endTime="2025-06-21T12:05:28.5806345+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3208b462-39d0-4dd5-869e-c5c42c0fe488">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="39dbda33-9f70-4af6-ab5b-c3363b23f284" testId="6b6fb377-0429-3912-ea82-b753fe67fff0" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:10.1417034" startTime="2025-06-21T12:04:36.8798081+00:00" endTime="2025-06-21T12:05:45.8340114+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39dbda33-9f70-4af6-ab5b-c3363b23f284">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e3b1c9f-4c0f-4ef2-80d5-a4b4f5deab96" testId="47254a96-69b8-e4bb-5991-8daffa3df47d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.3720705" startTime="2025-06-21T12:04:35.6436727+00:00" endTime="2025-06-21T12:05:52.5022594+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e3b1c9f-4c0f-4ef2-80d5-a4b4f5deab96" />
    <UnitTestResult executionId="60380ae4-175d-4159-881a-1c742e42c1a1" testId="99e9bd64-ce14-1d6b-ccd7-547118933850" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" computerName="fv-az1057-923" duration="00:01:18.9237044" startTime="2025-06-21T12:04:35.3200628+00:00" endTime="2025-06-21T12:05:53.9113900+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60380ae4-175d-4159-881a-1c742e42c1a1">
      <Output>
        <StdOut>namespace MyNamespace;

public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="997e6c06-f35c-4531-9d21-8f0a0ebfdcdb" testId="dfb72d58-f99d-0c39-ad55-e4d9110d6363" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5019748" startTime="2025-06-21T12:04:36.3779223+00:00" endTime="2025-06-21T12:05:55.0538680+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="997e6c06-f35c-4531-9d21-8f0a0ebfdcdb" />
    <UnitTestResult executionId="2cbd828c-bf2a-4416-a3d8-14b00a34aa52" testId="c1e34a92-c989-1a14-a54a-907fe734d090" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:11.8126507" startTime="2025-06-21T12:04:35.6913896+00:00" endTime="2025-06-21T12:05:46.9971771+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cbd828c-bf2a-4416-a3d8-14b00a34aa52">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0142afe2-0736-4749-8d40-c27c646e0695" testId="7572e84c-2248-269c-96d6-9efc266eba19" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:00:59.7852554" startTime="2025-06-21T12:04:35.1388466+00:00" endTime="2025-06-21T12:05:34.6961781+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0142afe2-0736-4749-8d40-c27c646e0695" />
    <UnitTestResult executionId="1b7e3316-1a07-4859-bdca-d1e2305a8a8b" testId="f584d13e-69d0-2a69-dcda-8da73c391d8e" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:13.5391135" startTime="2025-06-21T12:04:35.7216254+00:00" endTime="2025-06-21T12:05:48.7773645+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b7e3316-1a07-4859-bdca-d1e2305a8a8b" />
    <UnitTestResult executionId="e37da6d5-c7a3-4ee5-a16f-15e1d359a10b" testId="d1e1db13-4dd6-13ce-27fe-9f4c16ac5a9d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:07.2626833" startTime="2025-06-21T12:04:36.0468256+00:00" endTime="2025-06-21T12:05:42.6800575+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e37da6d5-c7a3-4ee5-a16f-15e1d359a10b" />
    <UnitTestResult executionId="e54a830a-9c58-4f53-8f9c-3900a4304765" testId="02319e59-5a71-f532-6c9e-ad32f367f6d0" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" computerName="fv-az1057-923" duration="00:01:15.9857780" startTime="2025-06-21T12:04:34.7095812+00:00" endTime="2025-06-21T12:05:50.7639920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e54a830a-9c58-4f53-8f9c-3900a4304765">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexer&gt;().Verify(x =&gt; x[0])|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c870665-54cc-4b8e-9929-8d2223a4f21a" testId="a9943bc8-1ac3-a1e3-b6b4-fcd8844247b5" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:00:59.3671900" startTime="2025-06-21T12:04:35.7968662+00:00" endTime="2025-06-21T12:05:34.6569369+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c870665-54cc-4b8e-9929-8d2223a4f21a" />
    <UnitTestResult executionId="9805b118-d4e6-49ea-8d13-f97e9b8383e9" testId="24b6cda1-ad91-55bb-4a6a-cac5f2078521" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.5681114" startTime="2025-06-21T12:04:36.4840144+00:00" endTime="2025-06-21T12:05:51.1688821+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9805b118-d4e6-49ea-8d13-f97e9b8383e9" />
    <UnitTestResult executionId="863e2865-7f07-41d8-8b66-f2b939988175" testId="ca27b2d3-77be-7038-14f1-fbf5dcdc8eea" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:14.4258616" startTime="2025-06-21T12:04:35.7710202+00:00" endTime="2025-06-21T12:05:49.7043151+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="863e2865-7f07-41d8-8b66-f2b939988175" />
    <UnitTestResult executionId="3237a73e-3514-4018-a34e-4cee4f8b688e" testId="522d2c18-ed47-dacf-c7f6-b4b3c286b53d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" computerName="fv-az1057-923" duration="00:00:54.9456725" startTime="2025-06-21T12:04:36.2729306+00:00" endTime="2025-06-21T12:05:30.4058372+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3237a73e-3514-4018-a34e-4cee4f8b688e" />
    <UnitTestResult executionId="9059f76e-f5bc-466b-9360-2146ee681183" testId="960a762f-66f6-dfb9-70a2-082d489ff7cc" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:09.7331526" startTime="2025-06-21T12:04:36.8707064+00:00" endTime="2025-06-21T12:05:45.4200167+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9059f76e-f5bc-466b-9360-2146ee681183">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback({|Moq1100:(string s1, string s2)|} =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="861cb834-4a9c-41d9-ba62-fc0febc45db0" testId="034ec99f-dcff-68b1-9509-2a7c0a129012" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:01:16.3434514" startTime="2025-06-21T12:04:36.4195183+00:00" endTime="2025-06-21T12:05:51.9230315+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="861cb834-4a9c-41d9-ba62-fc0febc45db0" />
    <UnitTestResult executionId="58f640c7-bec3-4a3d-b206-cb580efb569f" testId="84c8556b-f7bf-25ea-657a-103bafa8f887" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:17.9740003" startTime="2025-06-21T12:04:36.9995357+00:00" endTime="2025-06-21T12:05:53.6655747+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58f640c7-bec3-4a3d-b206-cb580efb569f">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91443d46-2dcd-4322-8c41-f42fee87d03a" testId="bbc9dc68-3c7f-9b64-1af2-2681c279c7da" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:03.7299251" startTime="2025-06-21T12:04:35.4329373+00:00" endTime="2025-06-21T12:05:38.8052011+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91443d46-2dcd-4322-8c41-f42fee87d03a" />
    <UnitTestResult executionId="8fca1618-cbef-4157-b58e-63b2cd868d32" testId="10ea8f13-31d5-1301-9d5c-fe9a17b3506f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:00:57.7574632" startTime="2025-06-21T12:04:36.2738742+00:00" endTime="2025-06-21T12:05:33.2189396+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8fca1618-cbef-4157-b58e-63b2cd868d32" />
    <UnitTestResult executionId="70a6a6ef-e512-4e1d-94e8-5fffb69a6387" testId="ba61da5c-22b4-4700-7eb9-99a5927e4d75" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_IEnumerable_ThrowsArgumentNullException_WhenPredicateIsNull" computerName="fv-az1057-923" duration="00:00:00.0006056" startTime="2025-06-21T12:04:36.6829249+00:00" endTime="2025-06-21T12:04:36.6832520+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70a6a6ef-e512-4e1d-94e8-5fffb69a6387" />
    <UnitTestResult executionId="1436a16a-9da4-4a9e-b795-2a12d2224332" testId="4dec8fad-aa01-b699-7ada-522a43d86674" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2284130" startTime="2025-06-21T12:04:34.7612139+00:00" endTime="2025-06-21T12:05:52.9436678+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1436a16a-9da4-4a9e-b795-2a12d2224332">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Field)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3e25850a-7e58-4156-95c3-1b9eb273e4b1" testId="100a3f0f-be9c-3b9e-8d66-32f58e52f949" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:19.4473361" startTime="2025-06-21T12:04:36.4057943+00:00" endTime="2025-06-21T12:05:55.0210920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e25850a-7e58-4156-95c3-1b9eb273e4b1" />
    <UnitTestResult executionId="53dc9d91-c01d-4cbc-a4c5-d8800cb2af63" testId="c734cf90-908a-824c-ca22-1766537f29b9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:08.8133141" startTime="2025-06-21T12:04:36.0442120+00:00" endTime="2025-06-21T12:05:44.2207009+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53dc9d91-c01d-4cbc-a4c5-d8800cb2af63" />
    <UnitTestResult executionId="d6dc96f8-3298-409d-bbba-fdb1c11db51f" testId="d4bc0b55-d81c-16cc-4b85-88d524f12092" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:00.9737062" startTime="2025-06-21T12:04:35.7307355+00:00" endTime="2025-06-21T12:05:36.1739023+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6dc96f8-3298-409d-bbba-fdb1c11db51f" />
    <UnitTestResult executionId="f3e238a8-b500-44ee-9e38-74c15ce2990d" testId="88550bbe-5d31-99b4-2fb8-bec6a6ca1654" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:55.5034404" startTime="2025-06-21T12:04:36.1413014+00:00" endTime="2025-06-21T12:05:30.9515853+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3e238a8-b500-44ee-9e38-74c15ce2990d" />
    <UnitTestResult executionId="c6e1dbeb-306c-4828-a853-04c1aeb61610" testId="715c2045-78f8-6498-cf0f-0b1a59ff7d3a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:01:04.3329042" startTime="2025-06-21T12:04:35.9287528+00:00" endTime="2025-06-21T12:05:39.6356847+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6e1dbeb-306c-4828-a853-04c1aeb61610" />
    <UnitTestResult executionId="4760f419-939a-4189-956b-8617bd70018d" testId="8c3bd743-6c3b-2348-a9c9-538f2fb75f25" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" computerName="fv-az1057-923" duration="00:01:10.9703574" startTime="2025-06-21T12:04:35.3750967+00:00" endTime="2025-06-21T12:05:45.9867583+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4760f419-939a-4189-956b-8617bd70018d" />
    <UnitTestResult executionId="27444666-f578-4f5c-b9b2-0d1ce0f0a7e5" testId="14c12f21-4075-88eb-9460-2437baed4796" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" computerName="fv-az1057-923" duration="00:00:52.2687916" startTime="2025-06-21T12:04:36.0095330+00:00" endTime="2025-06-21T12:05:27.6959829+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27444666-f578-4f5c-b9b2-0d1ce0f0a7e5" />
    <UnitTestResult executionId="a3532e48-432f-49fa-90c4-f857c28e4850" testId="4e837361-15e2-283a-113c-2f4c72a3f24d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:00:52.1257686" startTime="2025-06-21T12:04:35.9735558+00:00" endTime="2025-06-21T12:05:27.4639339+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3532e48-432f-49fa-90c4-f857c28e4850" />
    <UnitTestResult executionId="e630fced-1ed5-4a14-a0a8-6ce7fe2d470f" testId="ff912f26-8dca-21ed-7f82-078a7352816b" testName="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditTypeInvalid" computerName="fv-az1057-923" duration="00:00:00.0011767" startTime="2025-06-21T12:04:34.7745999+00:00" endTime="2025-06-21T12:04:34.7750149+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e630fced-1ed5-4a14-a0a8-6ce7fe2d470f" />
    <UnitTestResult executionId="29a73868-ad3f-4246-b05d-a1d601458fff" testId="47756e6e-5572-5939-e9bd-8bb7f23cf648" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:18.7067054" startTime="2025-06-21T12:04:35.3706281+00:00" endTime="2025-06-21T12:05:53.7309170+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29a73868-ad3f-4246-b05d-a1d601458fff" />
    <UnitTestResult executionId="9be49b26-b174-40d7-a707-eb46d6b4c2b7" testId="a31557a8-beaa-0773-d840-9dac7df7c016" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:57.1321422" startTime="2025-06-21T12:04:36.0570707+00:00" endTime="2025-06-21T12:05:32.5499697+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9be49b26-b174-40d7-a707-eb46d6b4c2b7" />
    <UnitTestResult executionId="5674e499-4c69-4ae0-a685-46d5f6083d00" testId="cfc38294-35a4-4131-c56e-114bcb0a43e1" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:07.2299980" startTime="2025-06-21T12:04:34.9584792+00:00" endTime="2025-06-21T12:05:42.0548727+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5674e499-4c69-4ae0-a685-46d5f6083d00" />
    <UnitTestResult executionId="2ff14648-08b9-4661-b854-1000cd34f907" testId="9e96b658-7822-a4c7-f2fe-269b62959fe0" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:00.2680789" startTime="2025-06-21T12:04:35.1147361+00:00" endTime="2025-06-21T12:05:35.1633830+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ff14648-08b9-4661-b854-1000cd34f907" />
    <UnitTestResult executionId="bdac2c9a-de10-4b5b-bcb0-92d6d9463b9e" testId="dc08abf5-2534-c408-1e7f-8412f44e2aa5" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:03.4375386" startTime="2025-06-21T12:04:35.9630235+00:00" endTime="2025-06-21T12:05:38.7658896+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bdac2c9a-de10-4b5b-bcb0-92d6d9463b9e">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2de6a6e2-79ca-4b31-aac3-5e44f61bc7ac" testId="7a5c79bd-8bb2-bd7b-59e6-009860cf60df" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:13.8912748" startTime="2025-06-21T12:04:36.5637060+00:00" endTime="2025-06-21T12:05:49.5741819+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2de6a6e2-79ca-4b31-aac3-5e44f61bc7ac" />
    <UnitTestResult executionId="a9910230-43cf-43b2-ac77-20745ee9c5dd" testId="2f6638af-638b-157c-d110-94e98abdf32a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8240919" startTime="2025-06-21T12:04:36.3507409+00:00" endTime="2025-06-21T12:05:55.3289204+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a9910230-43cf-43b2-ac77-20745ee9c5dd" />
    <UnitTestResult executionId="5a560794-9c44-404f-ab1f-214f78bfadb2" testId="f5454d72-4d22-f9cb-b404-612dd1ebd902" testName="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var repository = new MockRepository(MockBehavior.S&quot;···)" computerName="fv-az1057-923" duration="00:01:22.8160527" startTime="2025-06-21T12:04:35.1036102+00:00" endTime="2025-06-21T12:05:57.6976217+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a560794-9c44-404f-ab1f-214f78bfadb2" />
    <UnitTestResult executionId="3fbcf99e-7c0b-4b44-8b41-af6d04e71a10" testId="51871a82-043e-bbdc-6bb9-dc80514a6346" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" computerName="fv-az1057-923" duration="00:00:54.3943529" startTime="2025-06-21T12:04:36.1959374+00:00" endTime="2025-06-21T12:05:29.8480909+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3fbcf99e-7c0b-4b44-8b41-af6d04e71a10" />
    <UnitTestResult executionId="a519619b-6548-4500-8932-5536f40aa22c" testId="3d2ba7f4-0a56-3cd4-649b-8b437defa9f5" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:09.0103056" startTime="2025-06-21T12:04:34.9548083+00:00" endTime="2025-06-21T12:05:43.8258816+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a519619b-6548-4500-8932-5536f40aa22c" />
    <UnitTestResult executionId="65fb2f4d-2443-455a-bff6-403305501b89" testId="9c7c701e-5336-659b-030a-04afc9dd817e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.7490663" startTime="2025-06-21T12:04:35.2193848+00:00" endTime="2025-06-21T12:05:45.7321243+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65fb2f4d-2443-455a-bff6-403305501b89" />
    <UnitTestResult executionId="936ac37a-67c9-410e-aa92-13b5a6d614f1" testId="fc516c4a-cbc6-591d-4131-0c15440ddcb3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8272424" startTime="2025-06-21T12:04:36.3445101+00:00" endTime="2025-06-21T12:05:55.3451039+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="936ac37a-67c9-410e-aa92-13b5a6d614f1" />
    <UnitTestResult executionId="5aac3be7-9d8a-404c-9dc7-d7dceb0ec4da" testId="230078b2-43f6-3c9f-fcac-c42b7a1b7aec" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:00:58.6371967" startTime="2025-06-21T12:04:37.0475573+00:00" endTime="2025-06-21T12:05:34.3526448+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5aac3be7-9d8a-404c-9dc7-d7dceb0ec4da">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.Is&lt;int&gt;(i =&gt; i &gt; 0), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c858c7d-9ed0-405f-94a5-df064f6a3b2f" testId="904e2066-1d2b-b1bb-a20d-0cfbeb0d9ec1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:02.6105576" startTime="2025-06-21T12:04:36.3876859+00:00" endTime="2025-06-21T12:05:38.1263240+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c858c7d-9ed0-405f-94a5-df064f6a3b2f" />
    <UnitTestResult executionId="5a984d5f-95b0-401e-8fdd-76a2e7e4819d" testId="e542a309-f317-a569-1cd9-cfc79ac2c64e" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.ProcessR&quot;···)" computerName="fv-az1057-923" duration="00:01:01.2479186" startTime="2025-06-21T12:04:35.9409078+00:00" endTime="2025-06-21T12:05:36.5831897+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a984d5f-95b0-401e-8fdd-76a2e7e4819d">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.ProcessRef(ref It.Ref&lt;int&gt;.IsAny)).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5db02632-1b64-4772-a115-c915184300be" testId="2bd0ae2e-db62-f369-96c2-9578d90b0eb9" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:16.6251038" startTime="2025-06-21T12:04:35.4494465+00:00" endTime="2025-06-21T12:05:51.7080343+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5db02632-1b64-4772-a115-c915184300be" />
    <UnitTestResult executionId="6d91853d-3fdb-413e-91ba-fff0b5c91e8d" testId="e77a1b9a-b0f3-32dd-9c2f-3ca98bda9fb3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.2043613" startTime="2025-06-21T12:04:36.6164824+00:00" endTime="2025-06-21T12:05:49.8481701+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d91853d-3fdb-413e-91ba-fff0b5c91e8d" />
    <UnitTestResult executionId="e8072254-8745-4440-b857-9cf97d514725" testId="e49fdeb7-c2b4-b72c-1b43-f91eae425213" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:18.1508311" startTime="2025-06-21T12:04:35.1443195+00:00" endTime="2025-06-21T12:05:53.0878954+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8072254-8745-4440-b857-9cf97d514725" />
    <UnitTestResult executionId="d33c6c21-3043-43f2-a56f-bbf20e754f52" testId="743ab1f8-3990-c7b2-d6b5-9201c5391dd4" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:17.3329116" startTime="2025-06-21T12:04:36.9912171+00:00" endTime="2025-06-21T12:05:53.0543766+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d33c6c21-3043-43f2-a56f-bbf20e754f52">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="65f77848-ba54-4d66-8df9-132ac368792f" testId="9cd80a49-6e32-35ee-b6f1-3bea264bdfcc" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:12.0228445" startTime="2025-06-21T12:04:34.6505490+00:00" endTime="2025-06-21T12:05:46.6120432+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65f77848-ba54-4d66-8df9-132ac368792f" />
    <UnitTestResult executionId="92c36b39-f24a-4dd6-bfe1-290f4e0799c0" testId="024227c9-f923-22d9-ff3c-b67ce23baece" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:00:59.4595388" startTime="2025-06-21T12:04:35.0853209+00:00" endTime="2025-06-21T12:05:34.3265440+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92c36b39-f24a-4dd6-bfe1-290f4e0799c0" />
    <UnitTestResult executionId="66af2787-182a-4166-b886-2c2f30c2f284" testId="7390f7b8-d477-bf52-2ded-5dcba132951f" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" computerName="fv-az1057-923" duration="00:01:07.2677549" startTime="2025-06-21T12:04:36.7045657+00:00" endTime="2025-06-21T12:05:42.9265868+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66af2787-182a-4166-b886-2c2f30c2f284">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80c2038f-9aeb-44e9-9e83-aafb6a16dd5b" testId="1f1b8769-970f-92ac-3774-0d8a7401244e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.3488367" startTime="2025-06-21T12:04:35.4146166+00:00" endTime="2025-06-21T12:05:50.4160920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80c2038f-9aeb-44e9-9e83-aafb6a16dd5b" />
    <UnitTestResult executionId="6aa53bae-66e7-4fcc-9c7e-c7e1b85e2ccc" testId="9cfb7bf9-e772-a042-c11b-dff2cda49f62" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" computerName="fv-az1057-923" duration="00:00:52.9670980" startTime="2025-06-21T12:04:35.9564430+00:00" endTime="2025-06-21T12:05:28.2769047+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6aa53bae-66e7-4fcc-9c7e-c7e1b85e2ccc" />
    <UnitTestResult executionId="7cb38ebf-1b03-47ce-bc1a-2a61871cede6" testId="fbdd4432-a0a4-9fbd-69ef-ea8091f13b7a" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" computerName="fv-az1057-923" duration="00:01:04.6924078" startTime="2025-06-21T12:04:35.8173828+00:00" endTime="2025-06-21T12:05:39.9492174+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7cb38ebf-1b03-47ce-bc1a-2a61871cede6" />
    <UnitTestResult executionId="dfe95d20-a594-45e1-8ccb-17206aa6fc78" testId="8cf13320-6d6d-9d1b-ca67-369bde33cd8e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8193986" startTime="2025-06-21T12:04:36.3691578+00:00" endTime="2025-06-21T12:05:55.3245462+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dfe95d20-a594-45e1-8ccb-17206aa6fc78" />
    <UnitTestResult executionId="4bbe8220-2e36-48c2-8509-471b0b0b245d" testId="f43e6809-eb14-3b12-a789-e94127015d35" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" computerName="fv-az1057-923" duration="00:01:12.1127647" startTime="2025-06-21T12:04:34.8674523+00:00" endTime="2025-06-21T12:05:46.8913031+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bbe8220-2e36-48c2-8509-471b0b0b245d" />
    <UnitTestResult executionId="fd35c69c-324c-4ce2-b6ee-a45824fd2b53" testId="d28d7174-9304-13b9-f788-5c17b8224008" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.5022088" startTime="2025-06-21T12:04:35.5479135+00:00" endTime="2025-06-21T12:05:36.6011622+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd35c69c-324c-4ce2-b6ee-a45824fd2b53" />
    <UnitTestResult executionId="98c3986c-000a-482d-bc91-26460af32601" testId="d10ce0a2-7793-e3e1-f49f-df2dcdd01162" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:01:10.8892585" startTime="2025-06-21T12:04:37.0140614+00:00" endTime="2025-06-21T12:05:46.5989256+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98c3986c-000a-482d-bc91-26460af32601" />
    <UnitTestResult executionId="30dea194-9cd1-4a9c-89ae-ea81c51f718f" testId="cbcba8bf-1ccc-76cb-86fd-588596f51f86" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" computerName="fv-az1057-923" duration="00:01:14.2409968" startTime="2025-06-21T12:04:36.7126359+00:00" endTime="2025-06-21T12:05:50.0686741+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30dea194-9cd1-4a9c-89ae-ea81c51f718f">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5f994658-ad69-438e-a1fd-0483f5b88167" testId="889b0366-b4cb-d05e-789e-186a1da0ce38" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:52.1200677" startTime="2025-06-21T12:04:36.1036137+00:00" endTime="2025-06-21T12:05:27.5589666+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f994658-ad69-438e-a1fd-0483f5b88167" />
    <UnitTestResult executionId="3c07bd0d-45e8-4d08-935b-04e4d51629d0" testId="327a8bcf-5641-88ce-f631-89a2acd1fed4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2120731" startTime="2025-06-21T12:04:36.5927027+00:00" endTime="2025-06-21T12:05:53.8389709+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c07bd0d-45e8-4d08-935b-04e4d51629d0" />
    <UnitTestResult executionId="151e5373-ece3-4b78-a57e-a4d0bd76bb90" testId="fd739bd7-051e-8600-d623-c94401c4afde" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:15.8124893" startTime="2025-06-21T12:04:36.6193267+00:00" endTime="2025-06-21T12:05:51.4334416+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="151e5373-ece3-4b78-a57e-a4d0bd76bb90" />
    <UnitTestResult executionId="6a2e73e6-5f78-4af3-b2ae-32413c3b497e" testId="0838f303-9f0c-2a9a-0918-b16a3adacea1" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" computerName="fv-az1057-923" duration="00:01:14.8172887" startTime="2025-06-21T12:04:35.8084915+00:00" endTime="2025-06-21T12:05:50.1122282+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a2e73e6-5f78-4af3-b2ae-32413c3b497e" />
    <UnitTestResult executionId="f4ca87e9-5069-4aa8-9f86-c2845120b3ec" testId="954e8a58-6ead-1a00-543e-e75ea0a5366b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:18.7113599" startTime="2025-06-21T12:04:36.4323908+00:00" endTime="2025-06-21T12:05:54.3174185+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4ca87e9-5069-4aa8-9f86-c2845120b3ec" />
    <UnitTestResult executionId="a845ee2c-20d5-46c3-9d41-04408beba5bc" testId="8bafc3a3-fa8e-8479-cb4f-7d0d2b50763d" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:18.0026993" startTime="2025-06-21T12:04:34.6159741+00:00" endTime="2025-06-21T12:05:52.5660768+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a845ee2c-20d5-46c3-9d41-04408beba5bc" />
    <UnitTestResult executionId="1a244a52-cc63-4c07-b3b1-7f77ab3b425a" testId="a33bf16d-3acf-1fd2-48a7-d0e981840f13" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" computerName="fv-az1057-923" duration="00:01:15.2335267" startTime="2025-06-21T12:04:36.7276477+00:00" endTime="2025-06-21T12:05:50.8945263+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a244a52-cc63-4c07-b3b1-7f77ab3b425a">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd5bc77f-4df9-4876-a87e-0aaea1d25690" testId="88b4fbd9-0da6-3423-43dd-b294282f6a10" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" computerName="fv-az1057-923" duration="00:01:18.9476825" startTime="2025-06-21T12:04:35.4199632+00:00" endTime="2025-06-21T12:05:54.0983107+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd5bc77f-4df9-4876-a87e-0aaea1d25690" />
    <UnitTestResult executionId="23cb54db-acea-4d54-9d70-5d61c3a83301" testId="c0f0b713-73a9-6c8b-d763-d97f0f6e089f" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:07.5289748" startTime="2025-06-21T12:04:35.0192234+00:00" endTime="2025-06-21T12:05:42.3742846+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23cb54db-acea-4d54-9d70-5d61c3a83301">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws&lt;InvalidOperationException&gt;();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a6436c73-e6e9-4268-8be7-7f3b44930d68" testId="e24a7b26-0ace-c455-f0c6-478137288d66" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:19.1171954" startTime="2025-06-21T12:04:35.6423091+00:00" endTime="2025-06-21T12:05:54.2301171+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6436c73-e6e9-4268-8be7-7f3b44930d68" />
    <UnitTestResult executionId="fb4c2091-10b6-4a46-a749-58ad829d316d" testId="6c541383-90dc-59ed-8808-2c2e8425d067" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:00:53.0200181" startTime="2025-06-21T12:04:35.0881934+00:00" endTime="2025-06-21T12:05:27.8915536+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb4c2091-10b6-4a46-a749-58ad829d316d" />
    <UnitTestResult executionId="29f484f7-92e9-4ae7-95b4-0138122fcbd3" testId="a0a30046-4ea8-3d94-2b8e-0a8a2861fc61" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true, MockBehavior.&quot;···)" computerName="fv-az1057-923" duration="00:00:52.8373446" startTime="2025-06-21T12:04:36.0214814+00:00" endTime="2025-06-21T12:05:28.2394618+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29f484f7-92e9-4ae7-95b4-0138122fcbd3" />
    <UnitTestResult executionId="a1b0cce5-1ad2-434f-b316-da106d2a2d21" testId="fabf2558-bad1-97da-0a55-ca7469f4efda" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:57.8689571" startTime="2025-06-21T12:04:35.2219937+00:00" endTime="2025-06-21T12:05:32.8555619+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a1b0cce5-1ad2-434f-b316-da106d2a2d21" />
    <UnitTestResult executionId="7d52c069-f5a1-4985-9834-dc8da5914857" testId="94860150-aab6-61ad-d5cd-3e85a63faae8" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:17.4894169" startTime="2025-06-21T12:04:35.7845395+00:00" endTime="2025-06-21T12:05:52.7701113+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d52c069-f5a1-4985-9834-dc8da5914857" />
    <UnitTestResult executionId="886b65a2-b896-456a-b509-795ff55d05bf" testId="36f4dedc-629c-e2b0-d37c-bf5c5ccef2ab" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.9846862" startTime="2025-06-21T12:04:36.5995865+00:00" endTime="2025-06-21T12:05:51.6075393+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="886b65a2-b896-456a-b509-795ff55d05bf" />
    <UnitTestResult executionId="b15f2426-5eb7-4594-b3dc-bde020d30bf7" testId="b5e2d12e-b639-e948-c820-a1b85567db22" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" computerName="fv-az1057-923" duration="00:01:10.5158552" startTime="2025-06-21T12:04:35.2846183+00:00" endTime="2025-06-21T12:05:45.5070676+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b15f2426-5eb7-4594-b3dc-bde020d30bf7">
      <Output>
        <StdOut>namespace MyNamespace;

public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8943a51d-14c2-400d-98b0-a131fbe2d2de" testId="8182a0a9-43ea-20ff-a4f9-380b8bdefbb6" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:13.8981277" startTime="2025-06-21T12:04:35.7063948+00:00" endTime="2025-06-21T12:05:49.0941025+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8943a51d-14c2-400d-98b0-a131fbe2d2de" />
    <UnitTestResult executionId="2b524b75-ba1c-40b9-8b91-875ee8029bfb" testId="a1370a40-2257-15d8-a79c-e0b0066172e8" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" computerName="fv-az1057-923" duration="00:01:13.8431850" startTime="2025-06-21T12:04:34.6995854+00:00" endTime="2025-06-21T12:05:48.5617123+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b524b75-ba1c-40b9-8b91-875ee8029bfb">
      <Output>
        <StdOut>Original:


public class MyClass
{
    public int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:


public class MyClass
{
    public virtual int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8f5ee89a-3be3-40ed-8490-ac2613ff4e67" testId="c06e12ab-6e5c-1105-d97b-4a96cc9b10c7" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:12.3188549" startTime="2025-06-21T12:04:34.6712371+00:00" endTime="2025-06-21T12:05:46.9799719+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f5ee89a-3be3-40ed-8490-ac2613ff4e67" />
    <UnitTestResult executionId="e5683700-d12e-4ea8-a678-e301c640b68c" testId="1d0b25b3-5c07-0a7e-a6af-d2a3fc39575e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.1409287" startTime="2025-06-21T12:04:35.6616201+00:00" endTime="2025-06-21T12:05:49.2879901+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e5683700-d12e-4ea8-a678-e301c640b68c" />
    <UnitTestResult executionId="a834ca93-2371-40a7-897a-335075995b6d" testId="f37721cf-0139-76dd-8f3a-ee43609c9bf3" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:02.7204928" startTime="2025-06-21T12:04:35.7736865+00:00" endTime="2025-06-21T12:05:37.9429001+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a834ca93-2371-40a7-897a-335075995b6d" />
    <UnitTestResult executionId="8f5d510e-d35c-4185-83fe-0210b8cd5ef8" testId="773ca150-1c99-8d35-2db0-31dcd92e2928" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.De&quot;···)" computerName="fv-az1057-923" duration="00:00:52.3221230" startTime="2025-06-21T12:04:36.0974609+00:00" endTime="2025-06-21T12:05:27.7498082+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f5d510e-d35c-4185-83fe-0210b8cd5ef8" />
    <UnitTestResult executionId="20982bb4-b7d7-4d03-9585-9b5a149f0575" testId="a3151eb1-f0e1-e363-513b-78be289586d9" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:01:01.5102993" startTime="2025-06-21T12:04:35.4396034+00:00" endTime="2025-06-21T12:05:36.5901166+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20982bb4-b7d7-4d03-9585-9b5a149f0575" />
    <UnitTestResult executionId="0ea220ae-9b13-4be2-a4ce-e867edc62237" testId="7f4945f6-205f-77ad-da12-74c532b9029c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.6586101" startTime="2025-06-21T12:04:36.5941139+00:00" endTime="2025-06-21T12:05:50.2508013+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ea220ae-9b13-4be2-a4ce-e867edc62237" />
    <UnitTestResult executionId="0643c714-ea39-4f86-aacb-3873c307245b" testId="2b582f6b-d891-0a58-1dde-49196bc82626" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3155312" startTime="2025-06-21T12:04:35.9446300+00:00" endTime="2025-06-21T12:05:54.6397441+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0643c714-ea39-4f86-aacb-3873c307245b">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a90d4fc0-55a7-4a85-88fa-d009ec74e5c6" testId="ef271cf1-b26e-fce0-565c-0fbac50cfb9f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" computerName="fv-az1057-923" duration="00:01:12.8435076" startTime="2025-06-21T12:04:36.6068109+00:00" endTime="2025-06-21T12:05:48.4575909+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a90d4fc0-55a7-4a85-88fa-d009ec74e5c6" />
    <UnitTestResult executionId="b30e422f-3556-45ff-b30c-013edb0e2b32" testId="e84dbdbf-65d6-5843-0fd2-43cf7edc90ff" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2440007" startTime="2025-06-21T12:04:34.9513360+00:00" endTime="2025-06-21T12:05:53.0559200+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b30e422f-3556-45ff-b30c-013edb0e2b32" />
    <UnitTestResult executionId="c36e8bd6-c36a-4aa3-b524-c8745ef9bb95" testId="05802647-1477-f0ea-8343-365e87b92734" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:13.5016895" startTime="2025-06-21T12:04:35.7678263+00:00" endTime="2025-06-21T12:05:48.7164006+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c36e8bd6-c36a-4aa3-b524-c8745ef9bb95" />
    <UnitTestResult executionId="d3fb8313-64de-4f64-8c4c-6f554a3c1753" testId="cf92442f-ffcf-37b1-c863-bf9eb26ddea8" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:08.3224335" startTime="2025-06-21T12:04:34.8966195+00:00" endTime="2025-06-21T12:05:43.1164584+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3fb8313-64de-4f64-8c4c-6f554a3c1753" />
    <UnitTestResult executionId="9bb04602-c8c0-47a7-b228-23ea530112d8" testId="ddd2a97a-bc3f-c9ba-5d0c-8c0971f279f4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" computerName="fv-az1057-923" duration="00:01:16.0418224" startTime="2025-06-21T12:04:36.4007884+00:00" endTime="2025-06-21T12:05:51.5721166+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9bb04602-c8c0-47a7-b228-23ea530112d8" />
    <UnitTestResult executionId="53eca9f7-14e6-49c9-b170-e8e59035ab5e" testId="66ae5b97-fd9e-0eb1-8a7b-146a8f553367" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleReferenceTypeConstraints" computerName="fv-az1057-923" duration="00:01:03.7227655" startTime="2025-06-21T12:04:35.1433313+00:00" endTime="2025-06-21T12:05:38.6526432+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53eca9f7-14e6-49c9-b170-e8e59035ab5e" />
    <UnitTestResult executionId="87142895-0592-4cb2-80ed-6f62056154cc" testId="25493034-5dbd-c0bc-638d-4771a3382808" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:00:55.0924547" startTime="2025-06-21T12:04:36.3462367+00:00" endTime="2025-06-21T12:05:30.5895307+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87142895-0592-4cb2-80ed-6f62056154cc" />
    <UnitTestResult executionId="a508248d-a9f9-429d-a0e8-a99bd69ac74d" testId="c056e857-086e-0025-dba3-a73690f313b4" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:01:08.7787029" startTime="2025-06-21T12:04:35.1734280+00:00" endTime="2025-06-21T12:05:43.7246345+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a508248d-a9f9-429d-a0e8-a99bd69ac74d" />
    <UnitTestResult executionId="25ac6232-754b-4874-b556-675c7c46828f" testId="0aac1784-6140-8d0d-572d-b46a5f0aef12" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:07.4136300" startTime="2025-06-21T12:04:34.5889966+00:00" endTime="2025-06-21T12:05:41.9748851+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25ac6232-754b-4874-b556-675c7c46828f" />
    <UnitTestResult executionId="83b11b47-d397-4a33-a2a5-3739c5a6d2a7" testId="ffbb2759-881a-8546-5819-63aa68753edc" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:05.2129462" startTime="2025-06-21T12:04:35.8526579+00:00" endTime="2025-06-21T12:05:40.4871554+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="83b11b47-d397-4a33-a2a5-3739c5a6d2a7">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b50bd2ec-5029-45e7-8243-234888a30f7f" testId="19157238-7c0b-1224-6660-150112fca887" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:02.3953212" startTime="2025-06-21T12:04:35.8626569+00:00" endTime="2025-06-21T12:05:37.6709618+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b50bd2ec-5029-45e7-8243-234888a30f7f">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d5c0caf-c73e-4496-b794-cd8713fe7559" testId="49fee0d3-3f47-4b49-760d-291fc3bbcf3c" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1736068" startTime="2025-06-21T12:04:35.8329191+00:00" endTime="2025-06-21T12:05:53.4980118+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d5c0caf-c73e-4496-b794-cd8713fe7559" />
    <UnitTestResult executionId="fa953b2d-3294-46d4-9d45-27a98cb9a510" testId="1366124f-a0a4-6407-f1b7-71992325470b" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" computerName="fv-az1057-923" duration="00:01:03.4419318" startTime="2025-06-21T12:04:37.0626771+00:00" endTime="2025-06-21T12:05:39.1675622+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa953b2d-3294-46d4-9d45-27a98cb9a510">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetString(It.IsRegex(@"\d+")));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="40ee702f-c2fa-49bd-9869-7a508d64d198" testId="9b8540ed-99d0-8d90-8c0a-93cf07afe4f0" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:13.0910693" startTime="2025-06-21T12:04:35.4021849+00:00" endTime="2025-06-21T12:05:48.1770987+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40ee702f-c2fa-49bd-9869-7a508d64d198" />
    <UnitTestResult executionId="a68dfeef-807b-446d-bc39-cc80d8032ed7" testId="b3a714bd-e8cd-ee9c-9774-197ad90df4e0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:52.9793280" startTime="2025-06-21T12:04:36.2722144+00:00" endTime="2025-06-21T12:05:28.4380902+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a68dfeef-807b-446d-bc39-cc80d8032ed7" />
    <UnitTestResult executionId="0984e81c-81e3-4ef7-a557-4cd8bec00040" testId="74aab28f-9f7c-46c7-87ed-fa6a7f36642a" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" computerName="fv-az1057-923" duration="00:01:01.3439269" startTime="2025-06-21T12:04:35.0000781+00:00" endTime="2025-06-21T12:05:36.1858927+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0984e81c-81e3-4ef7-a557-4cd8bec00040">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Returns(10);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="897c2a39-0835-4f36-8fad-72fc0dc83042" testId="10698101-8058-780a-88d2-dd65efcd2621" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" computerName="fv-az1057-923" duration="00:01:01.7095916" startTime="2025-06-21T12:04:35.9130211+00:00" endTime="2025-06-21T12:05:37.0302727+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="897c2a39-0835-4f36-8fad-72fc0dc83042" />
    <UnitTestResult executionId="f6860a90-1e70-448b-a2c2-589d75bc955f" testId="e7234340-5176-4932-3ed6-447e2c37536e" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:19.1193655" startTime="2025-06-21T12:04:35.7768136+00:00" endTime="2025-06-21T12:05:54.3818803+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6860a90-1e70-448b-a2c2-589d75bc955f" />
    <UnitTestResult executionId="16ddc6a8-29a2-440c-beac-0e3e73ad3264" testId="229e9b16-e733-9d49-76a6-5f3e08da7955" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:13.2217220" startTime="2025-06-21T12:04:36.5824863+00:00" endTime="2025-06-21T12:05:48.8129113+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16ddc6a8-29a2-440c-beac-0e3e73ad3264" />
    <UnitTestResult executionId="56105ec7-0c23-493e-9a95-5091de5d879b" testId="c1109307-4fc8-fe76-7e79-6ffef5d830f3" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.5888151" startTime="2025-06-21T12:04:35.7671821+00:00" endTime="2025-06-21T12:05:47.8239094+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56105ec7-0c23-493e-9a95-5091de5d879b" />
    <UnitTestResult executionId="e6927b94-f15e-43f4-9a17-1eabe12a8c19" testId="e46ae564-062e-58fc-bf93-4797f4242118" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:00:56.1856156" startTime="2025-06-21T12:04:37.0182179+00:00" endTime="2025-06-21T12:05:31.8858842+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e6927b94-f15e-43f4-9a17-1eabe12a8c19" />
    <UnitTestResult executionId="16fc437b-6c60-4d19-b807-3dad53d3aef5" testId="18152db1-5233-250f-08aa-23f8de301626" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:15.3795683" startTime="2025-06-21T12:04:36.4169447+00:00" endTime="2025-06-21T12:05:51.0321455+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16fc437b-6c60-4d19-b807-3dad53d3aef5" />
    <UnitTestResult executionId="296f4580-118a-4cde-b75e-478a61988382" testId="8119c33c-b292-27e3-424e-2ee04ff5f20f" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new MockRepository(MockBehavior.Loose);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:00:59.9736884" startTime="2025-06-21T12:04:35.8053573+00:00" endTime="2025-06-21T12:05:35.2271437+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="296f4580-118a-4cde-b75e-478a61988382">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Loose);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a786031-6e92-4c55-a996-1abb0f32cc73" testId="5271f309-01fa-634b-903f-aec0bc3b5e99" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:14.4448025" startTime="2025-06-21T12:04:34.9483596+00:00" endTime="2025-06-21T12:05:49.2574550+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a786031-6e92-4c55-a996-1abb0f32cc73" />
    <UnitTestResult executionId="41fdde48-d38a-423f-8753-4065c5595051" testId="9c7bf3c9-23a3-628c-6c88-0ff4e102484d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:13.1618105" startTime="2025-06-21T12:04:36.5248664+00:00" endTime="2025-06-21T12:05:48.7416286+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41fdde48-d38a-423f-8753-4065c5595051" />
    <UnitTestResult executionId="cf691ed4-c280-45ab-9861-a29613dc2b0f" testId="6390bfb3-5ac1-f269-5941-31667a25464d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" computerName="fv-az1057-923" duration="00:01:14.6186771" startTime="2025-06-21T12:04:36.2905358+00:00" endTime="2025-06-21T12:05:50.1361949+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf691ed4-c280-45ab-9861-a29613dc2b0f" />
    <UnitTestResult executionId="23803b28-5e9d-457b-b468-52fb0addf904" testId="2d984321-6e2b-fae6-a746-959bc2dd7d33" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:01:18.5263734" startTime="2025-06-21T12:04:35.0773810+00:00" endTime="2025-06-21T12:05:53.3928727+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23803b28-5e9d-457b-b468-52fb0addf904" />
    <UnitTestResult executionId="f4984901-6a46-4cc7-a95b-f529a3616c23" testId="0367878b-7833-fce6-919c-7b0e4fbcc777" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.7368715" startTime="2025-06-21T12:04:36.5968593+00:00" endTime="2025-06-21T12:05:52.4149065+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4984901-6a46-4cc7-a95b-f529a3616c23" />
    <UnitTestResult executionId="cbe50f73-6e91-4a07-aba9-e72d7b203b39" testId="7f1c9860-2c13-e95b-bd48-2dc911bcd5ad" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" computerName="fv-az1057-923" duration="00:01:18.7707396" startTime="2025-06-21T12:04:35.0133996+00:00" endTime="2025-06-21T12:05:53.6336737+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cbe50f73-6e91-4a07-aba9-e72d7b203b39">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test"))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="427b60cd-dfa1-4d8d-979f-fce675cd578e" testId="3d770abc-1d13-2067-42ad-f78ca16b8497" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x&quot;···)" computerName="fv-az1057-923" duration="00:01:05.0857307" startTime="2025-06-21T12:04:35.8536919+00:00" endTime="2025-06-21T12:05:40.3835392+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="427b60cd-dfa1-4d8d-979f-fce675cd578e">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8ee3e70a-3a7e-4a30-b773-69451fd0915a" testId="988291f9-5719-8f5f-5fb3-40ee25afeb76" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:00.7855099" startTime="2025-06-21T12:04:36.2911854+00:00" endTime="2025-06-21T12:05:36.3600485+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ee3e70a-3a7e-4a30-b773-69451fd0915a" />
    <UnitTestResult executionId="5eb9c8b1-90f8-4c7d-9c1d-08317fbf8d9f" testId="697d094b-7974-45c3-a631-a7b586f9a1dd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.2208577" startTime="2025-06-21T12:04:36.5962584+00:00" endTime="2025-06-21T12:05:48.8379660+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5eb9c8b1-90f8-4c7d-9c1d-08317fbf8d9f" />
    <UnitTestResult executionId="88867df8-9a76-4b74-8df5-bef2c8aa5f20" testId="5c9d96a9-ca93-c973-0227-d860e5d405da" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" computerName="fv-az1057-923" duration="00:01:05.1255495" startTime="2025-06-21T12:04:35.8517824+00:00" endTime="2025-06-21T12:05:40.4010321+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88867df8-9a76-4b74-8df5-bef2c8aa5f20" />
    <UnitTestResult executionId="77f92a3d-8277-43ed-a79b-ba10d6439d45" testId="1ed41a3a-44cc-593e-e104-426128ec5b3d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.6023150" startTime="2025-06-21T12:04:35.6745653+00:00" endTime="2025-06-21T12:05:51.7879466+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77f92a3d-8277-43ed-a79b-ba10d6439d45" />
    <UnitTestResult executionId="c9b88d9d-821e-4221-83cc-a4670a5e1286" testId="d33dd306-5d41-18e4-6471-146964822556" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:04.3624856" startTime="2025-06-21T12:04:37.0267247+00:00" endTime="2025-06-21T12:05:40.0660530+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9b88d9d-821e-4221-83cc-a4670a5e1286" />
    <UnitTestResult executionId="0be87cc9-980a-47ab-a154-1ce5f6f29353" testId="edba1135-a0fa-d876-9c47-5c21a52e050d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:51.4082494" startTime="2025-06-21T12:04:36.0501672+00:00" endTime="2025-06-21T12:05:26.8229547+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0be87cc9-980a-47ab-a154-1ce5f6f29353" />
    <UnitTestResult executionId="5ad75454-9996-4d91-bfc2-d24514036e54" testId="515670f0-9475-f984-c503-3d5c984c01f0" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:07.7822084" startTime="2025-06-21T12:04:35.2153468+00:00" endTime="2025-06-21T12:05:42.8125515+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ad75454-9996-4d91-bfc2-d24514036e54" />
    <UnitTestResult executionId="02978061-cf34-43d0-887d-4623869344c6" testId="09dc2407-3e60-4cc0-319c-334426f99aef" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2885045" startTime="2025-06-21T12:04:34.6719518+00:00" endTime="2025-06-21T12:05:51.9511696+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02978061-cf34-43d0-887d-4623869344c6" />
    <UnitTestResult executionId="4bc9499f-b8da-4b88-be1c-74a65b256003" testId="3a92fab6-3431-8641-33a3-8262921c2731" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:15.9725368" startTime="2025-06-21T12:04:36.5934170+00:00" endTime="2025-06-21T12:05:51.6079690+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bc9499f-b8da-4b88-be1c-74a65b256003" />
    <UnitTestResult executionId="01984fe3-41de-45e1-ad60-9bae342d461d" testId="0e51c77f-5082-7ed7-d2a1-ab8f2290fb20" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:58.8327077" startTime="2025-06-21T12:04:35.2170851+00:00" endTime="2025-06-21T12:05:33.8016456+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01984fe3-41de-45e1-ad60-9bae342d461d" />
    <UnitTestResult executionId="5b97310d-43a2-495d-8890-9a75a88d028c" testId="1191b40c-1b4c-d64b-07cd-72db1033e655" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:11.7053847" startTime="2025-06-21T12:04:36.6272132+00:00" endTime="2025-06-21T12:05:47.3125982+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b97310d-43a2-495d-8890-9a75a88d028c">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b97e8f66-ee56-4d82-bd3e-dbb8cc000b9b" testId="780d9a91-2047-aa32-c289-339d19d711a1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:15.6865265" startTime="2025-06-21T12:04:36.4779501+00:00" endTime="2025-06-21T12:05:51.2755588+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b97e8f66-ee56-4d82-bd3e-dbb8cc000b9b" />
    <UnitTestResult executionId="e08ec6ce-e8ed-419f-ab75-c9e22ea47717" testId="ccd8c7cf-7fcd-45bf-5025-254761c9bebd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:01:19.6903911" startTime="2025-06-21T12:04:36.3685066+00:00" endTime="2025-06-21T12:05:55.2710078+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e08ec6ce-e8ed-419f-ab75-c9e22ea47717" />
    <UnitTestResult executionId="dd8758ca-447e-49ee-9f77-f8bfdea819c5" testId="714a4db2-1cd8-316f-be0c-7f0564afc450" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.5459082" startTime="2025-06-21T12:04:34.6228687+00:00" endTime="2025-06-21T12:05:46.1385072+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd8758ca-447e-49ee-9f77-f8bfdea819c5" />
    <UnitTestResult executionId="0555adc5-fc34-48aa-929c-bf6689174263" testId="1a0c9143-e66b-b7a3-35e1-dc372686090e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.5765397" startTime="2025-06-21T12:04:35.4538812+00:00" endTime="2025-06-21T12:05:47.6674123+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0555adc5-fc34-48aa-929c-bf6689174263" />
    <UnitTestResult executionId="bbaeaaaa-d4d6-4596-80fe-92640b102895" testId="154b074a-bba6-ad40-3c74-d79e0a8da8d4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:50.7556623" startTime="2025-06-21T12:04:36.3823962+00:00" endTime="2025-06-21T12:05:26.2710984+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bbaeaaaa-d4d6-4596-80fe-92640b102895" />
    <UnitTestResult executionId="3e195468-9b5a-46c5-ab66-fb3402302b02" testId="da35511f-e41f-285e-31d2-5f5ac07766d4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:56.9692762" startTime="2025-06-21T12:04:36.0536578+00:00" endTime="2025-06-21T12:05:32.3879065+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3e195468-9b5a-46c5-ab66-fb3402302b02" />
    <UnitTestResult executionId="665f3974-000c-490e-996c-e2c4aaccebc0" testId="cd5cbbc8-ee2c-b5ef-0a44-bc90c05fe183" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" computerName="fv-az1057-923" duration="00:01:18.0696795" startTime="2025-06-21T12:04:36.5956037+00:00" endTime="2025-06-21T12:05:53.6738858+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="665f3974-000c-490e-996c-e2c4aaccebc0" />
    <UnitTestResult executionId="0d5269fe-9dd1-4e9d-a676-4cfb43a27168" testId="ace266a9-510d-90a5-7961-8a2e627b504c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;IFoo foo;&quot;)" computerName="fv-az1057-923" duration="00:01:01.4668729" startTime="2025-06-21T12:04:35.8462721+00:00" endTime="2025-06-21T12:05:36.7662422+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d5269fe-9dd1-4e9d-a676-4cfb43a27168" />
    <UnitTestResult executionId="fb3715d5-a5dd-4ee4-94e4-5bdb146bbc46" testId="0e1b46f9-16b3-4bda-d35a-93b365478c06" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.7752466" startTime="2025-06-21T12:04:35.0185111+00:00" endTime="2025-06-21T12:05:43.6209005+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb3715d5-a5dd-4ee4-94e4-5bdb146bbc46" />
    <UnitTestResult executionId="954579a7-41f7-4d79-a442-90586953aa6c" testId="5ff9ccd3-9878-878c-127c-5b124e6c4917" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" computerName="fv-az1057-923" duration="00:01:13.2396609" startTime="2025-06-21T12:04:36.5848946+00:00" endTime="2025-06-21T12:05:48.8351100+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="954579a7-41f7-4d79-a442-90586953aa6c" />
    <UnitTestResult executionId="af7fc8ea-662d-4c3c-baa0-aa2ed4a42f3d" testId="a6be901f-8306-d244-f751-3bffce51e4b0" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:18.9599915" startTime="2025-06-21T12:04:36.6385411+00:00" endTime="2025-06-21T12:05:54.5765399+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af7fc8ea-662d-4c3c-baa0-aa2ed4a42f3d">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06c39cd5-f45f-4259-8682-6283ed1b81fb" testId="0665cb18-34c1-d2cb-497a-49cdc01d0a00" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.3605740" startTime="2025-06-21T12:04:35.4050717+00:00" endTime="2025-06-21T12:05:52.4362101+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06c39cd5-f45f-4259-8682-6283ed1b81fb" />
    <UnitTestResult executionId="a5dc40ea-25bb-4e20-a277-ce0d97c1ea43" testId="01af7f90-3f66-e7c1-4ba1-8c19e14429a3" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3323209" startTime="2025-06-21T12:04:34.9325108+00:00" endTime="2025-06-21T12:05:54.1682229+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5dc40ea-25bb-4e20-a277-ce0d97c1ea43" />
    <UnitTestResult executionId="ff1157a2-930e-41eb-80ca-e4d6d1a536fb" testId="a9919e51-800f-ec19-c41f-34f6587b8c4b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" computerName="fv-az1057-923" duration="00:00:59.8631669" startTime="2025-06-21T12:04:36.0287564+00:00" endTime="2025-06-21T12:05:35.2596046+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff1157a2-930e-41eb-80ca-e4d6d1a536fb" />
    <UnitTestResult executionId="d75c4c81-2959-4e92-9cee-c766ddeeba74" testId="bd42a84a-3192-2cde-f3c7-4f4c536dd7b2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.8256956" startTime="2025-06-21T12:04:35.3719963+00:00" endTime="2025-06-21T12:05:38.8731169+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d75c4c81-2959-4e92-9cee-c766ddeeba74" />
    <UnitTestResult executionId="0facf587-929a-4891-9369-d12abd8a40f3" testId="d0844210-d4c3-ea02-0ed7-748396c083bc" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:01:00.6154319" startTime="2025-06-21T12:04:35.9762267+00:00" endTime="2025-06-21T12:05:35.9487918+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0facf587-929a-4891-9369-d12abd8a40f3" />
    <UnitTestResult executionId="0df68097-aa02-452d-8427-2005f3257706" testId="93542c40-37b4-8ad3-ab4c-7c60962b4b04" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:15.7748162" startTime="2025-06-21T12:04:34.6062808+00:00" endTime="2025-06-21T12:05:50.3409423+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0df68097-aa02-452d-8427-2005f3257706" />
    <UnitTestResult executionId="44894748-d4fb-4d37-bbf6-dffc0be82a21" testId="78eb4e5c-eeb5-e3fd-fbf1-28e9bb6eb9a4" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:09.9811313" startTime="2025-06-21T12:04:34.8903870+00:00" endTime="2025-06-21T12:05:44.7570502+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44894748-d4fb-4d37-bbf6-dffc0be82a21">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e36d78b-4ef1-4b7c-ad5d-e837f32279ba" testId="4aab73c7-c72a-9808-aa8a-8e0a40a8259a" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7227482" startTime="2025-06-21T12:04:35.7743494+00:00" endTime="2025-06-21T12:05:54.9416096+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e36d78b-4ef1-4b7c-ad5d-e837f32279ba" />
    <UnitTestResult executionId="e10359ea-2387-45d5-8d04-f004291ecacf" testId="8522f4ee-1988-581c-78ab-c78f68ff62f0" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.9807481" startTime="2025-06-21T12:04:35.6519684+00:00" endTime="2025-06-21T12:05:48.0991120+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e10359ea-2387-45d5-8d04-f004291ecacf" />
    <UnitTestResult executionId="4a0ed9e7-00a2-43ff-b0c9-e01984b7b437" testId="f367105d-4fbb-1326-b9f3-8af335965f94" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.9187392" startTime="2025-06-21T12:04:35.4505378+00:00" endTime="2025-06-21T12:05:47.0058698+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a0ed9e7-00a2-43ff-b0c9-e01984b7b437" />
    <UnitTestResult executionId="c0218446-e1b0-480f-9e2b-5d43587c93fa" testId="57e60872-aa5b-2fa8-9bc3-6324a9ff6ab6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:00:54.4056535" startTime="2025-06-21T12:04:36.1420401+00:00" endTime="2025-06-21T12:05:29.8545729+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c0218446-e1b0-480f-9e2b-5d43587c93fa" />
    <UnitTestResult executionId="f04a8b78-99e7-407a-bac1-7f7662606759" testId="0b543f48-aea0-1cc0-ed51-2547c3201ca8" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:11.8880483" startTime="2025-06-21T12:04:34.9787121+00:00" endTime="2025-06-21T12:05:46.7290093+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f04a8b78-99e7-407a-bac1-7f7662606759">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="55d5243f-9f5d-4009-a7d7-272250ca7f76" testId="9acfcadd-d51d-defa-7963-9d53d1c36171" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Loose)|}&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:00:54.5452771" startTime="2025-06-21T12:04:35.7724759+00:00" endTime="2025-06-21T12:05:29.7589498+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55d5243f-9f5d-4009-a7d7-272250ca7f76">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new MockRepository(MockBehavior.Loose)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b734d55-47f2-4cb5-a577-bf9cbd0e3cfd" testId="f8781aea-4ac8-b7e6-aa07-a1b8e408050c" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" computerName="fv-az1057-923" duration="00:00:53.8620832" startTime="2025-06-21T12:04:35.0864823+00:00" endTime="2025-06-21T12:05:28.8371157+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b734d55-47f2-4cb5-a577-bf9cbd0e3cfd" />
    <UnitTestResult executionId="47a18ef1-d2cd-44ea-bdb9-4dd37fe5203f" testId="482ac86f-226d-2159-99b1-3e0b15c6fdbd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7399244" startTime="2025-06-21T12:04:36.3253468+00:00" endTime="2025-06-21T12:05:55.3173219+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47a18ef1-d2cd-44ea-bdb9-4dd37fe5203f" />
    <UnitTestResult executionId="393f7365-e729-439f-9cc1-c90f7d919ec1" testId="21a40027-fbfe-26b9-f62c-d2efb771872d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.4745514" startTime="2025-06-21T12:04:35.6629658+00:00" endTime="2025-06-21T12:05:38.6331284+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="393f7365-e729-439f-9cc1-c90f7d919ec1" />
    <UnitTestResult executionId="c6e48e9c-c7cc-442b-8c17-87c4b81e1c8b" testId="f09c5673-318f-626e-d11f-0ac2bf7c9301" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:19.4161226" startTime="2025-06-21T12:04:35.4102132+00:00" endTime="2025-06-21T12:05:54.5223054+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c6e48e9c-c7cc-442b-8c17-87c4b81e1c8b" />
    <UnitTestResult executionId="0f72cd89-7deb-48ba-9558-bbaccc59d440" testId="7074496e-77ea-c202-e27e-7d6694e6cb91" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" computerName="fv-az1057-923" duration="00:01:22.7248428" startTime="2025-06-21T12:04:35.2654729+00:00" endTime="2025-06-21T12:05:57.7043159+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f72cd89-7deb-48ba-9558-bbaccc59d440" />
    <UnitTestResult executionId="6617e88f-a523-45c7-8896-f94d63c2d637" testId="6fc3c939-0942-b865-13b7-c3272029f90f" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:13.8038925" startTime="2025-06-21T12:04:34.4327197+00:00" endTime="2025-06-21T12:05:48.2631419+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6617e88f-a523-45c7-8896-f94d63c2d637" />
    <UnitTestResult executionId="9b1f3586-8be5-4840-bc1c-8660bf0c576d" testId="5dd22578-7d86-c0af-adfe-93bf8de0abe6" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.DoSth());&quot;)" computerName="fv-az1057-923" duration="00:01:00.7422463" startTime="2025-06-21T12:04:35.7750302+00:00" endTime="2025-06-21T12:05:35.9600278+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b1f3586-8be5-4840-bc1c-8660bf0c576d">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.DoSth());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76a00c58-565d-4ec0-a5bc-ddb95cd68a4b" testId="1e93fb37-7346-9311-1398-846091f07a80" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.2724736" startTime="2025-06-21T12:04:34.5896734+00:00" endTime="2025-06-21T12:05:41.8223964+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76a00c58-565d-4ec0-a5bc-ddb95cd68a4b" />
    <UnitTestResult executionId="70f6c6ba-2b6a-4623-8842-b59175dd2ae9" testId="516eb29d-a59c-e9aa-9ddb-a47176b98da7" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" computerName="fv-az1057-923" duration="00:01:20.2538462" startTime="2025-06-21T12:04:34.6908113+00:00" endTime="2025-06-21T12:05:54.9607602+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70f6c6ba-2b6a-4623-8842-b59175dd2ae9">
      <Output>
        <StdOut>Original:


public class MyClass
{
    [Obsolete]
public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:


public class MyClass
{
    [Obsolete]
public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc5083da-37b8-4660-a10a-a9206386e398" testId="da1d09d1-a5ee-29af-4a32-dfa145c35742" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:15.2589301" startTime="2025-06-21T12:04:36.3954455+00:00" endTime="2025-06-21T12:05:50.8048550+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc5083da-37b8-4660-a10a-a9206386e398" />
    <UnitTestResult executionId="d323233e-78ac-41de-b3a9-8b4735a59002" testId="4f367724-eaec-b988-a9ca-1ed7c93db689" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" computerName="fv-az1057-923" duration="00:01:07.8925287" startTime="2025-06-21T12:04:34.8894917+00:00" endTime="2025-06-21T12:05:42.6721269+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d323233e-78ac-41de-b3a9-8b4735a59002">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a77cb21-4cbe-4b97-8152-13ad78b2d9e8" testId="0260ce4e-caf6-be0c-a628-f9ad34ebfe59" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" computerName="fv-az1057-923" duration="00:01:07.8413329" startTime="2025-06-21T12:04:34.7815017+00:00" endTime="2025-06-21T12:05:42.5606116+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a77cb21-4cbe-4b97-8152-13ad78b2d9e8">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7cd1cde9-f4d6-43cc-9cec-70009b233c36" testId="bf4628e9-f346-6bf3-5225-840720bbe699" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1565623" startTime="2025-06-21T12:04:36.9391747+00:00" endTime="2025-06-21T12:05:53.8458734+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7cd1cde9-f4d6-43cc-9cec-70009b233c36">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback({|Moq1100:(string s1, string s2)|} =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="980f0ba8-1872-47dc-a04b-9ec1ee2c1f72" testId="76016af8-30c3-be33-3174-7c28ea1aec62" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" computerName="fv-az1057-923" duration="00:01:08.7183141" startTime="2025-06-21T12:04:34.8820984+00:00" endTime="2025-06-21T12:05:43.4812220+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="980f0ba8-1872-47dc-a04b-9ec1ee2c1f72">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Field)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e1119162-7dda-4c59-84bf-0fa004924021" testId="f402aa54-18ee-edcc-a856-487808d1da85" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" computerName="fv-az1057-923" duration="00:00:53.4942748" startTime="2025-06-21T12:04:35.0795267+00:00" endTime="2025-06-21T12:05:28.3609315+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1119162-7dda-4c59-84bf-0fa004924021" />
    <UnitTestResult executionId="4c6cbd2e-573e-4b6e-b08c-1a0f48f10049" testId="8cd62eac-03a2-1a74-dd51-e189534c3f34" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:05.6517338" startTime="2025-06-21T12:04:34.5951513+00:00" endTime="2025-06-21T12:05:40.2018327+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c6cbd2e-573e-4b6e-b08c-1a0f48f10049" />
    <UnitTestResult executionId="1f189142-1b40-42bb-ba12-ed7094a0b844" testId="4913dce8-931e-9b0c-7020-279815c21ff9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" computerName="fv-az1057-923" duration="00:01:01.3345057" startTime="2025-06-21T12:04:36.3110492+00:00" endTime="2025-06-21T12:05:36.8809696+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f189142-1b40-42bb-ba12-ed7094a0b844" />
    <UnitTestResult executionId="d1e89e3e-3596-4c26-9853-c4c3e8c83185" testId="cbbe0b41-3044-27fe-f6a2-6d1814fbef28" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.9148271" startTime="2025-06-21T12:04:35.3365213+00:00" endTime="2025-06-21T12:05:45.9096599+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d1e89e3e-3596-4c26-9853-c4c3e8c83185" />
    <UnitTestResult executionId="cd5c6bef-4b18-4911-bafd-03844f30afe1" testId="baa3becb-7672-6248-cea4-41f450c631bb" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" computerName="fv-az1057-923" duration="00:00:58.9896153" startTime="2025-06-21T12:04:35.9819566+00:00" endTime="2025-06-21T12:05:34.3409000+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd5c6bef-4b18-4911-bafd-03844f30afe1" />
    <UnitTestResult executionId="220c9723-f3ab-4752-a60b-414b1b8f9a5f" testId="eff62265-3e4d-fd10-e259-adfcdb0a7852" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" computerName="fv-az1057-923" duration="00:01:01.3922519" startTime="2025-06-21T12:04:36.0750760+00:00" endTime="2025-06-21T12:05:36.9763750+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="220c9723-f3ab-4752-a60b-414b1b8f9a5f" />
    <UnitTestResult executionId="8af304a0-7419-4a3d-93b0-6b3079f58732" testId="e6b762b4-157b-3abd-388a-c58903f93edd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldSuppressBothDiagnosticsWhenBothAreDisabled" computerName="fv-az1057-923" duration="00:00:59.3226469" startTime="2025-06-21T12:04:35.8078091+00:00" endTime="2025-06-21T12:05:34.5807947+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8af304a0-7419-4a3d-93b0-6b3079f58732" />
    <UnitTestResult executionId="c4c854b3-45e3-43d9-9c43-1052e4b1df0f" testId="cb83e29f-2dec-78b9-eda2-6a96de84ed0e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock3 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(Moq&quot;···)" computerName="fv-az1057-923" duration="00:00:58.3244421" startTime="2025-06-21T12:04:36.1192838+00:00" endTime="2025-06-21T12:05:33.7608710+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4c854b3-45e3-43d9-9c43-1052e4b1df0f" />
    <UnitTestResult executionId="46ea9d3b-e892-4818-b8f5-0efda5a0d196" testId="568c05cc-fd22-d82f-c907-dd0ed3613f78" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" computerName="fv-az1057-923" duration="00:00:54.2170786" startTime="2025-06-21T12:04:35.8331746+00:00" endTime="2025-06-21T12:05:29.4948592+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="46ea9d3b-e892-4818-b8f5-0efda5a0d196">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a967978-0344-4e6b-9b16-aeccc6bd32c4" testId="f5940400-13c1-9a50-64cc-9687d18a2d77" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2311934" startTime="2025-06-21T12:04:34.6512347+00:00" endTime="2025-06-21T12:05:51.8260339+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a967978-0344-4e6b-9b16-aeccc6bd32c4" />
    <UnitTestResult executionId="eed4f3bc-493f-4d8d-92ba-05587529bf0c" testId="cc619cb2-8419-9678-9deb-e40d2289560a" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Pro&quot;···)" computerName="fv-az1057-923" duration="00:00:59.3404938" startTime="2025-06-21T12:04:37.0483602+00:00" endTime="2025-06-21T12:05:35.0624165+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eed4f3bc-493f-4d8d-92ba-05587529bf0c">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e488a8c1-e887-4e29-8213-279017aded2d" testId="64165e3e-af5f-9646-b3af-821bd2e587fc" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:14.5637269" startTime="2025-06-21T12:04:34.9884125+00:00" endTime="2025-06-21T12:05:49.4110506+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e488a8c1-e887-4e29-8213-279017aded2d" />
    <UnitTestResult executionId="e958cac8-f851-4209-9508-35daba362144" testId="e9f46646-851a-a6ce-04eb-33329a678952" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" computerName="fv-az1057-923" duration="00:01:18.3561578" startTime="2025-06-21T12:04:35.2862045+00:00" endTime="2025-06-21T12:05:53.3690027+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e958cac8-f851-4209-9508-35daba362144">
      <Output>
        <StdOut>public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAsync()).ReturnsAsync(string.Empty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a6e8295-a7c8-4d92-b8fc-34aced640b98" testId="0ede7a4e-9fd1-154a-5d06-26027a7e212a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" computerName="fv-az1057-923" duration="00:01:16.6724364" startTime="2025-06-21T12:04:35.4624477+00:00" endTime="2025-06-21T12:05:51.8109328+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a6e8295-a7c8-4d92-b8fc-34aced640b98" />
    <UnitTestResult executionId="e58725cc-b761-40e0-bdfd-1430f7482a64" testId="c2f950bf-491d-1704-b3bd-3c23488661c5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:57.2026512" startTime="2025-06-21T12:04:36.0489317+00:00" endTime="2025-06-21T12:05:32.6128555+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e58725cc-b761-40e0-bdfd-1430f7482a64" />
    <UnitTestResult executionId="f0603b9e-20ed-42ee-a459-fd585896d0c2" testId="8d94e1a9-2a0a-815c-9519-124b655d2e48" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:01:04.3769101" startTime="2025-06-21T12:04:37.0103317+00:00" endTime="2025-06-21T12:05:40.0801137+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0603b9e-20ed-42ee-a459-fd585896d0c2" />
    <UnitTestResult executionId="ad91eeda-bb1d-4662-b151-39267093d9ed" testId="36852ca0-7987-11cc-6ca3-19ec05537536" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.3624333" startTime="2025-06-21T12:04:35.3188851+00:00" endTime="2025-06-21T12:05:52.3498718+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad91eeda-bb1d-4662-b151-39267093d9ed" />
    <UnitTestResult executionId="d57f5458-48d3-4243-ad4d-e5aa4e20826a" testId="9f6bec22-53c8-7dd7-987e-cc2bf6a44572" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" computerName="fv-az1057-923" duration="00:00:56.5883614" startTime="2025-06-21T12:04:36.3099170+00:00" endTime="2025-06-21T12:05:32.0858760+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d57f5458-48d3-4243-ad4d-e5aa4e20826a" />
    <UnitTestResult executionId="2fdb3d84-a392-4e5a-941c-5d032ce1b66e" testId="23ff765c-b052-d07e-f9a8-f34280cbe091" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.7570225" startTime="2025-06-21T12:04:34.6740321+00:00" endTime="2025-06-21T12:05:42.4338914+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2fdb3d84-a392-4e5a-941c-5d032ce1b66e" />
    <UnitTestResult executionId="db5dbf91-ff34-4d77-9366-5ec993a988d8" testId="bc40d88b-dfd5-0701-7dc8-b811ad41dd36" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" computerName="fv-az1057-923" duration="00:01:16.1657604" startTime="2025-06-21T12:04:36.4127008+00:00" endTime="2025-06-21T12:05:51.7150981+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db5dbf91-ff34-4d77-9366-5ec993a988d8" />
    <UnitTestResult executionId="d6cb84a0-2892-4bba-9961-a739447e203d" testId="70c6622c-42c6-d83a-2b8d-fd7b9d7203bf" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsEmpty" computerName="fv-az1057-923" duration="00:00:00.0014982" startTime="2025-06-21T12:04:35.9272772+00:00" endTime="2025-06-21T12:04:35.9291098+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6cb84a0-2892-4bba-9961-a739447e203d" />
    <UnitTestResult executionId="963cc73e-b79d-4fe2-80b4-d344e2d03afe" testId="109c4c24-f41f-a4ef-27a2-69c90a24bfca" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:16.4392220" startTime="2025-06-21T12:04:35.6857559+00:00" endTime="2025-06-21T12:05:51.6265915+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="963cc73e-b79d-4fe2-80b4-d344e2d03afe" />
    <UnitTestResult executionId="57563a81-dd26-4f3c-9b3f-db9e225548b9" testId="bc240b12-b91a-34e8-d95e-a08d6ed91659" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:01:15.0366690" startTime="2025-06-21T12:04:36.5989264+00:00" endTime="2025-06-21T12:05:50.6930620+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="57563a81-dd26-4f3c-9b3f-db9e225548b9" />
    <UnitTestResult executionId="3fc4944e-154a-4fc7-a863-21ce37c7bfa8" testId="276fadce-77e1-500e-972e-db9deea5f91d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:51.8477271" startTime="2025-06-21T12:04:36.3165185+00:00" endTime="2025-06-21T12:05:27.3358674+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3fc4944e-154a-4fc7-a863-21ce37c7bfa8" />
    <UnitTestResult executionId="407fe90b-eaa4-4e7a-99e7-e7f363c9c2e6" testId="53a39c7a-445e-05f6-37d8-755e334b4603" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:11.9263070" startTime="2025-06-21T12:04:34.9750706+00:00" endTime="2025-06-21T12:05:46.8006121+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="407fe90b-eaa4-4e7a-99e7-e7f363c9c2e6" />
    <UnitTestResult executionId="ce17b404-dc99-4837-aee3-0d93c24f42b1" testId="c60678da-9285-ae5a-f3d4-0a9359153c71" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3323795" startTime="2025-06-21T12:04:36.4718446+00:00" endTime="2025-06-21T12:05:54.9074229+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce17b404-dc99-4837-aee3-0d93c24f42b1" />
    <UnitTestResult executionId="d6f0e919-c5dd-4c4f-acf9-06c46413a035" testId="f4d68c92-a3d1-1b3e-481e-3431dbf2a3ad" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenEmpty" computerName="fv-az1057-923" duration="00:00:00.0002479" startTime="2025-06-21T12:04:35.9336716+00:00" endTime="2025-06-21T12:04:35.9340413+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6f0e919-c5dd-4c4f-acf9-06c46413a035" />
    <UnitTestResult executionId="90272196-5ecc-41ab-b910-9d37fc1c96a0" testId="39fc2afc-2956-5f42-cead-5c9e3515b662" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var empty = string.Empty;&quot;)" computerName="fv-az1057-923" duration="00:01:04.5296563" startTime="2025-06-21T12:04:35.5704151+00:00" endTime="2025-06-21T12:05:39.6241293+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90272196-5ecc-41ab-b910-9d37fc1c96a0" />
    <UnitTestResult executionId="0e077295-3cc5-4374-8f37-3731be1a79d2" testId="37793c20-d57c-8827-97ab-ac5ef0ef3b6f" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" computerName="fv-az1057-923" duration="00:01:06.8138139" startTime="2025-06-21T12:04:34.8468376+00:00" endTime="2025-06-21T12:05:41.5700391+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e077295-3cc5-4374-8f37-3731be1a79d2" />
    <UnitTestResult executionId="97f33ee6-e05b-49cb-82fb-212d75501f8a" testId="315fa610-bc46-1f32-7d78-ceec1c67acd5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;IFoo foo;&quot;)" computerName="fv-az1057-923" duration="00:01:01.1395701" startTime="2025-06-21T12:04:35.8759701+00:00" endTime="2025-06-21T12:05:36.5579573+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97f33ee6-e05b-49cb-82fb-212d75501f8a" />
    <UnitTestResult executionId="18a578f7-b9ba-45be-800f-1706fd6906b2" testId="099a9f32-14ca-7676-b9dd-1002c6a0cdb2" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:06.4375269" startTime="2025-06-21T12:04:35.0325625+00:00" endTime="2025-06-21T12:05:41.2833527+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18a578f7-b9ba-45be-800f-1706fd6906b2" />
    <UnitTestResult executionId="38a0f16b-3392-4d6d-b1c9-d45cc364b215" testId="a5a95e33-dbe8-6202-c6f0-a56f5419f704" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.2375180" startTime="2025-06-21T12:04:35.6589122+00:00" endTime="2025-06-21T12:05:38.3920521+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38a0f16b-3392-4d6d-b1c9-d45cc364b215" />
    <UnitTestResult executionId="d103fac7-9cd8-40ec-bf70-652fa0c25023" testId="e2a6bf2a-94ec-7361-31c3-19851b12d1ca" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;IFoo foo;&quot;)" computerName="fv-az1057-923" duration="00:01:14.9726851" startTime="2025-06-21T12:04:36.6226966+00:00" endTime="2025-06-21T12:05:50.6609978+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d103fac7-9cd8-40ec-bf70-652fa0c25023" />
    <UnitTestResult executionId="a25c6110-1d27-4424-8bcc-7378d0188ca0" testId="f1ca1a76-5275-22fb-aeec-914faf525052" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:01.6898656" startTime="2025-06-21T12:04:34.8415397+00:00" endTime="2025-06-21T12:05:36.4811778+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a25c6110-1d27-4424-8bcc-7378d0188ca0">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f59ead2-df98-40e2-a8fd-5688398094df" testId="0a9f1c10-6d86-8ab0-8af2-457318cb73a7" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" computerName="fv-az1057-923" duration="00:00:59.6260272" startTime="2025-06-21T12:04:35.7897152+00:00" endTime="2025-06-21T12:05:34.8732212+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f59ead2-df98-40e2-a8fd-5688398094df">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="26be0b8e-29a9-4dc8-8244-b20ba8c9b2c6" testId="abf9b919-a906-e592-b072-dff12376100e" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" computerName="fv-az1057-923" duration="00:01:20.1169361" startTime="2025-06-21T12:04:35.7889332+00:00" endTime="2025-06-21T12:05:55.3501016+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="26be0b8e-29a9-4dc8-8244-b20ba8c9b2c6">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="61a9dca1-bc25-48c2-b55f-ffbe845436eb" testId="08760bcf-ac39-003b-493a-cf86239aa54f" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupAdd(x&quot;···)" computerName="fv-az1057-923" duration="00:01:11.4039471" startTime="2025-06-21T12:04:37.0374919+00:00" endTime="2025-06-21T12:05:47.1169012+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61a9dca1-bc25-48c2-b55f-ffbe845436eb">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupAdd(x =&gt; x.TestEvent += It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="595baf39-e59c-4673-bb5a-b625e76c4f50" testId="b0fcb94e-95b1-6302-66b9-e182fcb7fe99" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:01:08.2132469" startTime="2025-06-21T12:04:37.0063945+00:00" endTime="2025-06-21T12:05:43.9079018+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="595baf39-e59c-4673-bb5a-b625e76c4f50" />
    <UnitTestResult executionId="c9c1b01e-c6a9-46bc-8cd6-6159cc175a96" testId="662c40b5-7649-daca-4b6a-4e48ecfd8be4" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" computerName="fv-az1057-923" duration="00:01:20.1645446" startTime="2025-06-21T12:04:35.3861052+00:00" endTime="2025-06-21T12:05:55.2749784+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9c1b01e-c6a9-46bc-8cd6-6159cc175a96" />
    <UnitTestResult executionId="4f9a93b2-0066-4193-a8a4-297787fe268c" testId="cdf5daa4-2166-efff-8f4c-38e235c1e7d9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:03.0725905" startTime="2025-06-21T12:04:36.0268014+00:00" endTime="2025-06-21T12:05:38.4666760+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f9a93b2-0066-4193-a8a4-297787fe268c" />
    <UnitTestResult executionId="dc3e576b-5b83-48fb-b183-bdf459ce5f1d" testId="ccc9f5ee-fb74-9bc8-5c31-ffd4a302ad49" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.0753366" startTime="2025-06-21T12:04:35.3901625+00:00" endTime="2025-06-21T12:05:47.1171727+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc3e576b-5b83-48fb-b183-bdf459ce5f1d" />
    <UnitTestResult executionId="fcb4790e-1927-4309-a72c-42c627299b54" testId="9be5b8ae-83c5-0e0f-bd0c-8fe99d8c2867" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:02.5411197" startTime="2025-06-21T12:04:35.9794257+00:00" endTime="2025-06-21T12:05:37.8753033+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcb4790e-1927-4309-a72c-42c627299b54" />
    <UnitTestResult executionId="052e2b85-fcc3-4d64-899a-6463f5d7787f" testId="e5c528f0-3d85-4adc-6e97-b5dbae4e91f2" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:01:04.1211195" startTime="2025-06-21T12:04:35.0846968+00:00" endTime="2025-06-21T12:05:38.9890099+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="052e2b85-fcc3-4d64-899a-6463f5d7787f" />
    <UnitTestResult executionId="a3736558-5045-4bf3-9266-5bf00938f4c4" testId="4232cc58-584d-ec7e-2062-550645c273a4" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:16.9182572" startTime="2025-06-21T12:04:35.7810428+00:00" endTime="2025-06-21T12:05:52.1880694+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3736558-5045-4bf3-9266-5bf00938f4c4">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.IsInRange(1, 10, Moq.Range.Inclusive), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="10b8811f-7277-4623-b007-cbb67d4c8e86" testId="54ef1e08-2b27-41bc-0b50-e7dd8faf6218" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.9285886" startTime="2025-06-21T12:04:35.3221398+00:00" endTime="2025-06-21T12:05:45.9177041+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10b8811f-7277-4623-b007-cbb67d4c8e86" />
    <UnitTestResult executionId="cfd383ed-49c5-4a76-8467-f762b226a2e8" testId="447c9d9d-04ad-b43e-2339-91aebc980b80" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" computerName="fv-az1057-923" duration="00:01:19.1822336" startTime="2025-06-21T12:04:36.5113264+00:00" endTime="2025-06-21T12:05:54.7642380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cfd383ed-49c5-4a76-8467-f762b226a2e8" />
    <UnitTestResult executionId="399c9714-fd1b-44d0-8dd4-a54f56aa346e" testId="cd65365c-1e92-baa5-6a20-2e054dd0bd25" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:16.7633699" startTime="2025-06-21T12:04:35.7755317+00:00" endTime="2025-06-21T12:05:52.0353550+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="399c9714-fd1b-44d0-8dd4-a54f56aa346e" />
    <UnitTestResult executionId="8f0d4e40-6760-4d57-a50e-9f0fc6d07332" testId="a3c3cc11-7430-6a79-d6f3-fbaadb544f4d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.8132228" startTime="2025-06-21T12:04:35.6443959+00:00" endTime="2025-06-21T12:05:46.9542924+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f0d4e40-6760-4d57-a50e-9f0fc6d07332" />
    <UnitTestResult executionId="31c3de8e-39d8-41ce-8511-58c68d30166b" testId="dd95884d-554e-cdf1-41c8-ccd0810572d1" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:13.7141582" startTime="2025-06-21T12:04:34.9639318+00:00" endTime="2025-06-21T12:05:48.5614200+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31c3de8e-39d8-41ce-8511-58c68d30166b" />
    <UnitTestResult executionId="4cab6a06-c115-4cf5-9c23-29b5257add91" testId="eb03a4ab-7106-908f-e881-63eb18d26e8b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:00.8156685" startTime="2025-06-21T12:04:36.1885008+00:00" endTime="2025-06-21T12:05:36.3604290+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4cab6a06-c115-4cf5-9c23-29b5257add91" />
    <UnitTestResult executionId="09464458-550a-4d78-b60d-c483d616d789" testId="5589b992-0f20-01f7-b368-8a893b2ed18f" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Loose)|}&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:17.2932141" startTime="2025-06-21T12:04:35.9385278+00:00" endTime="2025-06-21T12:05:52.6182306+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09464458-550a-4d78-b60d-c483d616d789">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new MockRepository(MockBehavior.Loose)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9cd40fc0-c978-4103-9550-65ee0e6612fa" testId="5f06068f-1770-94f8-d8c6-ee50be6e44c7" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:08.8779619" startTime="2025-06-21T12:04:35.8812553+00:00" endTime="2025-06-21T12:05:44.1588688+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9cd40fc0-c978-4103-9550-65ee0e6612fa" />
    <UnitTestResult executionId="882bc0b7-2ffe-4c1a-b9fa-ce79c591e81e" testId="c31b6e8d-c4ef-bdfe-456d-1fd8c47b3052" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" computerName="fv-az1057-923" duration="00:01:06.2937421" startTime="2025-06-21T12:04:36.9951770+00:00" endTime="2025-06-21T12:05:42.0217306+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="882bc0b7-2ffe-4c1a-b9fa-ce79c591e81e">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d10f5596-d8e9-4c68-b14f-ce2058f4a91a" testId="20c97ea1-bd73-b0d1-366d-989bcfa7c0ee" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:09.7779508" startTime="2025-06-21T12:04:34.8330219+00:00" endTime="2025-06-21T12:05:44.5509934+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d10f5596-d8e9-4c68-b14f-ce2058f4a91a">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f77ad33-f7ce-4aca-8733-cff97473fa04" testId="533709b0-4fa0-db25-761d-c9d716be4020" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:18.3419518" startTime="2025-06-21T12:04:34.6573989+00:00" endTime="2025-06-21T12:05:53.0088312+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f77ad33-f7ce-4aca-8733-cff97473fa04" />
    <UnitTestResult executionId="2bf84fb6-e283-4cbf-ae88-981cb6881472" testId="edbd64bd-6ab2-df22-a276-71d903ed76d1" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:00:55.2294078" startTime="2025-06-21T12:04:35.1106150+00:00" endTime="2025-06-21T12:05:30.1146955+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2bf84fb6-e283-4cbf-ae88-981cb6881472" />
    <UnitTestResult executionId="dd2dd032-a546-4f1a-a54d-08c23e6afc35" testId="c58cfd62-f830-85c8-619a-72416deedc6e" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:20.6487839" startTime="2025-06-21T12:04:34.6175507+00:00" endTime="2025-06-21T12:05:55.2144077+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd2dd032-a546-4f1a-a54d-08c23e6afc35" />
    <UnitTestResult executionId="fbe6739c-7b2e-46bc-ac0e-811f247b2611" testId="2d1d5719-faad-739f-bff7-efddbfe5dc87" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" computerName="fv-az1057-923" duration="00:01:18.6723491" startTime="2025-06-21T12:04:35.3771839+00:00" endTime="2025-06-21T12:05:53.7182210+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbe6739c-7b2e-46bc-ac0e-811f247b2611" />
    <UnitTestResult executionId="9bdc66a0-4a32-4681-8d7b-635bc58f44e1" testId="b1492953-5fbb-40d8-8c7f-5afc51e9c443" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:06.2011433" startTime="2025-06-21T12:04:36.7628538+00:00" endTime="2025-06-21T12:05:41.8713970+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9bdc66a0-4a32-4681-8d7b-635bc58f44e1">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b8ce3d5-57c2-4bc9-82bd-fd2f47ea4dac" testId="629ba4d4-88f3-c31d-adeb-514489f4443f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" computerName="fv-az1057-923" duration="00:01:16.9298493" startTime="2025-06-21T12:04:36.3069219+00:00" endTime="2025-06-21T12:05:52.4475058+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b8ce3d5-57c2-4bc9-82bd-fd2f47ea4dac" />
    <UnitTestResult executionId="93e2b8a8-ae1f-4d42-adb3-f838da8f84ed" testId="afbb08c4-24ff-520d-d30f-7851e78cc1b7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" computerName="fv-az1057-923" duration="00:01:15.6039847" startTime="2025-06-21T12:04:36.4032043+00:00" endTime="2025-06-21T12:05:51.1399178+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93e2b8a8-ae1f-4d42-adb3-f838da8f84ed" />
    <UnitTestResult executionId="b6688077-33bc-4755-a034-a406edfc8120" testId="a86ae657-5203-7779-4ef1-7357b169da83" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Pro&quot;···)" computerName="fv-az1057-923" duration="00:01:17.1643604" startTime="2025-06-21T12:04:37.0391982+00:00" endTime="2025-06-21T12:05:52.8783592+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6688077-33bc-4755-a034-a406edfc8120">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1aefb286-5a23-4ffa-b8ba-b104d59d9d9c" testId="03f4b3c2-e04e-f0fd-bec7-9ac5649d0e29" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" computerName="fv-az1057-923" duration="00:01:22.5505253" startTime="2025-06-21T12:04:35.2010324+00:00" endTime="2025-06-21T12:05:57.5130802+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1aefb286-5a23-4ffa-b8ba-b104d59d9d9c" />
    <UnitTestResult executionId="a4a065d0-8ea1-4329-bee1-0f2eb7d9aa18" testId="4497132e-df18-a2e8-e05f-0a6d822b697f" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:03.9625164" startTime="2025-06-21T12:04:35.3274407+00:00" endTime="2025-06-21T12:05:38.9556989+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4a065d0-8ea1-4329-bee1-0f2eb7d9aa18" />
    <UnitTestResult executionId="3ae4a3ce-9ead-4423-9d31-340e7b4ae942" testId="75ff428a-fea7-7577-f7d1-94eace001dda" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3681979" startTime="2025-06-21T12:04:36.4092178+00:00" endTime="2025-06-21T12:05:54.9620711+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ae4a3ce-9ead-4423-9d31-340e7b4ae942" />
    <UnitTestResult executionId="4c132bfb-aa54-49e8-b87c-591dbefbc91e" testId="00f0223c-e7dc-cb22-ce1e-ef70a485e10b" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" computerName="fv-az1057-923" duration="00:01:00.8637288" startTime="2025-06-21T12:04:35.9249692+00:00" endTime="2025-06-21T12:05:36.1685727+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c132bfb-aa54-49e8-b87c-591dbefbc91e">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3373a7f6-14fb-47b6-9a12-74b620a11c38" testId="a7a64878-ae82-820e-78fb-33d1db187fa5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:17.1276939" startTime="2025-06-21T12:04:36.5197415+00:00" endTime="2025-06-21T12:05:52.7704786+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3373a7f6-14fb-47b6-9a12-74b620a11c38" />
    <UnitTestResult executionId="50aeb4a0-5fd6-4c37-b279-311a61389de3" testId="e155a156-9f0d-933b-bb24-c33abf38350d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:58.2158442" startTime="2025-06-21T12:04:36.1295095+00:00" endTime="2025-06-21T12:05:33.6835156+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50aeb4a0-5fd6-4c37-b279-311a61389de3" />
    <UnitTestResult executionId="093cfb47-51fb-411b-95fb-631890cb4b50" testId="686b5f6b-d097-9a11-b341-74c90800697b" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" computerName="fv-az1057-923" duration="00:01:22.3078831" startTime="2025-06-21T12:04:35.2022301+00:00" endTime="2025-06-21T12:05:57.2676094+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="093cfb47-51fb-411b-95fb-631890cb4b50" />
    <UnitTestResult executionId="a8fa3514-f4c8-42ce-bf71-38fd6ef48b70" testId="b0245461-cf9e-ce5c-f8eb-6950672ef88e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" computerName="fv-az1057-923" duration="00:01:14.6513225" startTime="2025-06-21T12:04:36.4252230+00:00" endTime="2025-06-21T12:05:50.2143126+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8fa3514-f4c8-42ce-bf71-38fd6ef48b70" />
    <UnitTestResult executionId="864fdcfd-b3fc-4658-91c6-11c373a88182" testId="b505519e-fb67-589f-12a8-06cb93dc97aa" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:18.7290759" startTime="2025-06-21T12:04:36.6293500+00:00" endTime="2025-06-21T12:05:54.3658440+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="864fdcfd-b3fc-4658-91c6-11c373a88182">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:Mock.Of&lt;ISample&gt;()|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="90edd3a2-06fc-400e-9a01-bce29d67b1cf" testId="1ffae0ec-a1dc-a7a3-4d8b-74831db04084" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:05.6352555" startTime="2025-06-21T12:04:34.8813587+00:00" endTime="2025-06-21T12:05:40.4059379+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90edd3a2-06fc-400e-9a01-bce29d67b1cf" />
    <UnitTestResult executionId="9d4c8bc0-41dd-47bc-a9b1-a5ea1e84199b" testId="cfe1494b-fb96-2790-edee-1f5fbba221a0" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:16.9178557" startTime="2025-06-21T12:04:35.7783888+00:00" endTime="2025-06-21T12:05:52.1651208+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d4c8bc0-41dd-47bc-a9b1-a5ea1e84199b" />
    <UnitTestResult executionId="e0540a4a-e61f-4f2e-9179-46674bae8c3c" testId="a5681949-3ea9-b54f-8cdc-7be0c2e82294" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:00:54.7023145" startTime="2025-06-21T12:04:35.8843478+00:00" endTime="2025-06-21T12:05:29.9818534+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0540a4a-e61f-4f2e-9179-46674bae8c3c">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:Mock.Of&lt;ISample&gt;()|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="20672e11-f569-448d-9a58-d2b4c8265b59" testId="d0c49d54-8724-fbbc-2973-46d4f4c74365" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.5569089" startTime="2025-06-21T12:04:35.6782227+00:00" endTime="2025-06-21T12:05:48.7580107+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20672e11-f569-448d-9a58-d2b4c8265b59" />
    <UnitTestResult executionId="72d0ee70-74a7-4778-884d-46548659c6dc" testId="4b1fd74b-1736-ffbf-e2c1-d9c9c44fd793" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:52.0143301" startTime="2025-06-21T12:04:36.0233724+00:00" endTime="2025-06-21T12:05:27.4033567+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72d0ee70-74a7-4778-884d-46548659c6dc" />
    <UnitTestResult executionId="d13694c9-e7bb-4815-b45e-9bd72c2990c5" testId="ce53d3ed-6960-e485-7f33-9e008be2529f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:03.3595113" startTime="2025-06-21T12:04:36.0302163+00:00" endTime="2025-06-21T12:05:38.7643633+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d13694c9-e7bb-4815-b45e-9bd72c2990c5" />
    <UnitTestResult executionId="4627937a-d8df-4aad-bd81-b49b38e6bfa9" testId="e09f9885-cb5a-dd80-4334-fb1ffaf4e9d3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:52.9657694" startTime="2025-06-21T12:04:36.1050105+00:00" endTime="2025-06-21T12:05:28.3969575+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4627937a-d8df-4aad-bd81-b49b38e6bfa9" />
    <UnitTestResult executionId="fbcf588d-a109-42ff-8ed1-6ac3781598b3" testId="ff653a13-4c4d-1e09-9276-a3c393d461ea" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1262548" startTime="2025-06-21T12:04:36.6130540+00:00" endTime="2025-06-21T12:05:53.7267346+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbcf588d-a109-42ff-8ed1-6ac3781598b3" />
    <UnitTestResult executionId="c51dd135-6878-4bd6-9dbc-ab03ae0058d9" testId="fa92dfd5-4824-4788-bcfb-b05bdc42d3bc" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" computerName="fv-az1057-923" duration="00:01:19.2819096" startTime="2025-06-21T12:04:36.5452251+00:00" endTime="2025-06-21T12:05:54.8900537+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c51dd135-6878-4bd6-9dbc-ab03ae0058d9" />
    <UnitTestResult executionId="915a99ec-b601-4c02-ac74-86f3ed761a5a" testId="fad3e3fd-d405-0d7c-3d8c-dcfb02a8ad60" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifySet(x =&gt; { x.Te&quot;···)" computerName="fv-az1057-923" duration="00:01:07.9864535" startTime="2025-06-21T12:04:34.8743403+00:00" endTime="2025-06-21T12:05:42.7463839+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="915a99ec-b601-4c02-ac74-86f3ed761a5a">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifySet(x =&gt; { x.TestProperty = It.IsAny&lt;string&gt;(); });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dd8c96c4-6a94-45a2-a4f5-ff0588467590" testId="39de103f-22dc-576e-a56e-d5c015c4d0fe" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.8457211" startTime="2025-06-21T12:04:35.4935223+00:00" endTime="2025-06-21T12:05:52.9352432+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd8c96c4-6a94-45a2-a4f5-ff0588467590" />
    <UnitTestResult executionId="9994f42c-9493-480a-9e56-24e267146161" testId="7d67c080-fb9e-136d-6b45-6bc86b37a6d5" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:17.9279326" startTime="2025-06-21T12:04:36.8573416+00:00" endTime="2025-06-21T12:05:53.6626903+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9994f42c-9493-480a-9e56-24e267146161">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback({|Moq1100:(string s1, int i1)|} =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3208660a-c44b-402e-90c2-e23264cfb35e" testId="8d21d2f5-8e0e-87b4-2d67-1c020421398e" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" computerName="fv-az1057-923" duration="00:01:19.5760873" startTime="2025-06-21T12:04:34.8453918+00:00" endTime="2025-06-21T12:05:54.3342798+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3208660a-c44b-402e-90c2-e23264cfb35e" />
    <UnitTestResult executionId="bcef83d4-a164-4b41-929d-f1455b759e76" testId="3d082234-34d3-7aa8-55d7-95a514257496" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:15.7083727" startTime="2025-06-21T12:04:35.1783589+00:00" endTime="2025-06-21T12:05:50.7180959+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bcef83d4-a164-4b41-929d-f1455b759e76" />
    <UnitTestResult executionId="9c5afd03-32c7-4481-9966-365a0c6e285b" testId="13494a85-1328-4d20-6b77-1403a1326ea9" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" computerName="fv-az1057-923" duration="00:00:55.0045860" startTime="2025-06-21T12:04:37.0255209+00:00" endTime="2025-06-21T12:05:30.7043440+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c5afd03-32c7-4481-9966-365a0c6e285b" />
    <UnitTestResult executionId="6ac71df2-ed4f-4795-a0e5-bb4f99c5ede5" testId="93324b15-783b-cac6-fb63-a83c75f58e19" testName="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditPositionInvalid" computerName="fv-az1057-923" duration="00:00:00.0001340" startTime="2025-06-21T12:04:34.8153827+00:00" endTime="2025-06-21T12:04:34.8156728+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ac71df2-ed4f-4795-a0e5-bb4f99c5ede5" />
    <UnitTestResult executionId="bc077e64-336f-46bb-9f30-3e383809de11" testId="84859c60-ec70-eec2-e99f-67d391c6855f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" computerName="fv-az1057-923" duration="00:00:57.8415149" startTime="2025-06-21T12:04:36.0429437+00:00" endTime="2025-06-21T12:05:33.2451088+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc077e64-336f-46bb-9f30-3e383809de11" />
    <UnitTestResult executionId="0b9bb4ac-5de2-4f39-9692-d5a2b9d502d5" testId="3b3b9f0d-511b-be5b-7630-17d340c4f4e2" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:05.1687527" startTime="2025-06-21T12:04:37.0308558+00:00" endTime="2025-06-21T12:05:40.8700707+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b9bb4ac-5de2-4f39-9692-d5a2b9d502d5" />
    <UnitTestResult executionId="146d9e91-c6d8-4d11-a765-02846fdf41b2" testId="cdc0a299-a1c8-2e5d-2ebc-75349ae600ca" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new SealedClass();&quot;)" computerName="fv-az1057-923" duration="00:01:10.9353548" startTime="2025-06-21T12:04:35.3372850+00:00" endTime="2025-06-21T12:05:45.9380553+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="146d9e91-c6d8-4d11-a765-02846fdf41b2" />
    <UnitTestResult executionId="2915f2b6-6226-4fb2-a38d-eb0a50e3349a" testId="9ff594cd-ccb5-c1ef-8954-c6ffb5c0119b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" computerName="fv-az1057-923" duration="00:00:58.5870803" startTime="2025-06-21T12:04:35.9709290+00:00" endTime="2025-06-21T12:05:33.9170997+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2915f2b6-6226-4fb2-a38d-eb0a50e3349a" />
    <UnitTestResult executionId="6e6e02ba-30f8-46b5-b2bc-fcf0d37410e0" testId="497cef6f-579c-1bf3-0fa5-d50bf3ca7e0c" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.6265638" startTime="2025-06-21T12:04:35.6506401+00:00" endTime="2025-06-21T12:05:48.8099531+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e6e02ba-30f8-46b5-b2bc-fcf0d37410e0" />
    <UnitTestResult executionId="9dd11e7c-3da0-4fa7-9ac7-56d66b790e5e" testId="ad9c2372-6707-b6ce-f088-c38ed54c270b" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:06.5055167" startTime="2025-06-21T12:04:35.8249622+00:00" endTime="2025-06-21T12:05:41.8195371+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9dd11e7c-3da0-4fa7-9ac7-56d66b790e5e" />
    <UnitTestResult executionId="8857ff96-6c6f-4ad6-b137-3f1e46262212" testId="4a20db08-04d8-9527-6c96-f14befcf5229" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2863707" startTime="2025-06-21T12:04:36.6095199+00:00" endTime="2025-06-21T12:05:53.9439464+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8857ff96-6c6f-4ad6-b137-3f1e46262212" />
    <UnitTestResult executionId="a6e9c1a2-302b-4d25-8cc2-c870848e2534" testId="28e086ea-2ba7-13cc-c33c-ecc9a6a067ed" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:18.0596178" startTime="2025-06-21T12:04:36.6269831+00:00" endTime="2025-06-21T12:05:53.6694463+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6e9c1a2-302b-4d25-8cc2-c870848e2534">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5695bd4-0603-4cb7-b946-5b5fbcffe56c" testId="7a34b5f8-197b-1f92-2ef2-6d6d19047ce5" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:17.8132767" startTime="2025-06-21T12:04:36.9988410+00:00" endTime="2025-06-21T12:05:53.6163975+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5695bd4-0603-4cb7-b946-5b5fbcffe56c">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bef7c669-c6fb-45e9-ad1d-c455f3d8136e" testId="631c2140-4303-6071-b086-1aab976e7e0c" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:08.6474352" startTime="2025-06-21T12:04:35.8827112+00:00" endTime="2025-06-21T12:05:43.9500937+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bef7c669-c6fb-45e9-ad1d-c455f3d8136e">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="15dd60b9-d323-4690-b5d9-a834aa0cf0ad" testId="2318b3aa-21e9-d2bb-a4f3-94b811d9ee31" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:57.9181581" startTime="2025-06-21T12:04:36.0454825+00:00" endTime="2025-06-21T12:05:33.3251662+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15dd60b9-d323-4690-b5d9-a834aa0cf0ad" />
    <UnitTestResult executionId="0059e1f1-a8a0-4d1f-84ab-7e3a5cf5162e" testId="e720221f-c049-bc6e-53ae-b34e8d0ae508" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:06.1967863" startTime="2025-06-21T12:04:35.8160942+00:00" endTime="2025-06-21T12:05:41.4533017+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0059e1f1-a8a0-4d1f-84ab-7e3a5cf5162e" />
    <UnitTestResult executionId="15f85d81-7700-4ad5-ac8d-1b22c3315493" testId="01de2011-0c45-9452-f95c-14cce36e0b4e" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:00:56.1147305" startTime="2025-06-21T12:04:35.1498105+00:00" endTime="2025-06-21T12:05:31.0486412+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15f85d81-7700-4ad5-ac8d-1b22c3315493" />
    <UnitTestResult executionId="0c750a87-8403-47da-8ba3-f9f6c228ff2b" testId="f6bfe163-d760-2ba6-029c-2189945bbaeb" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" computerName="fv-az1057-923" duration="00:00:54.3342231" startTime="2025-06-21T12:04:35.9084309+00:00" endTime="2025-06-21T12:05:29.6294715+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c750a87-8403-47da-8ba3-f9f6c228ff2b">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a1b845b9-30df-47d6-ad2e-c9d5fa2c63b4" testId="1d7f85e0-6ead-53ce-12f9-82dbd5edd194" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:01:15.7704877" startTime="2025-06-21T12:04:36.4379044+00:00" endTime="2025-06-21T12:05:51.3738054+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a1b845b9-30df-47d6-ad2e-c9d5fa2c63b4" />
    <UnitTestResult executionId="09ee300d-c468-415b-93ff-65c26fbc4da2" testId="21931a12-7a0c-9c5c-2571-eb0ed2699943" testName="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_IndexOutOfRange_ThrowsException" computerName="fv-az1057-923" duration="00:00:00.0009026" startTime="2025-06-21T12:04:35.0507242+00:00" endTime="2025-06-21T12:04:35.0517445+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09ee300d-c468-415b-93ff-65c26fbc4da2" />
    <UnitTestResult executionId="08684fd5-22dd-4d98-83c7-282a177e050a" testId="3571e194-5a11-a702-1187-42be1d4cf4b9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:51.6310949" startTime="2025-06-21T12:04:36.0308906+00:00" endTime="2025-06-21T12:05:27.0258500+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08684fd5-22dd-4d98-83c7-282a177e050a" />
    <UnitTestResult executionId="fc208381-84f8-4222-a780-3bbac40d5a9d" testId="62c282eb-67ed-4e35-2284-c84a21d048ac" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForAbstractMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:01:17.3879950" startTime="2025-06-21T12:04:34.6774250+00:00" endTime="2025-06-21T12:05:52.0921319+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc208381-84f8-4222-a780-3bbac40d5a9d" />
    <UnitTestResult executionId="75b4c8a2-245a-4e93-aa98-b5a24affc6e4" testId="8985e7ba-a059-6a70-c92d-1232161180ae" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.5570125" startTime="2025-06-21T12:04:36.4084799+00:00" endTime="2025-06-21T12:05:49.0960982+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75b4c8a2-245a-4e93-aa98-b5a24affc6e4" />
    <UnitTestResult executionId="8f147dc7-a2b5-441b-8c2b-19cc6b3adc7e" testId="3639ade3-815f-f61c-2017-a23d58f6d9d6" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:03.2799555" startTime="2025-06-21T12:04:35.1483929+00:00" endTime="2025-06-21T12:05:38.2310657+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f147dc7-a2b5-441b-8c2b-19cc6b3adc7e" />
    <UnitTestResult executionId="cd8d353e-3f9e-4a26-b3ca-066867810db2" testId="9196b1fd-39c2-e39e-8fe5-f0a2bb6e6c75" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:19.3929701" startTime="2025-06-21T12:04:35.9455084+00:00" endTime="2025-06-21T12:05:54.7149091+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd8d353e-3f9e-4a26-b3ca-066867810db2">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9e374613-e821-473f-b816-3a9ab980a3e4" testId="cd4508a7-13eb-c4d2-afcc-466b81627086" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" computerName="fv-az1057-923" duration="00:00:52.7831004" startTime="2025-06-21T12:04:36.1427309+00:00" endTime="2025-06-21T12:05:28.2390678+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e374613-e821-473f-b816-3a9ab980a3e4" />
    <UnitTestResult executionId="c025e8af-5719-4e47-954f-75fbdc6ab8c3" testId="ad16889a-5d98-9d6d-a002-d16fe35c8efc" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:09.2340726" startTime="2025-06-21T12:04:35.0364753+00:00" endTime="2025-06-21T12:05:44.0813332+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c025e8af-5719-4e47-954f-75fbdc6ab8c3" />
    <UnitTestResult executionId="49cac8af-9e8a-4e44-9fbe-8f104b792d6a" testId="808bbdfd-d61e-030d-5b04-dd27798bbaa5" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.3735123" startTime="2025-06-21T12:04:35.2235933+00:00" endTime="2025-06-21T12:05:43.3540189+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49cac8af-9e8a-4e44-9fbe-8f104b792d6a" />
    <UnitTestResult executionId="c8ca1057-7bc5-4b4d-a09f-e58a8b573633" testId="a8d180e9-4b4f-36bf-3809-bb019b0b39a6" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:08.7999374" startTime="2025-06-21T12:04:35.1041815+00:00" endTime="2025-06-21T12:05:43.6962550+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8ca1057-7bc5-4b4d-a09f-e58a8b573633" />
    <UnitTestResult executionId="f42afc76-f0a8-4efa-8128-b137424ad89c" testId="a7594c26-374f-7ad3-515a-969233cd34f0" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:16.0665004" startTime="2025-06-21T12:04:35.7341793+00:00" endTime="2025-06-21T12:05:51.3349235+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f42afc76-f0a8-4efa-8128-b137424ad89c" />
    <UnitTestResult executionId="9afc4ff8-771b-4415-ba86-b5c8caab3fef" testId="558daf05-e73f-48c2-bace-86b66219b81a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:13.0793141" startTime="2025-06-21T12:04:36.4985438+00:00" endTime="2025-06-21T12:05:48.6541171+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9afc4ff8-771b-4415-ba86-b5c8caab3fef" />
    <UnitTestResult executionId="e154a9ef-08a5-49eb-8a53-3b61871fe3a4" testId="ad83d352-51ae-0aef-a1a3-faf6b7ded3e7" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:10.5053390" startTime="2025-06-21T12:04:35.0492612+00:00" endTime="2025-06-21T12:05:45.4020178+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e154a9ef-08a5-49eb-8a53-3b61871fe3a4" />
    <UnitTestResult executionId="d0985af4-09f8-4c95-866d-b24abdcfed22" testId="5c04f593-7e16-5bce-f4d1-92f913acf854" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" computerName="fv-az1057-923" duration="00:01:14.3504267" startTime="2025-06-21T12:04:35.9550298+00:00" endTime="2025-06-21T12:05:49.7072203+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0985af4-09f8-4c95-866d-b24abdcfed22">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="921a593a-e629-4781-b119-b4ac11dd60ff" testId="6befc529-ca26-b9b5-e5c8-a9820407398a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:13.5849053" startTime="2025-06-21T12:04:35.6738982+00:00" endTime="2025-06-21T12:05:48.8061411+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="921a593a-e629-4781-b119-b4ac11dd60ff" />
    <UnitTestResult executionId="04527496-55a9-4a3b-9b57-335b0b626b49" testId="6817e04d-d2e6-0f35-235f-2320aff67c14" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" computerName="fv-az1057-923" duration="00:01:20.0788582" startTime="2025-06-21T12:04:34.6965295+00:00" endTime="2025-06-21T12:05:54.8202958+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04527496-55a9-4a3b-9b57-335b0b626b49">
      <Output>
        <StdOut>Original:


public class MyClass
{
    public int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:


public class MyClass
{
    public virtual int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a26fe6ad-c41e-43c3-b86d-5a32ebd677f9" testId="2fddb39e-7cb8-dd0b-4c0f-57eea1e5a8e4" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:02.6259673" startTime="2025-06-21T12:04:35.5716491+00:00" endTime="2025-06-21T12:05:37.7298633+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a26fe6ad-c41e-43c3-b86d-5a32ebd677f9" />
    <UnitTestResult executionId="bdb51eb7-db9a-41b5-a4ae-f0df52fa82c3" testId="be50bc4f-1ce2-b2fe-9f86-2e0cb3dfa7bd" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.7587777" startTime="2025-06-21T12:04:35.6677549+00:00" endTime="2025-06-21T12:05:48.9311042+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bdb51eb7-db9a-41b5-a4ae-f0df52fa82c3" />
    <UnitTestResult executionId="df5bac3a-3a04-4725-9307-a13c42c425f9" testId="b9832d23-c2dc-e00a-0b9a-980a2b238730" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.7523004" startTime="2025-06-21T12:04:35.1714131+00:00" endTime="2025-06-21T12:05:51.7104849+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df5bac3a-3a04-4725-9307-a13c42c425f9" />
    <UnitTestResult executionId="36809bdb-ed2d-4f08-aea1-d3e12b5083ef" testId="6de6128b-db30-f260-2b88-12d1ff74aa8b" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2278080" startTime="2025-06-21T12:04:35.7711121+00:00" endTime="2025-06-21T12:05:52.4592308+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36809bdb-ed2d-4f08-aea1-d3e12b5083ef" />
    <UnitTestResult executionId="e8ed95e1-e63b-49d9-918c-ba9571787db9" testId="47db66ac-428f-91ff-0471-2e7f85a848df" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:08.4466171" startTime="2025-06-21T12:04:36.8818625+00:00" endTime="2025-06-21T12:05:44.1323686+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8ed95e1-e63b-49d9-918c-ba9571787db9">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11e1165f-072a-41da-b27d-8030eabe29df" testId="d64ee590-96fc-4d9f-b828-c84b16ca01aa" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock3 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:02.2681568" startTime="2025-06-21T12:04:36.0155876+00:00" endTime="2025-06-21T12:05:37.6593293+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11e1165f-072a-41da-b27d-8030eabe29df" />
    <UnitTestResult executionId="801687d9-2f19-40fc-964c-0e6782153254" testId="6dbb92f9-cc1e-2f28-f914-5989efe552e0" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:05.0574388" startTime="2025-06-21T12:04:35.8647993+00:00" endTime="2025-06-21T12:05:40.3441569+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="801687d9-2f19-40fc-964c-0e6782153254">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84398b32-4fdb-4b5d-af81-196ab23ccaac" testId="c5e69ade-cbfc-7520-1a1d-3870e2da5cbf" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:14.5054332" startTime="2025-06-21T12:04:35.7349854+00:00" endTime="2025-06-21T12:05:49.7032016+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84398b32-4fdb-4b5d-af81-196ab23ccaac" />
    <UnitTestResult executionId="59eb4374-bbc4-4acf-b028-aa63b8b8498d" testId="935b8322-5ce0-4ab6-1dd6-3ee36f69e354" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock2 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(\&quot;2&quot;···)" computerName="fv-az1057-923" duration="00:00:57.7205744" startTime="2025-06-21T12:04:36.1185933+00:00" endTime="2025-06-21T12:05:33.1772268+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59eb4374-bbc4-4acf-b028-aa63b8b8498d" />
    <UnitTestResult executionId="8b8496b7-4df0-474d-a36c-2243ffbbb411" testId="9da22bbd-e742-bfbd-cd8a-0588570a56ad" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:18.4411528" startTime="2025-06-21T12:04:36.5060176+00:00" endTime="2025-06-21T12:05:54.0202837+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b8496b7-4df0-474d-a36c-2243ffbbb411" />
    <UnitTestResult executionId="0e417f8c-f4fa-4096-8db2-966197bd2868" testId="410ecc31-2824-271a-f647-9921ee42a7ef" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:03.1669932" startTime="2025-06-21T12:04:36.4143143+00:00" endTime="2025-06-21T12:05:38.7145693+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e417f8c-f4fa-4096-8db2-966197bd2868" />
    <UnitTestResult executionId="97954925-5f6e-4c93-a1ff-e6b6d4877fca" testId="c163347c-23a3-0cc4-733f-f8372db5eee3" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:12.9758015" startTime="2025-06-21T12:04:36.6366773+00:00" endTime="2025-06-21T12:05:48.5830954+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97954925-5f6e-4c93-a1ff-e6b6d4877fca">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3dcfec1b-fb45-48c4-aaa2-4124b7831006" testId="f7e26112-1445-780d-977e-4db3fb622f73" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" computerName="fv-az1057-923" duration="00:01:07.9439142" startTime="2025-06-21T12:04:35.9116880+00:00" endTime="2025-06-21T12:05:43.2413082+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3dcfec1b-fb45-48c4-aaa2-4124b7831006" />
    <UnitTestResult executionId="46f80acc-7337-4510-a52b-407a84d71968" testId="2d76dcdb-9eb6-88c4-ee8a-2eb9f6e7a5a1" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.0546107" startTime="2025-06-21T12:04:35.2039345+00:00" endTime="2025-06-21T12:05:46.0212315+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="46f80acc-7337-4510-a52b-407a84d71968" />
    <UnitTestResult executionId="4c298df5-883e-4473-8263-6c28ae726855" testId="1661a695-e3c4-b05a-c875-eefac70cc9c0" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:05.7618548" startTime="2025-06-21T12:04:34.9804117+00:00" endTime="2025-06-21T12:05:40.5908061+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c298df5-883e-4473-8263-6c28ae726855">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData("test"));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5688bbbb-b11a-49df-813c-f46bf118e6d5" testId="1a558c60-aafd-1963-f6ee-9c422a5e2fe3" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:16.8577448" startTime="2025-06-21T12:04:34.6420757+00:00" endTime="2025-06-21T12:05:51.4522290+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5688bbbb-b11a-49df-813c-f46bf118e6d5" />
    <UnitTestResult executionId="6378b6f8-5d0b-40f4-a74b-e21b32249d9f" testId="b68befab-7740-ade7-92a6-f4a82fa17fbc" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.2933113" startTime="2025-06-21T12:04:35.2092507+00:00" endTime="2025-06-21T12:05:43.3023402+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6378b6f8-5d0b-40f4-a74b-e21b32249d9f" />
    <UnitTestResult executionId="e79a3c36-a1f2-40bb-8cba-7854b2f03c6d" testId="e710482c-2a87-3819-9c22-bd8c01da4af0" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:06.0683388" startTime="2025-06-21T12:04:37.0021963+00:00" endTime="2025-06-21T12:05:41.7634377+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e79a3c36-a1f2-40bb-8cba-7854b2f03c6d">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f83c2433-9835-4cf0-8de9-6b16a8d7b14f" testId="a019126c-f5d4-536a-2f4c-0a668bd0c076" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" computerName="fv-az1057-923" duration="00:01:17.0709641" startTime="2025-06-21T12:04:36.9384086+00:00" endTime="2025-06-21T12:05:52.7544650+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f83c2433-9835-4cf0-8de9-6b16a8d7b14f">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81d80770-813f-4646-b26d-fbfece8f3eb8" testId="4a323416-0f86-ab8d-3b5b-f7aa16a25f2a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.6390706" startTime="2025-06-21T12:04:35.2051383+00:00" endTime="2025-06-21T12:05:43.6013213+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81d80770-813f-4646-b26d-fbfece8f3eb8" />
    <UnitTestResult executionId="574556ba-3308-4979-ae9b-bd89c292ee49" testId="5eebf41a-5069-0435-ceaf-9f5504d707b4" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:07.0417968" startTime="2025-06-21T12:04:35.1720765+00:00" endTime="2025-06-21T12:05:42.0220911+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="574556ba-3308-4979-ae9b-bd89c292ee49" />
    <UnitTestResult executionId="a7e10903-69df-4b89-a80a-14ae8238b3da" testId="6747d5f2-c4db-bf89-281d-e801c4b8fed1" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" computerName="fv-az1057-923" duration="00:01:18.7418656" startTime="2025-06-21T12:04:36.8364355+00:00" endTime="2025-06-21T12:05:54.4334599+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7e10903-69df-4b89-a80a-14ae8238b3da">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e5da4f44-2ab6-41d7-ab7a-0abed34df753" testId="1fe8b1f6-c834-3bfb-130f-35b33ed96069" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.2513695" startTime="2025-06-21T12:04:35.6601836+00:00" endTime="2025-06-21T12:05:36.3972049+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e5da4f44-2ab6-41d7-ab7a-0abed34df753" />
    <UnitTestResult executionId="7e3ca995-79c1-4179-a0a5-bff106acf99d" testId="92f5ca24-f275-d531-55d3-c3dc0a260389" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:04.7067424" startTime="2025-06-21T12:04:35.8769836+00:00" endTime="2025-06-21T12:05:39.9842416+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e3ca995-79c1-4179-a0a5-bff106acf99d">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Loose)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="12826e6b-6a71-4d06-96c9-3698973d51fa" testId="1e8b8b72-ac76-339b-2c1f-dfbf13883417" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:01:05.8259012" startTime="2025-06-21T12:04:35.0982157+00:00" endTime="2025-06-21T12:05:40.7061040+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12826e6b-6a71-4d06-96c9-3698973d51fa" />
    <UnitTestResult executionId="b13ad5c2-ba75-4cf9-95ad-ddd94497b565" testId="e3d09e92-247e-5bc4-4b49-18c7366a22d0" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:05.4823574" startTime="2025-06-21T12:04:35.8233157+00:00" endTime="2025-06-21T12:05:40.7433965+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b13ad5c2-ba75-4cf9-95ad-ddd94497b565" />
    <UnitTestResult executionId="a30ed4fe-1375-4e7e-a977-e5e7067ef055" testId="484b5345-0195-1a44-c588-fb9e9daa6ad1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" computerName="fv-az1057-923" duration="00:00:53.1135545" startTime="2025-06-21T12:04:36.0802850+00:00" endTime="2025-06-21T12:05:28.5378950+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a30ed4fe-1375-4e7e-a977-e5e7067ef055" />
    <UnitTestResult executionId="9d0c6f29-3fa9-4ad6-913f-32af4ccad4be" testId="18478b31-4299-6678-f1b3-0821f964db6c" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" computerName="fv-az1057-923" duration="00:01:10.8868651" startTime="2025-06-21T12:04:35.3785321+00:00" endTime="2025-06-21T12:05:45.9204563+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d0c6f29-3fa9-4ad6-913f-32af4ccad4be" />
    <UnitTestResult executionId="7802ff7c-cbb1-4a06-b923-7386e17d0863" testId="3206e19c-f5dd-90f6-b732-4a2155f79c90" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:00:52.0846592" startTime="2025-06-21T12:04:35.0876235+00:00" endTime="2025-06-21T12:05:26.9530835+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7802ff7c-cbb1-4a06-b923-7386e17d0863" />
    <UnitTestResult executionId="e324fe8e-b918-4c63-8ffe-256c8e52fe34" testId="deb2b0c4-b96d-d563-daed-a2980220493b" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:06.1588847" startTime="2025-06-21T12:04:34.5958923+00:00" endTime="2025-06-21T12:05:40.7152233+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e324fe8e-b918-4c63-8ffe-256c8e52fe34" />
    <UnitTestResult executionId="a2f90c0f-2c83-4adc-90bd-655ba1765006" testId="f918bfc7-11b6-163b-1685-4dc3bc3b669a" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" computerName="fv-az1057-923" duration="00:01:10.0462250" startTime="2025-06-21T12:04:36.8868689+00:00" endTime="2025-06-21T12:05:45.7278688+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2f90c0f-2c83-4adc-90bd-655ba1765006">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="646b839b-2842-4eaa-bc10-81b2fe4dfd5c" testId="524f1c05-395a-c632-0e3f-df5d09042de5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:15.3363563" startTime="2025-06-21T12:04:36.3801483+00:00" endTime="2025-06-21T12:05:50.8498644+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="646b839b-2842-4eaa-bc10-81b2fe4dfd5c" />
    <UnitTestResult executionId="987264ef-9383-400e-9332-fbec647ced8b" testId="718f286e-633a-cfe6-3b5c-f3100dc84e00" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" computerName="fv-az1057-923" duration="00:01:20.2161640" startTime="2025-06-21T12:04:34.6945976+00:00" endTime="2025-06-21T12:05:54.9219515+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="987264ef-9383-400e-9332-fbec647ced8b">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76e76b4c-9070-45df-ace8-d730ab10d9f9" testId="b77ced1f-6288-4e98-dfbf-04b1d0bd2e81" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" computerName="fv-az1057-923" duration="00:01:12.3212570" startTime="2025-06-21T12:04:35.3744210+00:00" endTime="2025-06-21T12:05:47.3439651+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76e76b4c-9070-45df-ace8-d730ab10d9f9" />
    <UnitTestResult executionId="97aacfae-268f-4aa3-8471-be135c3bf784" testId="feb9b883-8894-0bd9-586b-32dea8616aa4" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.5122638" startTime="2025-06-21T12:04:35.1860919+00:00" endTime="2025-06-21T12:05:48.4678887+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97aacfae-268f-4aa3-8471-be135c3bf784" />
    <UnitTestResult executionId="d967f422-4726-4b06-9ab3-d4f2eef6464a" testId="c6bdeeae-478f-56bb-3e2f-6931ff10fb54" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" computerName="fv-az1057-923" duration="00:01:15.8998118" startTime="2025-06-21T12:04:36.5384712+00:00" endTime="2025-06-21T12:05:51.5012995+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d967f422-4726-4b06-9ab3-d4f2eef6464a" />
    <UnitTestResult executionId="6630be3d-a6fb-4062-9cee-77309772e303" testId="2c26811b-3009-2a2a-9d58-4483777b94c2" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" computerName="fv-az1057-923" duration="00:01:02.8068442" startTime="2025-06-21T12:04:36.3146895+00:00" endTime="2025-06-21T12:05:38.3030921+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6630be3d-a6fb-4062-9cee-77309772e303" />
    <UnitTestResult executionId="21732380-b04b-4b82-b9a7-198cf1bacd79" testId="81e0c18e-4772-6fa1-d47f-787fdf9bb13c" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:17.2198656" startTime="2025-06-21T12:04:34.6726107+00:00" endTime="2025-06-21T12:05:51.8878673+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="21732380-b04b-4b82-b9a7-198cf1bacd79" />
    <UnitTestResult executionId="12cf1e6a-6ecb-4727-8ec1-a41b697e68ef" testId="0b0a9a6a-23f0-cc40-565a-c3fa7fc2145c" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" computerName="fv-az1057-923" duration="00:01:15.6854004" startTime="2025-06-21T12:04:35.4428852+00:00" endTime="2025-06-21T12:05:50.8299442+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12cf1e6a-6ecb-4727-8ec1-a41b697e68ef" />
    <UnitTestResult executionId="8c4c362a-d1ea-45f3-91b0-1f0171de0ee7" testId="1f4210ec-0655-28e9-2ccb-ff891b7ba0c4" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:15.5710628" startTime="2025-06-21T12:04:34.6196234+00:00" endTime="2025-06-21T12:05:50.1482343+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c4c362a-d1ea-45f3-91b0-1f0171de0ee7" />
    <UnitTestResult executionId="21c79b59-0f8c-4032-8600-f1a0d3e6050b" testId="fe99808d-55a0-15da-f6cb-a89579618d0d" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:20.1294318" startTime="2025-06-21T12:04:35.4124106+00:00" endTime="2025-06-21T12:05:55.2183061+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="21c79b59-0f8c-4032-8600-f1a0d3e6050b" />
    <UnitTestResult executionId="f1bae8ee-065c-49c0-bdba-d147d30a4dbf" testId="7e59820f-dadc-96cd-6dd0-8ad0886178f5" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" computerName="fv-az1057-923" duration="00:01:15.4859180" startTime="2025-06-21T12:04:35.4588340+00:00" endTime="2025-06-21T12:05:50.6613832+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1bae8ee-065c-49c0-bdba-d147d30a4dbf" />
    <UnitTestResult executionId="8a57ede6-a0c6-4e52-8e6e-47403b6f4cc2" testId="738e3811-8bf4-17da-c2d7-5b3cc6dbde1c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:01.9319088" startTime="2025-06-21T12:04:36.4332514+00:00" endTime="2025-06-21T12:05:37.4910230+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a57ede6-a0c6-4e52-8e6e-47403b6f4cc2" />
    <UnitTestResult executionId="29fd4c76-b96e-4ae0-8e78-56cc1186b10b" testId="7b2d3959-a6ad-2f9a-dbb0-dd04000e11f9" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" computerName="fv-az1057-923" duration="00:01:09.2944557" startTime="2025-06-21T12:04:34.7377421+00:00" endTime="2025-06-21T12:05:44.0059720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29fd4c76-b96e-4ae0-8e78-56cc1186b10b">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="935d5038-3844-4dd9-ac0c-3b50faae6a4f" testId="cf61f207-8abb-9a94-935c-7470f4818d92" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:00.3893997" startTime="2025-06-21T12:04:35.9507518+00:00" endTime="2025-06-21T12:05:35.7009106+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="935d5038-3844-4dd9-ac0c-3b50faae6a4f">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="723378e6-497b-47fa-b693-796350998b1d" testId="8e6ec516-2c67-deda-43bb-0b0c7f8b171e" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" computerName="fv-az1057-923" duration="00:01:11.1640530" startTime="2025-06-21T12:04:35.0840430+00:00" endTime="2025-06-21T12:05:46.0318417+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="723378e6-497b-47fa-b693-796350998b1d" />
    <UnitTestResult executionId="d20ad31d-c57c-4577-9714-dfb17e43091a" testId="31400373-4ccd-22af-043e-d326a228e0aa" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:18.5145667" startTime="2025-06-21T12:04:35.8794788+00:00" endTime="2025-06-21T12:05:53.8051162+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d20ad31d-c57c-4577-9714-dfb17e43091a">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36c5da48-db42-4ab2-914f-6a24a5020b43" testId="9d0e94d6-ccac-0a2c-2a35-ede8fcd4dc4e" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:16.6165413" startTime="2025-06-21T12:04:36.7026402+00:00" endTime="2025-06-21T12:05:52.3840104+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36c5da48-db42-4ab2-914f-6a24a5020b43">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b8a8cde-5697-4bcf-b357-416bb367bf73" testId="00e4532e-f1be-f8d0-c15c-245adc25af88" testName="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_FirstElement_RemovesCorrectly" computerName="fv-az1057-923" duration="00:00:00.0015922" startTime="2025-06-21T12:04:35.0439802+00:00" endTime="2025-06-21T12:04:35.0445223+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b8a8cde-5697-4bcf-b357-416bb367bf73" />
    <UnitTestResult executionId="9fd3ce18-efe1-4dba-ada0-cf0170f9376e" testId="6c19af90-d4a0-ec60-62ff-872c8eb068ee" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(MockBehavior&quot;···)" computerName="fv-az1057-923" duration="00:01:00.3675666" startTime="2025-06-21T12:04:35.9846165+00:00" endTime="2025-06-21T12:05:35.7080309+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9fd3ce18-efe1-4dba-ada0-cf0170f9376e" />
    <UnitTestResult executionId="6ea94625-b988-4d66-a512-85d275988ac9" testId="648d8e17-b4c1-2838-47af-2f90467efb06" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.1154722" startTime="2025-06-21T12:04:36.5371243+00:00" endTime="2025-06-21T12:05:52.7168877+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ea94625-b988-4d66-a512-85d275988ac9" />
    <UnitTestResult executionId="78187df4-5cb4-4b90-88bf-8010727e63a6" testId="e4dbc117-c8e6-7d96-77db-415f65570986" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:01:13.2450435" startTime="2025-06-21T12:04:35.4369269+00:00" endTime="2025-06-21T12:05:48.3389215+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78187df4-5cb4-4b90-88bf-8010727e63a6" />
    <UnitTestResult executionId="02cea13d-ca16-48bc-92a0-5a36db97b428" testId="060891f8-85fe-6c11-4a73-fb35cb109d02" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:55.3160041" startTime="2025-06-21T12:04:36.0530627+00:00" endTime="2025-06-21T12:05:30.7366406+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02cea13d-ca16-48bc-92a0-5a36db97b428" />
    <UnitTestResult executionId="fd832528-7aac-47b3-ada8-38523cd75fe2" testId="52d58993-1316-a887-21f0-88a6a979dfd2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:15.7887060" startTime="2025-06-21T12:04:35.6691783+00:00" endTime="2025-06-21T12:05:51.0309472+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd832528-7aac-47b3-ada8-38523cd75fe2" />
    <UnitTestResult executionId="459bc0bc-20e8-4ee4-8987-637e1bfd1f98" testId="d55faab1-276f-4e1d-b0be-c8c5b2867f94" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupAdd(x =&gt; x.TestEvent &quot;···)" computerName="fv-az1057-923" duration="00:01:07.3004591" startTime="2025-06-21T12:04:37.0467173+00:00" endTime="2025-06-21T12:05:43.0128221+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="459bc0bc-20e8-4ee4-8987-637e1bfd1f98">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().SetupAdd(x =&gt; x.TestEvent += It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05f73e4b-e3da-4c27-b161-39b8463dc564" testId="69fb1b2d-2706-0896-e620-e99330f6f0f1" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:18.9232688" startTime="2025-06-21T12:04:36.6321419+00:00" endTime="2025-06-21T12:05:54.5299036+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05f73e4b-e3da-4c27-b161-39b8463dc564">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="adf7a294-9e5f-4e8c-98f7-17f701294cee" testId="3d9fe3c5-5f16-de4e-4b4f-629823d3f7bd" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.0138591" startTime="2025-06-21T12:04:36.4392267+00:00" endTime="2025-06-21T12:05:36.5710779+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adf7a294-9e5f-4e8c-98f7-17f701294cee" />
    <UnitTestResult executionId="ecea5b1a-ea14-48e3-9cd2-dd2b399948a7" testId="ae886758-9c66-3994-3702-dc0c66a63964" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" computerName="fv-az1057-923" duration="00:01:02.8325997" startTime="2025-06-21T12:04:34.8713848+00:00" endTime="2025-06-21T12:05:37.5901608+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ecea5b1a-ea14-48e3-9cd2-dd2b399948a7" />
    <UnitTestResult executionId="01d8f99a-023b-432f-92d4-eacfc6785d05" testId="96626b2c-b322-f72d-8351-42b78f38ad94" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:12.7747879" startTime="2025-06-21T12:04:35.1727530+00:00" endTime="2025-06-21T12:05:47.7268744+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01d8f99a-023b-432f-92d4-eacfc6785d05" />
    <UnitTestResult executionId="bc5dc1a1-472a-4fe5-b2d9-08b3eedfba6f" testId="fe7fb41d-0ead-0f02-41e3-e3cfca24d4af" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:05.8740951" startTime="2025-06-21T12:04:35.0709557+00:00" endTime="2025-06-21T12:05:40.7422192+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc5dc1a1-472a-4fe5-b2d9-08b3eedfba6f" />
    <UnitTestResult executionId="bd115a68-e635-4806-b599-0b65da2e6b31" testId="cce1209d-3f75-2835-b76c-ccd0a1b909e2" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" computerName="fv-az1057-923" duration="00:01:12.7458744" startTime="2025-06-21T12:04:36.5275240+00:00" endTime="2025-06-21T12:05:48.3259028+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd115a68-e635-4806-b599-0b65da2e6b31" />
    <UnitTestResult executionId="b98540b3-fcf7-4ee2-8a77-4c9c3309dbff" testId="5095ff7a-f563-0c42-25a7-ef992dc11ded" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:14.4966639" startTime="2025-06-21T12:04:34.6070095+00:00" endTime="2025-06-21T12:05:49.0700628+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b98540b3-fcf7-4ee2-8a77-4c9c3309dbff" />
    <UnitTestResult executionId="7affac04-282a-426f-ab8c-308d1f01efab" testId="3665f86a-769e-2533-a14f-841ef38bfe38" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:17.4703337" startTime="2025-06-21T12:04:34.6733456+00:00" endTime="2025-06-21T12:05:52.1645908+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7affac04-282a-426f-ab8c-308d1f01efab" />
    <UnitTestResult executionId="5b00d56c-55e6-4ef6-a962-f36d9d89ece8" testId="58e81949-d3a9-f68b-aaf9-7a88843f92f0" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_String_ThrowsArgumentNullException_WhenPredicateIsNull" computerName="fv-az1057-923" duration="00:00:00.0008042" startTime="2025-06-21T12:04:36.6443084+00:00" endTime="2025-06-21T12:04:36.6446258+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b00d56c-55e6-4ef6-a962-f36d9d89ece8" />
    <UnitTestResult executionId="fe78eda8-55f0-4c5f-b113-eb6cd3faa697" testId="feee4bbe-9ea0-c5bd-0dac-1d53be8df868" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" computerName="fv-az1057-923" duration="00:01:05.6650522" startTime="2025-06-21T12:04:34.8726056+00:00" endTime="2025-06-21T12:05:40.4261126+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe78eda8-55f0-4c5f-b113-eb6cd3faa697" />
    <UnitTestResult executionId="5cd4e470-8df8-467b-ac4b-4b041c7ea4d1" testId="2cb9e03b-1235-b522-f94b-0eb8b3870c50" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifySet(x =&gt; { x.Te&quot;···)" computerName="fv-az1057-923" duration="00:01:05.1570693" startTime="2025-06-21T12:04:34.8092350+00:00" endTime="2025-06-21T12:05:39.8907441+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5cd4e470-8df8-467b-ac4b-4b041c7ea4d1">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifySet(x =&gt; { x.TestProperty = It.IsAny&lt;string&gt;(); });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="725b05ca-8c1d-4e69-8378-e70e61fb4be6" testId="d8548820-f426-7b72-e979-00f72be49ac8" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8356541" startTime="2025-06-21T12:04:36.3670811+00:00" endTime="2025-06-21T12:05:55.3758673+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="725b05ca-8c1d-4e69-8378-e70e61fb4be6" />
    <UnitTestResult executionId="a430ad9a-f635-439f-b182-eca644b0a38f" testId="07409993-2127-76d8-31f1-28d42bdd87d1" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:19.7386280" startTime="2025-06-21T12:04:35.7862454+00:00" endTime="2025-06-21T12:05:54.9652185+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a430ad9a-f635-439f-b182-eca644b0a38f">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new MockRepository(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e8cc8005-e919-46ad-a23e-0fb9dc6e6ed1" testId="ca131384-82f6-83e4-2d9f-80361024a31e" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:12.6184449" startTime="2025-06-21T12:04:35.8510664+00:00" endTime="2025-06-21T12:05:47.9026093+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8cc8005-e919-46ad-a23e-0fb9dc6e6ed1">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c8b3ea35-1a25-4d0e-bfa8-f5cda67582c2" testId="fdde1ca8-5a4e-1fb8-4037-ad6ae3e468ae" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:16.9918506" startTime="2025-06-21T12:04:35.8852636+00:00" endTime="2025-06-21T12:05:52.2731160+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8b3ea35-1a25-4d0e-bfa8-f5cda67582c2">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a476bb4b-b7ea-4fa8-be18-d67ef7ba9fb7" testId="52365f11-aee8-65de-521b-619c832f24f1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:53.0958438" startTime="2025-06-21T12:04:36.0909024+00:00" endTime="2025-06-21T12:05:28.5208689+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a476bb4b-b7ea-4fa8-be18-d67ef7ba9fb7" />
    <UnitTestResult executionId="fcbd5cd3-c807-4034-8357-1878782b208b" testId="c3189fe3-b3ff-36cd-e2ca-dc0c6f0d4877" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:00:59.5792766" startTime="2025-06-21T12:04:36.7600472+00:00" endTime="2025-06-21T12:05:35.2500326+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcbd5cd3-c807-4034-8357-1878782b208b">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="91b8b3ff-8f7b-429f-a72b-d33f43f2448e" testId="478427fa-8669-c6b5-9fa7-131a94eeb6c4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:00:59.2531301" startTime="2025-06-21T12:04:35.9671698+00:00" endTime="2025-06-21T12:05:34.5797179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="91b8b3ff-8f7b-429f-a72b-d33f43f2448e" />
    <UnitTestResult executionId="87025f54-8f33-4e87-a002-83b1e4b17f4d" testId="8e7eb20d-1f0d-9f21-c16e-02c3b96cec72" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.0783028" startTime="2025-06-21T12:04:35.6656984+00:00" endTime="2025-06-21T12:05:49.2522899+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87025f54-8f33-4e87-a002-83b1e4b17f4d" />
    <UnitTestResult executionId="1271da8c-b0e8-4ef1-a157-d83b8bee2154" testId="4696a263-84dc-7433-49a8-0cd38fb89ab0" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" computerName="fv-az1057-923" duration="00:00:57.2335575" startTime="2025-06-21T12:04:35.0801838+00:00" endTime="2025-06-21T12:05:32.1000640+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1271da8c-b0e8-4ef1-a157-d83b8bee2154" />
    <UnitTestResult executionId="15314063-1e36-4eb6-b56b-0d9a1ceaf22a" testId="55254d55-c622-2d8a-0267-89f25597a3a4" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" computerName="fv-az1057-923" duration="00:01:14.4755586" startTime="2025-06-21T12:04:34.8460618+00:00" endTime="2025-06-21T12:05:49.2236901+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15314063-1e36-4eb6-b56b-0d9a1ceaf22a">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d8f5547-131e-4d22-9a35-e400dfd3cd85" testId="ba06cdea-5c7a-119e-f0de-7a2bb9091453" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:16.4914386" startTime="2025-06-21T12:04:35.1915719+00:00" endTime="2025-06-21T12:05:51.5236930+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d8f5547-131e-4d22-9a35-e400dfd3cd85" />
    <UnitTestResult executionId="3ed85fc0-4241-43a6-9ae0-360d9a3db85a" testId="919517a3-ee43-df33-14bc-fc439f5b5116" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7260641" startTime="2025-06-21T12:04:36.6504668+00:00" endTime="2025-06-21T12:05:55.3812432+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ed85fc0-4241-43a6-9ae0-360d9a3db85a">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7bbef49f-929d-4f93-8e5c-0787a20025c1" testId="dcea306f-cb59-43d5-ea22-c0cee42ec856" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:08.1334026" startTime="2025-06-21T12:04:34.5966139+00:00" endTime="2025-06-21T12:05:42.6930775+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7bbef49f-929d-4f93-8e5c-0787a20025c1" />
    <UnitTestResult executionId="d2b92d64-a9b9-4113-ba5f-1702d26a8716" testId="177c5f76-37bf-cb2c-583f-1f14061d01de" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" computerName="fv-az1057-923" duration="00:01:15.5932270" startTime="2025-06-21T12:04:36.4725052+00:00" endTime="2025-06-21T12:05:51.1549770+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2b92d64-a9b9-4113-ba5f-1702d26a8716" />
    <UnitTestResult executionId="8a759343-f725-43a0-8b7d-966e4e0e2c85" testId="8d7c1e9c-d2f4-714b-2d7b-fc952edb9fb7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" computerName="fv-az1057-923" duration="00:01:01.6244518" startTime="2025-06-21T12:04:36.3920587+00:00" endTime="2025-06-21T12:05:37.1420779+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a759343-f725-43a0-8b7d-966e4e0e2c85" />
    <UnitTestResult executionId="2b26058c-411d-474d-83eb-66197e143093" testId="ff3d4922-a5c8-deec-6e77-32801f5985c1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" computerName="fv-az1057-923" duration="00:01:15.3060145" startTime="2025-06-21T12:04:36.3500397+00:00" endTime="2025-06-21T12:05:50.8331490+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b26058c-411d-474d-83eb-66197e143093" />
    <UnitTestResult executionId="f9ec047e-6a54-4e92-ac90-a4c67c9cb9fe" testId="223186f7-4a40-43ff-9c08-2f534aa4ba65" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:05.5948620" startTime="2025-06-21T12:04:35.8637592+00:00" endTime="2025-06-21T12:05:40.8759411+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9ec047e-6a54-4e92-ac90-a4c67c9cb9fe">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3574b1e4-b300-4038-a756-4591a638de1d" testId="e00025bd-b1ac-835f-21e8-b8051b382760" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:00:58.3726420" startTime="2025-06-21T12:04:36.0227896+00:00" endTime="2025-06-21T12:05:33.7639099+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3574b1e4-b300-4038-a756-4591a638de1d" />
    <UnitTestResult executionId="ff0927e1-adc3-4dd9-8624-378182935320" testId="9b3e756d-f874-e5b2-3a94-363ffa3ec292" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" computerName="fv-az1057-923" duration="00:01:02.3713843" startTime="2025-06-21T12:04:35.9394780+00:00" endTime="2025-06-21T12:05:37.6889206+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff0927e1-adc3-4dd9-8624-378182935320">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9dafc772-08b9-4111-b1ed-020f124d9bb8" testId="9300cddc-7b3b-7071-dda7-b90012537978" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" computerName="fv-az1057-923" duration="00:01:16.6214068" startTime="2025-06-21T12:04:35.3879349+00:00" endTime="2025-06-21T12:05:51.6701785+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9dafc772-08b9-4111-b1ed-020f124d9bb8" />
    <UnitTestResult executionId="4a4c6d70-30c8-4b0a-8784-bb9f22133962" testId="fd799f24-7265-4182-8a14-9cdf49796b23" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" computerName="fv-az1057-923" duration="00:01:08.5395129" startTime="2025-06-21T12:04:34.9965209+00:00" endTime="2025-06-21T12:05:43.3746529+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a4c6d70-30c8-4b0a-8784-bb9f22133962">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test"))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d3298c9-b403-4abd-9da5-51fc9b971381" testId="bd569cf0-fc44-80ac-d268-06d64d833448" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:00.6577066" startTime="2025-06-21T12:04:35.9806807+00:00" endTime="2025-06-21T12:05:35.9938335+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d3298c9-b403-4abd-9da5-51fc9b971381" />
    <UnitTestResult executionId="53511e2b-5a94-4f7e-ac02-d127b9c03679" testId="7175c2fb-66be-cf87-906e-cf3edeb4343d" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2336106" startTime="2025-06-21T12:04:36.7671671+00:00" endTime="2025-06-21T12:05:53.9073016+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53511e2b-5a94-4f7e-ac02-d127b9c03679">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14718b6b-d515-4c7f-b410-a98979b9e511" testId="7f711b18-b6b1-4833-3ef9-805c26688df2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.5664767" startTime="2025-06-21T12:04:35.5939271+00:00" endTime="2025-06-21T12:05:50.7597535+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14718b6b-d515-4c7f-b410-a98979b9e511" />
    <UnitTestResult executionId="082c4505-4252-48dc-8f5e-d3d58a439bff" testId="14335f76-3166-4157-be6d-2e5e154aeda9" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:09.3363849" startTime="2025-06-21T12:04:34.9300635+00:00" endTime="2025-06-21T12:05:44.1404336+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="082c4505-4252-48dc-8f5e-d3d58a439bff">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="05a80928-7be1-43f6-aace-49c1ef961b4c" testId="f4f67e27-a125-4cae-1179-a70efc26c409" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:14.6145834" startTime="2025-06-21T12:04:35.3940303+00:00" endTime="2025-06-21T12:05:49.6603432+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05a80928-7be1-43f6-aace-49c1ef961b4c" />
    <UnitTestResult executionId="33144cc7-7e50-4e55-aaf6-c3240d82b4ed" testId="83bf5aaa-2d46-3b5f-d348-d63267b1adfb" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" computerName="fv-az1057-923" duration="00:01:07.2224269" startTime="2025-06-21T12:04:37.0089833+00:00" endTime="2025-06-21T12:05:42.9168948+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33144cc7-7e50-4e55-aaf6-c3240d82b4ed" />
    <UnitTestResult executionId="53fb387e-2a25-492b-933c-bc96b2ffaf7a" testId="9467ac43-e3e1-879b-f5e5-0013b3269997" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:17.0596376" startTime="2025-06-21T12:04:34.6098155+00:00" endTime="2025-06-21T12:05:51.6453894+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53fb387e-2a25-492b-933c-bc96b2ffaf7a" />
    <UnitTestResult executionId="fb79ac34-d109-433d-a910-cdb0147fc5cb" testId="8b2f67c3-dad5-943c-db20-750c00ec3f10" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" computerName="fv-az1057-923" duration="00:01:17.3820776" startTime="2025-06-21T12:04:36.3469533+00:00" endTime="2025-06-21T12:05:52.9609766+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb79ac34-d109-433d-a910-cdb0147fc5cb" />
    <UnitTestResult executionId="a7409e63-c5fe-456b-9518-faf7482251d5" testId="3228ca39-d7f6-df03-7bda-7947f9751218" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.7467020" startTime="2025-06-21T12:04:35.3663683+00:00" endTime="2025-06-21T12:05:45.7529625+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7409e63-c5fe-456b-9518-faf7482251d5" />
    <UnitTestResult executionId="3ef6ee56-9d54-4be5-b9f9-8204acf2bb56" testId="d46b3e85-a761-1f0c-9fe7-25a9f39fd348" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:04.2710020" startTime="2025-06-21T12:04:35.8862653+00:00" endTime="2025-06-21T12:05:39.5998806+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ef6ee56-9d54-4be5-b9f9-8204acf2bb56" />
    <UnitTestResult executionId="8f03ad6d-7c47-4af8-8bc7-89191865cad8" testId="347ec476-ec39-285b-043c-b037f89ef0ad" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:01.2572827" startTime="2025-06-21T12:04:35.9800744+00:00" endTime="2025-06-21T12:05:36.6304740+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f03ad6d-7c47-4af8-8bc7-89191865cad8" />
    <UnitTestResult executionId="802eb2d7-648f-4178-a00b-bfa7f704332a" testId="1603bd7b-a340-8d92-43dd-0ab95232aca1" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" computerName="fv-az1057-923" duration="00:01:06.3282298" startTime="2025-06-21T12:04:35.0116763+00:00" endTime="2025-06-21T12:05:41.1740699+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="802eb2d7-648f-4178-a00b-bfa7f704332a">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(42);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4aa2cae3-f028-46d4-b88f-9ce57be29bb8" testId="8a87e595-dad6-03a6-7231-c9602203b8c9" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:09.2225941" startTime="2025-06-21T12:04:35.9075462+00:00" endTime="2025-06-21T12:05:44.5441694+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4aa2cae3-f028-46d4-b88f-9ce57be29bb8">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2eb362b-2375-4c12-a97f-742658872a9b" testId="caae96bf-473e-7bb8-9a74-f357e8f1f5d3" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" computerName="fv-az1057-923" duration="00:01:09.7663898" startTime="2025-06-21T12:04:36.7566283+00:00" endTime="2025-06-21T12:05:45.4353146+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2eb362b-2375-4c12-a97f-742658872a9b">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7faabc0-b09d-4eca-a16e-da0cac438d7c" testId="4c024474-4833-b78f-f0a1-611d0597d295" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" computerName="fv-az1057-923" duration="00:01:04.1270882" startTime="2025-06-21T12:04:35.0091315+00:00" endTime="2025-06-21T12:05:38.9698913+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7faabc0-b09d-4eca-a16e-da0cac438d7c">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d2301042-e8f7-439b-890c-de6c6378eae1" testId="3195319b-151c-4203-cd8e-17304e583e95" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithSuppressMessage(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:18.9756667" startTime="2025-06-21T12:04:35.7326779+00:00" endTime="2025-06-21T12:05:54.1778749+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2301042-e8f7-439b-890c-de6c6378eae1" />
    <UnitTestResult executionId="097138aa-75a0-457b-a154-3bf703a504b2" testId="86dd5656-1779-5c6e-8031-6bbe3d5fba49" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:01:07.6431922" startTime="2025-06-21T12:04:35.1030724+00:00" endTime="2025-06-21T12:05:42.5310907+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="097138aa-75a0-457b-a154-3bf703a504b2" />
    <UnitTestResult executionId="2bc4cbf8-4b1f-4d49-9686-0c36cbff7d48" testId="a0aefbfc-2fdb-bca5-a92a-3b5e16315d37" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:18.5854698" startTime="2025-06-21T12:04:36.5833669+00:00" endTime="2025-06-21T12:05:54.1790766+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2bc4cbf8-4b1f-4d49-9686-0c36cbff7d48" />
    <UnitTestResult executionId="b9e5815c-6a5e-4161-8622-d0d4b1ee6487" testId="abde3b24-a138-e11f-ff2a-f048d722f45b" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" computerName="fv-az1057-923" duration="00:01:08.0531962" startTime="2025-06-21T12:04:34.6955544+00:00" endTime="2025-06-21T12:05:42.8089927+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9e5815c-6a5e-4161-8622-d0d4b1ee6487">
      <Output>
        <StdOut>Original:


public class MyClass
{
    public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:


public class MyClass
{
    public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="120cad20-1b90-418c-b53c-c3f2e5273f4b" testId="8926aa7d-14c3-3602-dc95-b631b7d5ee27" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:01:17.2599232" startTime="2025-06-21T12:04:35.1092059+00:00" endTime="2025-06-21T12:05:52.1689145+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="120cad20-1b90-418c-b53c-c3f2e5273f4b" />
    <UnitTestResult executionId="0f88e85a-d861-48de-8548-51353fd10cea" testId="210ff133-d9cc-0e93-fb06-886f5f977654" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" computerName="fv-az1057-923" duration="00:01:19.4764054" startTime="2025-06-21T12:04:34.6888273+00:00" endTime="2025-06-21T12:05:54.1687084+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f88e85a-d861-48de-8548-51353fd10cea">
      <Output>
        <StdOut>Original:


public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:


public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal virtual string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1b4d81f6-270b-49e3-b60a-8063abfe45cf" testId="90cfe239-73f1-f00a-fe24-1690903626bb" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.4723846" startTime="2025-06-21T12:04:35.3995144+00:00" endTime="2025-06-21T12:05:51.5242452+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b4d81f6-270b-49e3-b60a-8063abfe45cf" />
    <UnitTestResult executionId="c88748da-236e-426f-bc6d-cc8d4543e45c" testId="664b851f-009f-fda5-d4f6-9e2acd3460e0" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.TestProp&quot;···)" computerName="fv-az1057-923" duration="00:01:03.8594452" startTime="2025-06-21T12:04:37.0383211+00:00" endTime="2025-06-21T12:05:39.5669472+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c88748da-236e-426f-bc6d-cc8d4543e45c">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f64e056-8eaf-4a08-80a0-bc3beaa3126e" testId="4f37d230-6296-612d-363f-3ba2d6785e2d" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:20.7151370" startTime="2025-06-21T12:04:34.6518942+00:00" endTime="2025-06-21T12:05:55.3328982+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f64e056-8eaf-4a08-80a0-bc3beaa3126e" />
    <UnitTestResult executionId="1e763304-f2cc-464e-b148-a4e7bda80254" testId="3cd110b0-491f-78df-9610-2e1de51d5588" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" computerName="fv-az1057-923" duration="00:01:08.9103217" startTime="2025-06-21T12:04:34.9764615+00:00" endTime="2025-06-21T12:05:43.7365181+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e763304-f2cc-464e-b148-a4e7bda80254">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2a4b8e4-bfdd-4dd2-8df6-a5d2ad5b2c93" testId="1b11ad31-fde4-1222-2dc1-e2416a02527f" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" computerName="fv-az1057-923" duration="00:01:04.4515888" startTime="2025-06-21T12:04:37.0334470+00:00" endTime="2025-06-21T12:05:40.1599073+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2a4b8e4-bfdd-4dd2-8df6-a5d2ad5b2c93">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1200:new Mock&lt;SampleClassWithNonVirtualIndexer&gt;().Setup(x =&gt; x[0])|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bd3b649-f55a-4e4e-8a4f-fdcae33092ee" testId="71eabc56-c4b7-cb7e-d6c4-5661ed313124" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:09.9050246" startTime="2025-06-21T12:04:35.2016178+00:00" endTime="2025-06-21T12:05:44.8694175+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bd3b649-f55a-4e4e-8a4f-fdcae33092ee" />
    <UnitTestResult executionId="52c76772-248d-441f-aaf4-e354ae180965" testId="f0bad7e1-ea2f-6014-0166-ebb22c995597" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7741181" startTime="2025-06-21T12:04:35.0357058+00:00" endTime="2025-06-21T12:05:54.6581393+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52c76772-248d-441f-aaf4-e354ae180965">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Returns(10);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74b709b4-494e-4f98-921a-315c111eabf8" testId="2cec5191-2f53-9d65-b339-02e794bb814e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" computerName="fv-az1057-923" duration="00:01:19.2723085" startTime="2025-06-21T12:04:36.4786175+00:00" endTime="2025-06-21T12:05:54.8474843+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74b709b4-494e-4f98-921a-315c111eabf8" />
    <UnitTestResult executionId="c8b4ec9e-9806-433f-b119-d0a2867edeb6" testId="ea0276c7-890d-a80f-8e5d-82723522592c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" computerName="fv-az1057-923" duration="00:01:19.6053703" startTime="2025-06-21T12:04:36.6040580+00:00" endTime="2025-06-21T12:05:55.2193959+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8b4ec9e-9806-433f-b119-d0a2867edeb6" />
    <UnitTestResult executionId="7aebc797-a86b-4aba-9d53-4a576ff62b6c" testId="4e1bc35b-995b-adfc-b288-93e3d0e2ea47" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:20.1108028" startTime="2025-06-21T12:04:35.4084994+00:00" endTime="2025-06-21T12:05:55.1921967+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7aebc797-a86b-4aba-9d53-4a576ff62b6c" />
    <UnitTestResult executionId="66c09eae-8730-4136-8ba3-c8765d078759" testId="8b49317e-f629-5196-f117-429a98c3e1d1" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" computerName="fv-az1057-923" duration="00:01:19.2382844" startTime="2025-06-21T12:04:35.3799226+00:00" endTime="2025-06-21T12:05:54.3162662+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66c09eae-8730-4136-8ba3-c8765d078759" />
    <UnitTestResult executionId="a7c3429b-445b-4d76-88df-0d7b0a0374b0" testId="68c60298-6dac-6ae5-4e97-e234c732dbda" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:00:53.9239016" startTime="2025-06-21T12:04:35.1740370+00:00" endTime="2025-06-21T12:05:28.8789694+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7c3429b-445b-4d76-88df-0d7b0a0374b0" />
    <UnitTestResult executionId="a3146c99-0eb1-4617-a17d-4cc166b95195" testId="eb44f292-5787-9552-1e2b-12e154c08460" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:16.7600611" startTime="2025-06-21T12:04:34.6034880+00:00" endTime="2025-06-21T12:05:51.3178929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3146c99-0eb1-4617-a17d-4cc166b95195" />
    <UnitTestResult executionId="88866a16-505e-4ffa-9409-138c86725f1b" testId="0b1fa43b-9919-2bb1-47e5-b81001e3486e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" computerName="fv-az1057-923" duration="00:01:19.3826863" startTime="2025-06-21T12:04:35.3805771+00:00" endTime="2025-06-21T12:05:54.4460660+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88866a16-505e-4ffa-9409-138c86725f1b" />
    <UnitTestResult executionId="4ee9cf8a-7253-4907-ba5f-e1c22b4059ee" testId="cbda1c55-2da6-8044-ec47-bdd6f7812fac" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" computerName="fv-az1057-923" duration="00:01:01.5198016" startTime="2025-06-21T12:04:35.8901933+00:00" endTime="2025-06-21T12:05:36.8032774+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ee9cf8a-7253-4907-ba5f-e1c22b4059ee" />
    <UnitTestResult executionId="1d874d2f-e94d-40ef-8b7e-ce3cf00980eb" testId="0e6731c1-f755-0423-e726-6129aa898c9d" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.6224527" startTime="2025-06-21T12:04:35.1698160+00:00" endTime="2025-06-21T12:05:36.5800907+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d874d2f-e94d-40ef-8b7e-ce3cf00980eb" />
    <UnitTestResult executionId="920ec162-2023-4aa9-881f-240344d2d360" testId="337001e7-7cf8-13cb-a2ef-22a93b02ab66" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" computerName="fv-az1057-923" duration="00:01:01.4245493" startTime="2025-06-21T12:04:37.0458043+00:00" endTime="2025-06-21T12:05:37.1385921+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="920ec162-2023-4aa9-881f-240344d2d360">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetString(It.IsRegex("[a-zA-Z]+", System.Text.RegularExpressions.RegexOptions.IgnoreCase)));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="99125a88-e1ae-4923-9d7d-92d5b199a840" testId="1754211e-6071-fd9a-f5a1-578cf7ab8cee" testName="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_RemovesElementAtIndex" computerName="fv-az1057-923" duration="00:00:00.0001949" startTime="2025-06-21T12:04:35.0456846+00:00" endTime="2025-06-21T12:04:35.0459858+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99125a88-e1ae-4923-9d7d-92d5b199a840" />
    <UnitTestResult executionId="f864fee2-4e8b-4c41-bbcb-4815d8c3f5cb" testId="60c8935b-2e3c-e621-7459-1958f11e67e6" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:16.5251173" startTime="2025-06-21T12:04:34.8076435+00:00" endTime="2025-06-21T12:05:51.3372160+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f864fee2-4e8b-4c41-bbcb-4815d8c3f5cb">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="76c52781-33f5-42cc-a56d-ad9b6d38d69b" testId="36504397-6d0d-3518-732f-84835bf4c0b8" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:00:53.2878114" startTime="2025-06-21T12:04:37.0275598+00:00" endTime="2025-06-21T12:05:28.9913916+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76c52781-33f5-42cc-a56d-ad9b6d38d69b" />
    <UnitTestResult executionId="a17bf099-effb-4c4a-95a8-046f29779f46" testId="a0b2bcae-4dc7-5018-19cc-990e79f815f7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldNotProduceDiagnosticsForInterfaceWhenSuppressed" computerName="fv-az1057-923" duration="00:01:10.1803344" startTime="2025-06-21T12:04:35.8100630+00:00" endTime="2025-06-21T12:05:45.4389378+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a17bf099-effb-4c4a-95a8-046f29779f46" />
    <UnitTestResult executionId="3c372a30-9ae0-49dc-ae08-6e4f654efefb" testId="c0fd621c-4da8-4baf-dd99-1aea8a1398b3" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" computerName="fv-az1057-923" duration="00:01:21.4859888" startTime="2025-06-21T12:04:35.2213513+00:00" endTime="2025-06-21T12:05:56.4710261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c372a30-9ae0-49dc-ae08-6e4f654efefb" />
    <UnitTestResult executionId="737a7623-142b-4886-bf7d-df21a8ad3378" testId="a6ce8e98-9f9a-40b2-b6b2-4d9957d96401" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" computerName="fv-az1057-923" duration="00:01:12.8776604" startTime="2025-06-21T12:04:34.8136883+00:00" endTime="2025-06-21T12:05:47.6180633+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="737a7623-142b-4886-bf7d-df21a8ad3378">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0c6796d2-fbaa-4502-b041-a4e1bb44efeb" testId="69140cf6-b12f-82de-93e7-f78e85c1bf76" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" computerName="fv-az1057-923" duration="00:01:10.9663484" startTime="2025-06-21T12:04:35.3764584+00:00" endTime="2025-06-21T12:05:45.9864376+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c6796d2-fbaa-4502-b041-a4e1bb44efeb" />
    <UnitTestResult executionId="7930c278-29fb-47df-ac67-5b06b3e406ca" testId="e19972f0-84af-4f45-5cb3-5671c5b223ad" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.9227786" startTime="2025-06-21T12:04:35.3251151+00:00" endTime="2025-06-21T12:05:45.9168971+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7930c278-29fb-47df-ac67-5b06b3e406ca" />
    <UnitTestResult executionId="e71c1dfe-2705-45ba-96d7-9f14637821b1" testId="b90b552e-26fd-1e35-f96c-d7f905cb8a53" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:11.0311686" startTime="2025-06-21T12:04:36.3837293+00:00" endTime="2025-06-21T12:05:46.5519684+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e71c1dfe-2705-45ba-96d7-9f14637821b1" />
    <UnitTestResult executionId="eebb59e2-185e-438a-951c-313d1b0fc68b" testId="33513528-6bdb-f9eb-62fa-871637ab4407" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true, M&quot;···)" computerName="fv-az1057-923" duration="00:00:52.3292317" startTime="2025-06-21T12:04:36.0081470+00:00" endTime="2025-06-21T12:05:27.7011271+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eebb59e2-185e-438a-951c-313d1b0fc68b" />
    <UnitTestResult executionId="00a83ca0-88dc-41aa-a73a-741ca9952570" testId="cd8ce32f-f88c-e8c4-f71c-d67c3aa116d3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:00:51.2013145" startTime="2025-06-21T12:04:36.2608410+00:00" endTime="2025-06-21T12:05:26.6649320+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00a83ca0-88dc-41aa-a73a-741ca9952570" />
    <UnitTestResult executionId="3d39a08d-28c6-4851-aa3d-48ac2bb4178c" testId="51a412c0-5f46-9eb3-fa2f-2061ec4cdbae" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.7815568" startTime="2025-06-21T12:04:35.4070283+00:00" endTime="2025-06-21T12:05:51.8448145+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d39a08d-28c6-4851-aa3d-48ac2bb4178c" />
    <UnitTestResult executionId="f051533b-79bc-4d33-81ff-588fa6bd6ce1" testId="84120cc5-5c8d-3d98-2fe4-459894241e70" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledGlobally(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:08.8813107" startTime="2025-06-21T12:04:35.8285237+00:00" endTime="2025-06-21T12:05:44.1455912+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f051533b-79bc-4d33-81ff-588fa6bd6ce1" />
    <UnitTestResult executionId="258a9575-4bfb-4ce8-9c97-4d1ad7712c2a" testId="dcd1422b-84e8-7c60-4422-d64816df66a9" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" computerName="fv-az1057-923" duration="00:01:09.3562923" startTime="2025-06-21T12:04:35.2614463+00:00" endTime="2025-06-21T12:05:44.3388825+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="258a9575-4bfb-4ce8-9c97-4d1ad7712c2a">
      <Output>
        <StdOut>namespace MyNamespace;

public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAsync()).ReturnsAsync(string.Empty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bbe343ac-bad2-4c76-8d42-abf458acefe7" testId="7051f829-9e0a-1b72-f8a9-6f40e76e6400" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForAbstractMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:12.2424621" startTime="2025-06-21T12:04:34.6792535+00:00" endTime="2025-06-21T12:05:46.9463698+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bbe343ac-bad2-4c76-8d42-abf458acefe7" />
    <UnitTestResult executionId="60a32053-7bec-4dc8-a42f-0dfccf8fa41a" testId="1d15151d-171c-433f-dc07-059ee5aac532" testName="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" computerName="fv-az1057-923" duration="00:01:21.1983742" startTime="2025-06-21T12:04:35.1047241+00:00" endTime="2025-06-21T12:05:56.1029456+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60a32053-7bec-4dc8-a42f-0dfccf8fa41a" />
    <UnitTestResult executionId="1a009dc5-5f94-45d6-8e7f-31a85503ca15" testId="9e3c042a-3a90-ee8c-eada-b894b45bb9b3" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:05.0824705" startTime="2025-06-21T12:04:34.9025716+00:00" endTime="2025-06-21T12:05:39.8680535+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a009dc5-5f94-45d6-8e7f-31a85503ca15" />
    <UnitTestResult executionId="454503ed-a309-4869-9350-fdfe19ad1bce" testId="c1cdd2bf-0204-c315-7de7-a755f815f9c3" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:15.3617108" startTime="2025-06-21T12:04:34.9757325+00:00" endTime="2025-06-21T12:05:50.2016912+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="454503ed-a309-4869-9350-fdfe19ad1bce">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a5464380-1b8d-4c6b-a2ac-04ec6ca1a538" testId="34961ea7-162c-5f1a-0422-c325d3516ddc" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:03.1323675" startTime="2025-06-21T12:04:35.1412800+00:00" endTime="2025-06-21T12:05:38.0649725+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5464380-1b8d-4c6b-a2ac-04ec6ca1a538" />
    <UnitTestResult executionId="8f3ad5c8-28a5-418c-8d84-28e66cb750e6" testId="22c1ca95-7281-7892-4c74-f6a6e33bb828" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.5661049" startTime="2025-06-21T12:04:36.6047239+00:00" endTime="2025-06-21T12:05:51.1651600+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f3ad5c8-28a5-418c-8d84-28e66cb750e6" />
    <UnitTestResult executionId="8394525f-876d-4791-9a1e-f2138d3aaae7" testId="0b0d90a3-f911-727b-bb6c-a616ca206b70" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.5709271" startTime="2025-06-21T12:04:35.4515071+00:00" endTime="2025-06-21T12:05:49.6566384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8394525f-876d-4791-9a1e-f2138d3aaae7" />
    <UnitTestResult executionId="dc8056f4-c767-41ad-beac-ba12285ad218" testId="338fdded-f693-fdc1-cd5a-dd3fd86d059d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.9589771" startTime="2025-06-21T12:04:35.4482566+00:00" endTime="2025-06-21T12:05:37.0815038+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc8056f4-c767-41ad-beac-ba12285ad218" />
    <UnitTestResult executionId="ea1d3f54-3780-4819-ad4a-4e3d7af97585" testId="0d443d03-f3e9-544d-e7ff-742d77f69748" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.8385852" startTime="2025-06-21T12:04:36.6054194+00:00" endTime="2025-06-21T12:05:51.4378341+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea1d3f54-3780-4819-ad4a-4e3d7af97585" />
    <UnitTestResult executionId="d0750c7b-79aa-4744-a618-999ab3ae9fe4" testId="dca52caf-f7af-cf9d-012d-d4287aeccac9" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:06.0070470" startTime="2025-06-21T12:04:35.1854502+00:00" endTime="2025-06-21T12:05:40.9720680+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0750c7b-79aa-4744-a618-999ab3ae9fe4" />
    <UnitTestResult executionId="6851e905-6f00-4e08-a056-a3cd8373e699" testId="1201572e-ade3-125a-549e-97ed61b623ce" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" computerName="fv-az1057-923" duration="00:01:22.7098175" startTime="2025-06-21T12:04:35.2100432+00:00" endTime="2025-06-21T12:05:57.6734995+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6851e905-6f00-4e08-a056-a3cd8373e699" />
    <UnitTestResult executionId="4b41b84a-4fe4-48c2-b7a4-7b27cda1afba" testId="ba8a1de4-78b2-c265-827f-ff0f9203b099" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" computerName="fv-az1057-923" duration="00:01:13.8687879" startTime="2025-06-21T12:04:35.7913078+00:00" endTime="2025-06-21T12:05:49.1150954+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b41b84a-4fe4-48c2-b7a4-7b27cda1afba">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6ac536b5-b59e-431f-a74c-27fcb185a280" testId="d870c43f-5efb-5680-7ac1-06a3e4a199e1" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.9856554" startTime="2025-06-21T12:04:35.6595281+00:00" endTime="2025-06-21T12:05:51.1322967+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ac536b5-b59e-431f-a74c-27fcb185a280" />
    <UnitTestResult executionId="afeeeb2c-f742-4151-a322-aec3743ca770" testId="88b5cbc4-8fe5-08f7-7ce9-297f40b5cb60" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" computerName="fv-az1057-923" duration="00:01:09.1607589" startTime="2025-06-21T12:04:34.6843982+00:00" endTime="2025-06-21T12:05:43.8662222+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="afeeeb2c-f742-4151-a322-aec3743ca770">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    [Obsolete]
public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    [Obsolete]
public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0de859d5-4bb1-49d9-b1bb-b566d0ccb838" testId="ff946a47-a680-c36f-e812-0eb2b3f3a020" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" computerName="fv-az1057-923" duration="00:01:03.4444055" startTime="2025-06-21T12:04:35.9506604+00:00" endTime="2025-06-21T12:05:38.7662166+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0de859d5-4bb1-49d9-b1bb-b566d0ccb838">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0afad8d3-981e-4e30-b8d4-803b76604964" testId="9a665167-a7ba-6003-5af0-e7318f8ddd7a" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:10.8408051" startTime="2025-06-21T12:04:35.3913409+00:00" endTime="2025-06-21T12:05:45.9101615+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0afad8d3-981e-4e30-b8d4-803b76604964" />
    <UnitTestResult executionId="5de6da15-a1e2-4092-9bee-55b72d04bf9a" testId="ebaf7d3f-4c5c-80f3-2378-e249c404426d" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:54.3565701" startTime="2025-06-21T12:04:35.8984582+00:00" endTime="2025-06-21T12:05:29.6460939+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5de6da15-a1e2-4092-9bee-55b72d04bf9a" />
    <UnitTestResult executionId="b4a4fdda-7438-4eaa-b97f-eb7e6781a7e5" testId="fbefc20a-fabf-2034-dc82-563bba9c5a38" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:04.6599704" startTime="2025-06-21T12:04:35.9319747+00:00" endTime="2025-06-21T12:05:39.9891648+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4a4fdda-7438-4eaa-b97f-eb7e6781a7e5">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="581cce38-cf03-4bdb-a693-c090b310d350" testId="298b8ff6-7b1d-afae-44e7-3bc96f574aed" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:51.0546911" startTime="2025-06-21T12:04:36.0482590+00:00" endTime="2025-06-21T12:05:26.4759371+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="581cce38-cf03-4bdb-a693-c090b310d350" />
    <UnitTestResult executionId="62340b62-ddc3-4c59-81de-57e50b5b7e4b" testId="2118aba4-b361-426b-bedb-883490cf8462" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" computerName="fv-az1057-923" duration="00:01:10.4729328" startTime="2025-06-21T12:04:34.8750445+00:00" endTime="2025-06-21T12:05:45.2360326+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62340b62-ddc3-4c59-81de-57e50b5b7e4b" />
    <UnitTestResult executionId="5ed90392-237f-4695-a0ec-99d89bd7794f" testId="e2d8b9c0-7e3b-490e-77a4-9bfc5c4a33f3" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.7298816" startTime="2025-06-21T12:04:35.4319919+00:00" endTime="2025-06-21T12:05:46.8210658+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ed90392-237f-4695-a0ec-99d89bd7794f" />
    <UnitTestResult executionId="4efa7f80-ce58-4f60-ace2-5301d7ce1119" testId="d939777f-90e3-6a2b-692c-bbdabe037a2c" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:09.5471928" startTime="2025-06-21T12:04:36.9970024+00:00" endTime="2025-06-21T12:05:45.2498858+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4efa7f80-ce58-4f60-ace2-5301d7ce1119">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns((string s) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4528aba9-0200-4f37-8918-87f2dccf5faa" testId="ca81e23f-4b10-013e-4c1c-ca51d2d61e52" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" computerName="fv-az1057-923" duration="00:00:58.4739228" startTime="2025-06-21T12:04:35.3223066+00:00" endTime="2025-06-21T12:05:33.4641454+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4528aba9-0200-4f37-8918-87f2dccf5faa">
      <Output>
        <StdOut>public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.GenericValueTaskAsync().Result|});
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b2b5d8a-5de1-4ea3-8572-b0823773f000" testId="de64c332-bc71-9d34-4186-84fd6e761f17" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" computerName="fv-az1057-923" duration="00:00:53.7185587" startTime="2025-06-21T12:04:35.8402034+00:00" endTime="2025-06-21T12:05:28.9910502+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b2b5d8a-5de1-4ea3-8572-b0823773f000" />
    <UnitTestResult executionId="dc5f0490-6bc7-4b55-8cc8-525c2ca26331" testId="b7f744e2-4460-5a29-41eb-317872412275" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" computerName="fv-az1057-923" duration="00:01:19.0607215" startTime="2025-06-21T12:04:35.5962514+00:00" endTime="2025-06-21T12:05:54.1781559+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc5f0490-6bc7-4b55-8cc8-525c2ca26331" />
    <UnitTestResult executionId="7a937272-8bb1-44cb-b6bd-ad2afbb7eac9" testId="1eebcde7-938a-d08f-ccd2-ac59dde74284" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.1729150" startTime="2025-06-21T12:04:36.3438004+00:00" endTime="2025-06-21T12:05:50.7098929+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a937272-8bb1-44cb-b6bd-ad2afbb7eac9" />
    <UnitTestResult executionId="ea576596-6e11-4162-bb70-11825a3b3e60" testId="e6b0ecef-21fe-6463-9b4d-b9161063ea40" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.7708319" startTime="2025-06-21T12:04:35.6561216+00:00" endTime="2025-06-21T12:05:47.9029596+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea576596-6e11-4162-bb70-11825a3b3e60" />
    <UnitTestResult executionId="1964a421-5e53-4827-9082-6bef80e6453d" testId="a473c7ef-9fe3-84a1-6a05-32c32190bf5e" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:01:15.6895528" startTime="2025-06-21T12:04:35.4412427+00:00" endTime="2025-06-21T12:05:50.7815800+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1964a421-5e53-4827-9082-6bef80e6453d" />
    <UnitTestResult executionId="0972a8b4-1c72-4097-96d7-976bc0e2fb20" testId="817201d5-538d-c277-4d81-8f1fdc4ae401" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" computerName="fv-az1057-923" duration="00:00:51.5571494" startTime="2025-06-21T12:04:36.1353661+00:00" endTime="2025-06-21T12:05:27.0059007+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0972a8b4-1c72-4097-96d7-976bc0e2fb20" />
    <UnitTestResult executionId="9ffb33f6-a6d1-4e83-8402-c535b011ec04" testId="6b21f0c6-8cfa-64f7-e793-967b87c310cd" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" computerName="fv-az1057-923" duration="00:00:55.9936346" startTime="2025-06-21T12:04:35.9194202+00:00" endTime="2025-06-21T12:05:31.2933471+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ffb33f6-a6d1-4e83-8402-c535b011ec04">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="51cd516b-ca74-4d1e-95fb-cddb2138a377" testId="cee37f97-bb50-240f-7737-e77559985153" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:04.3188745" startTime="2025-06-21T12:04:35.8210791+00:00" endTime="2025-06-21T12:05:39.5810599+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51cd516b-ca74-4d1e-95fb-cddb2138a377" />
    <UnitTestResult executionId="6ab49963-a66c-4b8a-bb29-c0f6a50dfac6" testId="85d26a70-67a8-c9b3-a3c1-b0cb8b77ff44" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:14.6459389" startTime="2025-06-21T12:04:36.4422535+00:00" endTime="2025-06-21T12:05:50.2121034+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ab49963-a66c-4b8a-bb29-c0f6a50dfac6" />
    <UnitTestResult executionId="09e88732-1396-474e-a586-835db72ff60a" testId="6b03325a-d3cc-48a3-8d04-204e3075844b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:11.4041076" startTime="2025-06-21T12:04:36.4034949+00:00" endTime="2025-06-21T12:05:46.9796384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="09e88732-1396-474e-a586-835db72ff60a" />
    <UnitTestResult executionId="cc623c90-d63f-413c-a0c3-d62166f78ee2" testId="ee0f9233-92a2-e055-1512-08d4ca5197b9" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:04.2130246" startTime="2025-06-21T12:04:35.8006274+00:00" endTime="2025-06-21T12:05:39.4870447+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc623c90-d63f-413c-a0c3-d62166f78ee2" />
    <UnitTestResult executionId="da770ceb-5bdc-43ec-a91e-c1cbffef1d8e" testId="287661b4-44d3-57df-3bcc-bb53d4328cfb" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" computerName="fv-az1057-923" duration="00:01:06.7073992" startTime="2025-06-21T12:04:35.8153759+00:00" endTime="2025-06-21T12:05:41.9652152+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da770ceb-5bdc-43ec-a91e-c1cbffef1d8e" />
    <UnitTestResult executionId="3c408cdd-78ca-418a-8b6e-bd6aed156eb2" testId="9f2734ae-1576-987c-d71a-5235b2f99444" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:11.8696630" startTime="2025-06-21T12:04:35.6540514+00:00" endTime="2025-06-21T12:05:46.9969121+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c408cdd-78ca-418a-8b6e-bd6aed156eb2" />
    <UnitTestResult executionId="01b101e4-6dc5-4e50-adcb-febd62e08145" testId="8dec5d6d-6bf1-1f24-6b9a-267ed757f0ae" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:04.0721300" startTime="2025-06-21T12:04:35.8803851+00:00" endTime="2025-06-21T12:05:39.3520329+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01b101e4-6dc5-4e50-adcb-febd62e08145">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:Mock.Of&lt;ISample&gt;()|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="942cdf25-c14e-4e11-a15b-7612f472c9eb" testId="796860d2-6009-f817-20bc-a605880d865a" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomDelegate += It.&quot;···)" computerName="fv-az1057-923" duration="00:01:16.9919684" startTime="2025-06-21T12:04:34.6407468+00:00" endTime="2025-06-21T12:05:51.5711062+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="942cdf25-c14e-4e11-a15b-7612f472c9eb" />
    <UnitTestResult executionId="7e941679-6dde-4452-a1d7-eaebe9f25ebe" testId="ad2f12b0-adfc-9e54-6c19-965cb7813b78" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:14.5771380" startTime="2025-06-21T12:04:36.6414514+00:00" endTime="2025-06-21T12:05:50.1991289+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e941679-6dde-4452-a1d7-eaebe9f25ebe">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;()|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="27298cd3-37a3-426a-b600-c9c25d00c464" testId="4df72243-87d1-263e-20f3-bd5c315bc93e" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:01:15.7060986" startTime="2025-06-21T12:04:37.0210721+00:00" endTime="2025-06-21T12:05:51.4054040+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27298cd3-37a3-426a-b600-c9c25d00c464" />
    <UnitTestResult executionId="ff7f29a3-96f5-46bd-aa56-1d08db54913b" testId="029b3bd6-157d-b5c2-6bee-b24b5ef82a38" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:20.2029526" startTime="2025-06-21T12:04:35.3969376+00:00" endTime="2025-06-21T12:05:55.3203325+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff7f29a3-96f5-46bd-aa56-1d08db54913b" />
    <UnitTestResult executionId="a8f1d933-cbd4-406d-be77-8f46b717f578" testId="f62af25d-628e-4ab3-3d02-dc09b355b702" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" computerName="fv-az1057-923" duration="00:01:00.8799359" startTime="2025-06-21T12:04:35.9142708+00:00" endTime="2025-06-21T12:05:36.1772868+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8f1d933-cbd4-406d-be77-8f46b717f578">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ed6aefe-cf27-4df6-9aa6-7287bce17503" testId="afd82792-cad8-3d17-fcde-ff9313817a4f" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" computerName="fv-az1057-923" duration="00:01:17.5800314" startTime="2025-06-21T12:04:34.9332202+00:00" endTime="2025-06-21T12:05:52.4364226+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ed6aefe-cf27-4df6-9aa6-7287bce17503">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7f15015-e4f5-47e0-9ae3-9727a9695273" testId="8b692484-1227-b348-95bd-e59796d9e7eb" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomEvent += It.IsA&quot;···)" computerName="fv-az1057-923" duration="00:01:20.0208198" startTime="2025-06-21T12:04:34.6285369+00:00" endTime="2025-06-21T12:05:54.5943515+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7f15015-e4f5-47e0-9ae3-9727a9695273" />
    <UnitTestResult executionId="8c0b59c6-7dfb-4460-93f9-dc9ba6706a98" testId="06927e24-8553-b38d-2a9f-c93d0f91052b" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:18.7708958" startTime="2025-06-21T12:04:35.7184648+00:00" endTime="2025-06-21T12:05:53.9580652+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c0b59c6-7dfb-4460-93f9-dc9ba6706a98">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="94b8257e-ae51-4a4f-92d8-b02c82b8ef26" testId="2fa0664c-72aa-3768-312d-27aafd3319dd" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" computerName="fv-az1057-923" duration="00:01:22.6512812" startTime="2025-06-21T12:04:35.2207023+00:00" endTime="2025-06-21T12:05:57.6251585+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94b8257e-ae51-4a4f-92d8-b02c82b8ef26" />
    <UnitTestResult executionId="f2af301a-fef3-4e4c-8c95-151e407d351f" testId="f9a20186-dbd7-ba1a-e555-304aae1e99e9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:09.8892889" startTime="2025-06-21T12:04:36.0461336+00:00" endTime="2025-06-21T12:05:45.3040764+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2af301a-fef3-4e4c-8c95-151e407d351f" />
    <UnitTestResult executionId="80db9bdb-bbcf-4387-8ab5-968c6a9df7b6" testId="4463e7c1-ae74-f38e-8e47-ff7d1b082a16" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" computerName="fv-az1057-923" duration="00:01:19.4921050" startTime="2025-06-21T12:04:36.5255337+00:00" endTime="2025-06-21T12:05:55.0960483+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80db9bdb-bbcf-4387-8ab5-968c6a9df7b6" />
    <UnitTestResult executionId="55cb60d6-c357-4686-8207-e7884deed58e" testId="848e31fc-460e-748d-b4df-e721579fa1c0" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" computerName="fv-az1057-923" duration="00:01:19.7237393" startTime="2025-06-21T12:04:34.8355581+00:00" endTime="2025-06-21T12:05:54.4689261+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55cb60d6-c357-4686-8207-e7884deed58e">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78cf3c1f-ca36-4bd0-9dfe-248131447fa3" testId="3fd8e3b2-9660-662b-ecbb-c22f45608ea3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" computerName="fv-az1057-923" duration="00:01:18.5850907" startTime="2025-06-21T12:04:36.3141382+00:00" endTime="2025-06-21T12:05:54.0752157+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78cf3c1f-ca36-4bd0-9dfe-248131447fa3" />
    <UnitTestResult executionId="e80bf378-0c99-42af-8f69-7468e065614c" testId="49a2db0c-2000-b336-6b8d-4c1068b334ba" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:01:18.9948057" startTime="2025-06-21T12:04:36.6038228+00:00" endTime="2025-06-21T12:05:54.5915179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e80bf378-0c99-42af-8f69-7468e065614c" />
    <UnitTestResult executionId="5a0bf850-03c9-43a2-a3de-fa834daa54d0" testId="813cb6ee-da34-913d-76e9-3657fd89c030" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:00:54.2136783" startTime="2025-06-21T12:04:35.0936421+00:00" endTime="2025-06-21T12:05:29.0883748+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a0bf850-03c9-43a2-a3de-fa834daa54d0" />
    <UnitTestResult executionId="1e9c85dc-83b1-4749-a874-713eec5c4e6f" testId="04bc0b3e-290c-e8c6-08a9-2ea12bb1b1db" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var empty = string.Empty;&quot;)" computerName="fv-az1057-923" duration="00:01:02.2216302" startTime="2025-06-21T12:04:35.5710477+00:00" endTime="2025-06-21T12:05:37.3745677+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e9c85dc-83b1-4749-a874-713eec5c4e6f" />
    <UnitTestResult executionId="6a05c38d-32b8-49ce-9cc8-4c598bed1e4f" testId="dc4fc128-8931-b024-d815-bf9ea257740e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.7977999" startTime="2025-06-21T12:04:35.6675224+00:00" endTime="2025-06-21T12:05:50.9651496+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a05c38d-32b8-49ce-9cc8-4c598bed1e4f" />
    <UnitTestResult executionId="4db1c8ae-d7a2-4cde-aef1-d1618fcdd37c" testId="f90557c3-591e-a64e-85d0-a41008f26e8b" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" computerName="fv-az1057-923" duration="00:01:19.5055687" startTime="2025-06-21T12:04:37.0170623+00:00" endTime="2025-06-21T12:05:55.2670488+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4db1c8ae-d7a2-4cde-aef1-d1618fcdd37c" />
    <UnitTestResult executionId="6782370b-00b8-416a-89c6-97b6857ce7d3" testId="9d8481b6-f221-7d79-7288-d444986416bd" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:14.9136800" startTime="2025-06-21T12:04:36.7036087+00:00" endTime="2025-06-21T12:05:50.6243064+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6782370b-00b8-416a-89c6-97b6857ce7d3">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns(0).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0595a9b6-c3a9-4f38-9884-40a7c2d9bbdf" testId="ff98d5aa-43d1-be6d-3634-0981f89e52ef" testName="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" computerName="fv-az1057-923" duration="00:01:02.1263752" startTime="2025-06-21T12:04:35.8017030+00:00" endTime="2025-06-21T12:05:37.3759413+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0595a9b6-c3a9-4f38-9884-40a7c2d9bbdf" />
    <UnitTestResult executionId="ab627786-99d1-4ecc-ab28-6bf98b875e1b" testId="119c0cf8-29af-95cc-fde9-a0c838229e36" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:13.5617568" startTime="2025-06-21T12:04:34.9469267+00:00" endTime="2025-06-21T12:05:48.4040749+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab627786-99d1-4ecc-ab28-6bf98b875e1b" />
    <UnitTestResult executionId="4b445449-c7f9-4ccb-8b23-b0964b2d405b" testId="2cdc6410-dad9-e174-746d-f4f5ae17bc42" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" computerName="fv-az1057-923" duration="00:00:51.1299879" startTime="2025-06-21T12:04:36.2987472+00:00" endTime="2025-06-21T12:05:26.6154487+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b445449-c7f9-4ccb-8b23-b0964b2d405b" />
    <UnitTestResult executionId="a6bdb01c-99cb-4c5a-99a9-070dde4487dc" testId="fcf1b20d-df6f-a0af-be8a-1fd84c3700e3" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceContainsMultipleElements" computerName="fv-az1057-923" duration="00:00:00.0185365" startTime="2025-06-21T12:04:36.6497839+00:00" endTime="2025-06-21T12:04:36.7263751+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6bdb01c-99cb-4c5a-99a9-070dde4487dc" />
    <UnitTestResult executionId="d18e4779-400e-4dd3-a3b6-3456ba3ad7f0" testId="f9075e55-a1ab-e51e-c458-544f4f0f0989" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" computerName="fv-az1057-923" duration="00:01:07.3355777" startTime="2025-06-21T12:04:34.8667467+00:00" endTime="2025-06-21T12:05:42.0930511+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d18e4779-400e-4dd3-a3b6-3456ba3ad7f0" />
    <UnitTestResult executionId="99472725-b2b6-4356-ab7e-ae17efa4ed4e" testId="e76b3250-5961-6e43-c59b-57074f2ffb0a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" computerName="fv-az1057-923" duration="00:00:54.7268561" startTime="2025-06-21T12:04:36.2615298+00:00" endTime="2025-06-21T12:05:30.2280067+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99472725-b2b6-4356-ab7e-ae17efa4ed4e" />
    <UnitTestResult executionId="96d06470-3da5-462a-93e3-a103e3899ad0" testId="6cb16d50-8458-d87e-f91b-ebc6c103b101" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" computerName="fv-az1057-923" duration="00:01:17.6870460" startTime="2025-06-21T12:04:34.8700527+00:00" endTime="2025-06-21T12:05:52.4650902+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96d06470-3da5-462a-93e3-a103e3899ad0" />
    <UnitTestResult executionId="ee9f2e0b-58c5-4ca6-8bd7-eaeb2c953162" testId="1fb5e3a9-3415-a192-b8b2-479c50f545e9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:57.9359763" startTime="2025-06-21T12:04:36.0410243+00:00" endTime="2025-06-21T12:05:33.3376564+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee9f2e0b-58c5-4ca6-8bd7-eaeb2c953162" />
    <UnitTestResult executionId="494b14ff-a82d-4719-a7aa-c63e9b63b9ea" testId="0e1dcc21-49bc-d12b-cc1e-28e29b871df2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.0072247" startTime="2025-06-21T12:04:35.6402475+00:00" endTime="2025-06-21T12:05:36.1074840+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="494b14ff-a82d-4719-a7aa-c63e9b63b9ea" />
    <UnitTestResult executionId="c50246f8-d522-4c1a-962b-9b3376b86763" testId="2dcf9206-a39c-023c-1b91-8deb234ca9ac" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8132832" startTime="2025-06-21T12:04:34.5988557+00:00" endTime="2025-06-21T12:05:54.4124144+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c50246f8-d522-4c1a-962b-9b3376b86763" />
    <UnitTestResult executionId="7c191b51-2f91-45d1-a688-a7d450ef6b79" testId="ef400665-66d4-f249-bbb0-23a205302735" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:00:58.4752950" startTime="2025-06-21T12:04:35.0954372+00:00" endTime="2025-06-21T12:05:33.3514774+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c191b51-2f91-45d1-a688-a7d450ef6b79" />
    <UnitTestResult executionId="30bf9ee7-1612-4904-b943-9c06e90afde5" testId="40c5b490-af60-905a-2862-d626f4fa4049" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:00:58.9174455" startTime="2025-06-21T12:04:36.7501966+00:00" endTime="2025-06-21T12:05:34.5908932+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30bf9ee7-1612-4904-b943-9c06e90afde5">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e1ad693-306c-4579-833a-050565898cda" testId="3075606a-2651-8a19-6c37-84b9048ca11b" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:17.3234421" startTime="2025-06-21T12:04:34.6705154+00:00" endTime="2025-06-21T12:05:52.0349771+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e1ad693-306c-4579-833a-050565898cda" />
    <UnitTestResult executionId="195e28e2-bf75-44b7-9ce7-a4485a402626" testId="740ed921-7857-935c-7a59-679c8d5a1f2a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:57.7726373" startTime="2025-06-21T12:04:36.0513869+00:00" endTime="2025-06-21T12:05:33.2022205+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="195e28e2-bf75-44b7-9ce7-a4485a402626" />
    <UnitTestResult executionId="875fa101-344e-4261-b15b-3049a4df1604" testId="d5c45084-ace7-5d46-b742-306047088c1d" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:00.0955849" startTime="2025-06-21T12:04:36.6883088+00:00" endTime="2025-06-21T12:05:35.7783918+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="875fa101-344e-4261-b15b-3049a4df1604">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6fc24a1-236f-4d89-9257-d2cce2a6cf96" testId="42d36bf5-4d15-8675-d808-68fa800b87bc" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:03.3682677" startTime="2025-06-21T12:04:36.0362300+00:00" endTime="2025-06-21T12:05:38.7968974+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6fc24a1-236f-4d89-9257-d2cce2a6cf96" />
    <UnitTestResult executionId="222abfc0-7d2e-4ef8-ab67-a912d5c70581" testId="757fe415-4fa0-4784-3598-b2597cdf6a55" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:14.5892220" startTime="2025-06-21T12:04:35.9426462+00:00" endTime="2025-06-21T12:05:49.9140692+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="222abfc0-7d2e-4ef8-ab67-a912d5c70581">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a28993a1-3209-43cf-a1d5-5f146a7112c1" testId="a254eb0c-c7fa-060b-09e7-121c7d52b332" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" computerName="fv-az1057-923" duration="00:01:11.2303560" startTime="2025-06-21T12:04:34.9317320+00:00" endTime="2025-06-21T12:05:46.0299964+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a28993a1-3209-43cf-a1d5-5f146a7112c1">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fffbd2c1-48d7-43ce-8a42-57c3e245a842" testId="99e7c4e0-cdc4-36c5-f1d8-03fe30c98242" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" computerName="fv-az1057-923" duration="00:01:07.9579906" startTime="2025-06-21T12:04:34.8930262+00:00" endTime="2025-06-21T12:05:42.7300161+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fffbd2c1-48d7-43ce-8a42-57c3e245a842">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestProperty);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2c46699-ae5e-49c9-8f2e-e2144ec7a28c" testId="1c2f6689-e44b-8d7c-5ab0-a4af8b28a111" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.8495250" startTime="2025-06-21T12:04:35.4949301+00:00" endTime="2025-06-21T12:05:47.9441372+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2c46699-ae5e-49c9-8f2e-e2144ec7a28c" />
    <UnitTestResult executionId="60650067-a94b-4893-b198-187df622256b" testId="4a0de354-8867-0982-ba36-ec5aef98e532" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" computerName="fv-az1057-923" duration="00:00:59.0857699" startTime="2025-06-21T12:04:36.7116785+00:00" endTime="2025-06-21T12:05:34.7460347+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60650067-a94b-4893-b198-187df622256b">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9c18141e-bd20-4110-891c-5b67779b98fe" testId="f9a84eb9-0814-30a0-baf2-2618094b6ac6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:04.3275856" startTime="2025-06-21T12:04:36.0794258+00:00" endTime="2025-06-21T12:05:39.7799260+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c18141e-bd20-4110-891c-5b67779b98fe" />
    <UnitTestResult executionId="12749515-5bcd-49fd-8bf1-7bb7cefcf7da" testId="ee6d3f10-ea5d-353a-7895-33eb774d68d2" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" computerName="fv-az1057-923" duration="00:01:14.9545157" startTime="2025-06-21T12:04:34.8939754+00:00" endTime="2025-06-21T12:05:49.7712532+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12749515-5bcd-49fd-8bf1-7bb7cefcf7da">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c746be7e-a6dc-41a0-b719-125d160749c7" testId="45d658bd-f3ef-758f-ccea-de7d58e6ad58" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:16.6804183" startTime="2025-06-21T12:04:35.3947338+00:00" endTime="2025-06-21T12:05:51.7318333+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c746be7e-a6dc-41a0-b719-125d160749c7" />
    <UnitTestResult executionId="683c57f3-a882-4d79-8841-b4ff9cde867c" testId="b0cd9556-4025-93d1-a19c-7805f9c5be2a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var empty = string.Empty;&quot;)" computerName="fv-az1057-923" duration="00:01:00.4250649" startTime="2025-06-21T12:04:35.4461013+00:00" endTime="2025-06-21T12:05:35.5428198+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="683c57f3-a882-4d79-8841-b4ff9cde867c" />
    <UnitTestResult executionId="7bef2f90-caa9-4830-b089-98c70ddcea77" testId="96a328c5-6282-d0c0-3358-2259dd9644cd" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.3836902" startTime="2025-06-21T12:04:35.8818827+00:00" endTime="2025-06-21T12:05:36.6759223+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7bef2f90-caa9-4830-b089-98c70ddcea77">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d5c55b1f-3ebe-4e29-b185-8ae0f9614dfe" testId="0bbd89e4-3a5b-dc97-977e-06217f4102b5" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:19.6361564" startTime="2025-06-21T12:04:36.9921633+00:00" endTime="2025-06-21T12:05:55.3270557+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d5c55b1f-3ebe-4e29-b185-8ae0f9614dfe">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5ed262d8-1d2e-4e2f-b6aa-76d626968c58" testId="733d5aee-e5e0-2236-47f9-958f554d3f33" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3360382" startTime="2025-06-21T12:04:36.4978737+00:00" endTime="2025-06-21T12:05:54.9501849+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ed262d8-1d2e-4e2f-b6aa-76d626968c58" />
    <UnitTestResult executionId="1f164ce3-165d-4560-89f0-c374c3562166" testId="80714c7e-aac0-a368-da4d-a024c5ace8f2" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:14.5558753" startTime="2025-06-21T12:04:35.7249806+00:00" endTime="2025-06-21T12:05:49.7608585+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f164ce3-165d-4560-89f0-c374c3562166" />
    <UnitTestResult executionId="14d0f600-eee3-44e3-9075-4eb9ee74ef0e" testId="2232975d-655f-5684-2057-06724adffb2c" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:58.3327569" startTime="2025-06-21T12:04:35.2332753+00:00" endTime="2025-06-21T12:05:33.3098742+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14d0f600-eee3-44e3-9075-4eb9ee74ef0e" />
    <UnitTestResult executionId="f50ec3f6-9321-4b9b-bee2-357888ee8322" testId="8c83830c-a6e1-edd1-dc18-eba69e6e4288" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:59.6918407" startTime="2025-06-21T12:04:35.1177162+00:00" endTime="2025-06-21T12:05:34.5917847+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f50ec3f6-9321-4b9b-bee2-357888ee8322" />
    <UnitTestResult executionId="d2c1c920-10b1-437f-919e-788720d2ffd6" testId="518e298e-2f3b-953e-8194-f9e2796cb5fa" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:00:56.9513696" startTime="2025-06-21T12:04:34.6129967+00:00" endTime="2025-06-21T12:05:31.5104799+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2c1c920-10b1-437f-919e-788720d2ffd6" />
    <UnitTestResult executionId="65e3e65c-fb9a-42dd-baa2-0edf9ff5f2f8" testId="1fa64a88-170f-e7ed-e766-2f9ac0e045ac" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.DoSomething&quot;···)" computerName="fv-az1057-923" duration="00:01:03.9727829" startTime="2025-06-21T12:04:37.0634138+00:00" endTime="2025-06-21T12:05:39.7071269+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65e3e65c-fb9a-42dd-baa2-0edf9ff5f2f8">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.DoSomethingAsync());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4fe6703f-8316-4494-90f3-50b787ea5cf2" testId="7844bc50-0d77-bd07-3f9e-b23472f38903" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" computerName="fv-az1057-923" duration="00:01:17.8783820" startTime="2025-06-21T12:04:34.7966939+00:00" endTime="2025-06-21T12:05:52.6328782+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4fe6703f-8316-4494-90f3-50b787ea5cf2">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="107e4e4d-6ae0-441f-95d0-31aca3d68673" testId="67a37f55-fa59-3d1f-8feb-211b7981c57b" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:14.3560271" startTime="2025-06-21T12:04:35.7798090+00:00" endTime="2025-06-21T12:05:49.5994245+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="107e4e4d-6ae0-441f-95d0-31aca3d68673" />
    <UnitTestResult executionId="fc6e69c3-5434-426a-ab82-0241c4fee665" testId="74efdc0c-ce87-06ae-a8f4-a1548b4fe6af" testName="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_SingleElementArray_ReturnsEmptyArray" computerName="fv-az1057-923" duration="00:00:00.0028393" startTime="2025-06-21T12:04:35.0484239+00:00" endTime="2025-06-21T12:04:35.0495677+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc6e69c3-5434-426a-ab82-0241c4fee665" />
    <UnitTestResult executionId="8ba376ce-9b72-4b9d-b73f-0c5ea88eba19" testId="b88132be-c46a-97a5-4553-eba1c75b090f" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" computerName="fv-az1057-923" duration="00:01:06.8704574" startTime="2025-06-21T12:04:34.9354649+00:00" endTime="2025-06-21T12:05:41.6889527+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ba376ce-9b72-4b9d-b73f-0c5ea88eba19">
      <Output>
        <StdOut>Original:


public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}

Fixed:


public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9903b274-08b3-4623-8311-c5b670f4ff08" testId="c1f1bcc4-50f1-66fc-885d-98faf6bef61d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.3072759" startTime="2025-06-21T12:04:35.4561066+00:00" endTime="2025-06-21T12:05:36.3998687+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9903b274-08b3-4623-8311-c5b670f4ff08" />
    <UnitTestResult executionId="22d7f62b-96de-4004-80ab-efd931ecb735" testId="c63e4c32-042f-a1dc-2b21-77918123cea6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:03.2588393" startTime="2025-06-21T12:04:36.0088553+00:00" endTime="2025-06-21T12:05:38.6479308+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22d7f62b-96de-4004-80ab-efd931ecb735" />
    <UnitTestResult executionId="20e78a82-f0a7-413f-a221-bf248d521116" testId="cd1510dd-8416-2029-508f-cc9097a6f7e0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:19.4734635" startTime="2025-06-21T12:04:36.6061120+00:00" endTime="2025-06-21T12:05:55.1044102+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20e78a82-f0a7-413f-a221-bf248d521116" />
    <UnitTestResult executionId="b520c932-d2a3-4ddb-a9be-017d4845466f" testId="ac802864-65fc-0a68-c43f-1a3bdfcecf1c" testName="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.ToImmutableDictionary_RoundTripsProperties" computerName="fv-az1057-923" duration="00:00:00.0065491" startTime="2025-06-21T12:04:34.7043782+00:00" endTime="2025-06-21T12:04:34.7108439+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b520c932-d2a3-4ddb-a9be-017d4845466f" />
    <UnitTestResult executionId="58f29789-1050-4d50-b46a-20a213452718" testId="1fd9d5b6-176a-c980-37a3-eab8b8aa5882" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" computerName="fv-az1057-923" duration="00:01:02.2355979" startTime="2025-06-21T12:04:35.9052615+00:00" endTime="2025-06-21T12:05:37.5575625+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58f29789-1050-4d50-b46a-20a213452718">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42))).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01b8885f-9019-454c-bb57-5bdf4bf61348" testId="fa3456ff-71a1-75ae-acd4-91b534380251" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:01:12.4938336" startTime="2025-06-21T12:04:35.7953587+00:00" endTime="2025-06-21T12:05:47.7271157+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01b8885f-9019-454c-bb57-5bdf4bf61348" />
    <UnitTestResult executionId="37251bb5-d8dd-430a-8235-517aba801c0c" testId="d309feda-4353-3107-0849-3bb5a4ba9150" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:07.7705223" startTime="2025-06-21T12:04:35.2140286+00:00" endTime="2025-06-21T12:05:42.7370116+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37251bb5-d8dd-430a-8235-517aba801c0c" />
    <UnitTestResult executionId="65bdbe67-addf-462e-801c-16ac1b8a4f4d" testId="8d8a981a-dd3a-918c-ab34-4f02198962b0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" computerName="fv-az1057-923" duration="00:01:02.2337044" startTime="2025-06-21T12:04:36.1981535+00:00" endTime="2025-06-21T12:05:37.7242287+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65bdbe67-addf-462e-801c-16ac1b8a4f4d" />
    <UnitTestResult executionId="521cbdf9-1bd9-4541-8e66-56ae0bf4c589" testId="34992958-035d-0d80-fa63-3ffcb7541fcf" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:18.4467220" startTime="2025-06-21T12:04:35.0099807+00:00" endTime="2025-06-21T12:05:53.3234266+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="521cbdf9-1bd9-4541-8e66-56ae0bf4c589" />
    <UnitTestResult executionId="2271080f-052e-4c5a-a5b6-7aab6b770a8e" testId="9df928f9-66c7-ba59-6de1-2d1c042a311a" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:06.0250090" startTime="2025-06-21T12:04:35.0332363+00:00" endTime="2025-06-21T12:05:40.8714223+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2271080f-052e-4c5a-a5b6-7aab6b770a8e">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0490cc6b-bbb3-4dfe-b01c-2a3ceadbd386" testId="80974313-6fd8-a182-60cc-083767daa6a3" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:05.0686402" startTime="2025-06-21T12:04:34.6242151+00:00" endTime="2025-06-21T12:05:39.6443074+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0490cc6b-bbb3-4dfe-b01c-2a3ceadbd386" />
    <UnitTestResult executionId="2768a54c-335a-4c4e-9ef5-6324a5e22977" testId="09f97e3b-0a2a-9c3c-4c6a-04d143a3ea08" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.0424966" startTime="2025-06-21T12:04:35.3886059+00:00" endTime="2025-06-21T12:05:50.0831173+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2768a54c-335a-4c4e-9ef5-6324a5e22977" />
    <UnitTestResult executionId="2c89f9fa-f5b2-4d65-ad3e-5d906d36fa61" testId="8eba2de9-38c5-5bd4-25a7-ef326c22dada" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:16.4447902" startTime="2025-06-21T12:04:35.7611653+00:00" endTime="2025-06-21T12:05:51.7070239+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c89f9fa-f5b2-4d65-ad3e-5d906d36fa61" />
    <UnitTestResult executionId="010641dc-3f58-4372-b39a-2368aace0198" testId="562a7f45-d480-b9b0-c13d-dd55f0799d1f" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:14.4174957" startTime="2025-06-21T12:04:35.6851158+00:00" endTime="2025-06-21T12:05:49.6660121+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="010641dc-3f58-4372-b39a-2368aace0198" />
    <UnitTestResult executionId="f81b5b06-0d5a-4f9a-9191-ddf200998206" testId="818de790-05ce-2719-2a07-4a7c15fe2872" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.0661679" startTime="2025-06-21T12:04:35.6568307+00:00" endTime="2025-06-21T12:05:50.2218685+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f81b5b06-0d5a-4f9a-9191-ddf200998206" />
    <UnitTestResult executionId="58a60344-ad3a-4f3e-8ecd-e2db1842209a" testId="303299c1-3e94-ee22-a3be-78b710909305" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:13.1585208" startTime="2025-06-21T12:04:36.5268735+00:00" endTime="2025-06-21T12:05:48.7371777+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58a60344-ad3a-4f3e-8ecd-e2db1842209a" />
    <UnitTestResult executionId="ac3845e5-6aee-4323-9a6d-a9671ce41c47" testId="efb32894-dd94-6868-39f1-8586a0e0690d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.8909034" startTime="2025-06-21T12:04:35.4388072+00:00" endTime="2025-06-21T12:05:55.0109126+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac3845e5-6aee-4323-9a6d-a9671ce41c47" />
    <UnitTestResult executionId="f9b2cf01-2b24-4cbe-944c-87f789898de4" testId="7afdd8e5-1781-3fc2-086a-a21e44777dfd" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" computerName="fv-az1057-923" duration="00:00:52.3925731" startTime="2025-06-21T12:04:35.9592594+00:00" endTime="2025-06-21T12:05:27.7033887+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9b2cf01-2b24-4cbe-944c-87f789898de4" />
    <UnitTestResult executionId="03f01fb7-07b4-44a4-94e2-ba196f9f7b97" testId="f8c12b4d-0589-0e8a-5210-2283b97684bc" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:12.0710916" startTime="2025-06-21T12:04:36.6283996+00:00" endTime="2025-06-21T12:05:47.6969831+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03f01fb7-07b4-44a4-94e2-ba196f9f7b97">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new MockRepository(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5a91a1c-010c-49ad-b7e5-13c37a7745f4" testId="7cecfa68-bb2f-4f10-4bd2-d7ea0d66de53" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForVirtualMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:01:18.3104557" startTime="2025-06-21T12:04:34.6799485+00:00" endTime="2025-06-21T12:05:52.9937984+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5a91a1c-010c-49ad-b7e5-13c37a7745f4" />
    <UnitTestResult executionId="651b676d-f9df-4972-9f4a-29681df76b96" testId="2a6e5096-eb3e-e88c-c25b-4b74a56f6acc" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:04.6515890" startTime="2025-06-21T12:04:35.1557614+00:00" endTime="2025-06-21T12:05:39.6232155+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="651b676d-f9df-4972-9f4a-29681df76b96" />
    <UnitTestResult executionId="2756e60e-49f9-446f-989b-47fad1af205c" testId="9d4550af-8126-3e8b-7f27-9049f4b76998" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" computerName="fv-az1057-923" duration="00:01:13.9796041" startTime="2025-06-21T12:04:36.7634102+00:00" endTime="2025-06-21T12:05:49.6495570+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2756e60e-49f9-446f-989b-47fad1af205c">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="123667c5-bacd-4cb1-96bd-fc41dc51afde" testId="5cae8636-fea7-0c20-c103-e25398002aa9" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:18.6061926" startTime="2025-06-21T12:04:35.4043677+00:00" endTime="2025-06-21T12:05:53.6619381+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="123667c5-bacd-4cb1-96bd-fc41dc51afde" />
    <UnitTestResult executionId="99e99709-06cd-45c3-8182-20a9249b8e30" testId="658933ec-f275-97b7-4599-cc8e60bbc74d" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:00:58.6344294" startTime="2025-06-21T12:04:35.4345890+00:00" endTime="2025-06-21T12:05:33.7501401+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99e99709-06cd-45c3-8182-20a9249b8e30" />
    <UnitTestResult executionId="65d32a24-7433-4601-bd69-351b211cab0d" testId="66cc7fdd-3411-a566-73b4-70262ac55b45" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" computerName="fv-az1057-923" duration="00:00:58.9618237" startTime="2025-06-21T12:04:35.9859265+00:00" endTime="2025-06-21T12:05:34.3460336+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65d32a24-7433-4601-bd69-351b211cab0d" />
    <UnitTestResult executionId="8ec78464-2ebb-430a-8a6c-c09f07dfc23a" testId="3ecd5d21-bf67-b085-c225-a09603de01c7" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:17.3057386" startTime="2025-06-21T12:04:35.4444426+00:00" endTime="2025-06-21T12:05:52.4406138+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ec78464-2ebb-430a-8a6c-c09f07dfc23a" />
    <UnitTestResult executionId="96241cb8-61cc-4ac3-bfe3-2da048fd27a7" testId="33c00f43-3262-2298-a2e1-2c7504613afd" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" computerName="fv-az1057-923" duration="00:01:21.7016406" startTime="2025-06-21T12:04:35.2629174+00:00" endTime="2025-06-21T12:05:56.6820783+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96241cb8-61cc-4ac3-bfe3-2da048fd27a7" />
    <UnitTestResult executionId="3188bdd0-a0d7-4982-9181-f66082974fc0" testId="9920fee9-1e37-8e33-52bd-86415158ba28" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:00:54.1773530" startTime="2025-06-21T12:04:36.2600485+00:00" endTime="2025-06-21T12:05:29.6418182+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3188bdd0-a0d7-4982-9181-f66082974fc0" />
    <UnitTestResult executionId="f5497839-040a-4605-b050-df35f19c6da6" testId="f5950339-2292-3277-1b1e-630be83f9390" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:02.2600893" startTime="2025-06-21T12:04:35.9644800+00:00" endTime="2025-06-21T12:05:37.5758962+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5497839-040a-4605-b050-df35f19c6da6" />
    <UnitTestResult executionId="bb885986-d147-484a-bef1-4bfd34617fa8" testId="5d9d8932-9c03-4450-9f3a-19df60fee432" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2498090" startTime="2025-06-21T12:04:35.3665763+00:00" endTime="2025-06-21T12:05:52.2790537+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb885986-d147-484a-bef1-4bfd34617fa8" />
    <UnitTestResult executionId="12c93bb4-38fc-4f3b-8c7d-a42483038fc8" testId="4389b15a-0924-fb9a-9e09-b873bd0f4ba7" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" computerName="fv-az1057-923" duration="00:01:01.1740027" startTime="2025-06-21T12:04:35.1505039+00:00" endTime="2025-06-21T12:05:36.1191952+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12c93bb4-38fc-4f3b-8c7d-a42483038fc8" />
    <UnitTestResult executionId="963f34ae-4bb2-4d3b-ac70-550fe98db32a" testId="93bf0a08-10eb-ab8d-ecf0-787e7d6afb59" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifySet(x =&gt; {&quot;···)" computerName="fv-az1057-923" duration="00:01:06.0871159" startTime="2025-06-21T12:04:34.8886033+00:00" endTime="2025-06-21T12:05:40.8611491+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="963f34ae-4bb2-4d3b-ac70-550fe98db32a">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().VerifySet(x =&gt; { x.Property = It.IsAny&lt;int&gt;(); })|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3ed71df4-2c3f-4f1b-b086-f5e83be9f771" testId="7743a6e1-82ab-43a3-63b1-629e96ed1213" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" computerName="fv-az1057-923" duration="00:01:16.0920046" startTime="2025-06-21T12:04:35.4231353+00:00" endTime="2025-06-21T12:05:51.1599370+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3ed71df4-2c3f-4f1b-b086-f5e83be9f771" />
    <UnitTestResult executionId="893b3676-c26e-450c-befe-f488c931a772" testId="4141211a-72b4-90d6-fcbb-20b655acf361" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.7299570" startTime="2025-06-21T12:04:35.3348198+00:00" endTime="2025-06-21T12:05:45.7299293+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="893b3676-c26e-450c-befe-f488c931a772" />
    <UnitTestResult executionId="4c7946f2-3214-4f16-b967-687c6f73b267" testId="c3065909-acc0-2ca9-261f-2c7685da0332" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" computerName="fv-az1057-923" duration="00:01:03.2676924" startTime="2025-06-21T12:04:35.7234771+00:00" endTime="2025-06-21T12:05:38.4609865+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c7946f2-3214-4f16-b967-687c6f73b267" />
    <UnitTestResult executionId="733c225e-72be-4100-a1da-c379ed656290" testId="92bfb0fe-bc6a-64ef-31e7-6a65e94d10ad" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:08.8233966" startTime="2025-06-21T12:04:36.8808693+00:00" endTime="2025-06-21T12:05:44.5160353+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="733c225e-72be-4100-a1da-c379ed656290">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5c488291-7b5d-4099-8494-65c176b4bc00" testId="e205d390-9a19-5469-e9ec-39da420a0010" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:07.4447034" startTime="2025-06-21T12:04:36.9124183+00:00" endTime="2025-06-21T12:05:43.1428716+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c488291-7b5d-4099-8494-65c176b4bc00">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03604819-5090-44b9-a371-a070fc24eca4" testId="cbe5848b-858a-dc48-9599-d1840c3561bb" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:04.7798090" startTime="2025-06-21T12:04:34.8922599+00:00" endTime="2025-06-21T12:05:39.5990232+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03604819-5090-44b9-a371-a070fc24eca4" />
    <UnitTestResult executionId="c026fa56-40b4-46b1-ba28-5bb3459ebbad" testId="b523b50e-8698-5c12-b0c6-2cc0ef31be92" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:11.8086258" startTime="2025-06-21T12:04:36.6824154+00:00" endTime="2025-06-21T12:05:47.4621971+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c026fa56-40b4-46b1-ba28-5bb3459ebbad">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Returns((int i, string s, DateTime dt) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe760d91-ef48-49fb-a2ef-246729d2446e" testId="db0a0964-8445-ac59-2ad7-9445a30b6ea6" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" computerName="fv-az1057-923" duration="00:01:06.3425898" startTime="2025-06-21T12:04:35.0371652+00:00" endTime="2025-06-21T12:05:41.1989019+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe760d91-ef48-49fb-a2ef-246729d2446e">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b47fa244-a6ca-4552-9f6f-6663c918844e" testId="2e495a15-2781-b351-6770-c65a65d1aeec" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:00:52.1577746" startTime="2025-06-21T12:04:34.9983157+00:00" endTime="2025-06-21T12:05:26.9923742+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b47fa244-a6ca-4552-9f6f-6663c918844e">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws(new ArgumentException());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a9c914a-0f54-43b1-b75d-d4b51e3f4c05" testId="41a9182b-cfa7-295e-890d-ead8fdd0909d" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.SimpleEvent += It.IsA&quot;···)" computerName="fv-az1057-923" duration="00:01:17.5147765" startTime="2025-06-21T12:04:34.6434001+00:00" endTime="2025-06-21T12:05:52.0946606+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a9c914a-0f54-43b1-b75d-d4b51e3f4c05" />
    <UnitTestResult executionId="12fad985-cf3c-4f20-a0b3-3aef55541869" testId="bd4c8234-a00e-1673-e7af-5cfa37970a5b" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_CallsEnumerableExtension" computerName="fv-az1057-923" duration="00:00:00.0002674" startTime="2025-06-21T12:04:36.6513902+00:00" endTime="2025-06-21T12:04:36.6517050+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12fad985-cf3c-4f20-a0b3-3aef55541869" />
    <UnitTestResult executionId="6fc83f52-d18f-4b46-a6ec-bb936814e07a" testId="97e33bdb-664e-3973-12fc-44e3769ceeb9" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" computerName="fv-az1057-923" duration="00:01:02.4572825" startTime="2025-06-21T12:04:35.8593307+00:00" endTime="2025-06-21T12:05:37.7328871+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6fc83f52-d18f-4b46-a6ec-bb936814e07a" />
    <UnitTestResult executionId="9f8af17b-687f-4518-aad6-79a1e31d4479" testId="9f66b224-8063-cd61-38fc-dd22b542232c" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" computerName="fv-az1057-923" duration="00:01:15.9519518" startTime="2025-06-21T12:04:37.0057292+00:00" endTime="2025-06-21T12:05:51.6449104+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f8af17b-687f-4518-aad6-79a1e31d4479" />
    <UnitTestResult executionId="4a346dfa-49f0-4bbd-90fc-ba0037c64e3b" testId="771350c4-06ef-1c9d-255b-94f39f48dc95" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:14.8569666" startTime="2025-06-21T12:04:35.8031963+00:00" endTime="2025-06-21T12:05:50.1105607+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a346dfa-49f0-4bbd-90fc-ba0037c64e3b">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5ff3c4e-e229-4a7f-b69b-d3820008fe88" testId="a3ddecae-919e-aa4d-afca-85a53850dee2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotAnalyzeWhenMoqNotReferenced" computerName="fv-az1057-923" duration="00:01:00.0461829" startTime="2025-06-21T12:04:35.1198236+00:00" endTime="2025-06-21T12:05:34.9469843+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5ff3c4e-e229-4a7f-b69b-d3820008fe88" />
    <UnitTestResult executionId="68605e09-ad19-4a8e-8c6f-1bca3553aa34" testId="1c2ea3aa-92f7-670a-c279-640437104291" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate&quot;···)" computerName="fv-az1057-923" duration="00:01:05.6367546" startTime="2025-06-21T12:04:37.0357838+00:00" endTime="2025-06-21T12:05:41.3421105+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68605e09-ad19-4a8e-8c6f-1bca3553aa34">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4e2c628e-e3de-44ac-8d98-2e0d50a1d248" testId="ac022616-7910-d608-bf11-dfff5b70dcf4" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleInvalidMockOfCalls" computerName="fv-az1057-923" duration="00:01:10.5993537" startTime="2025-06-21T12:04:35.3139459+00:00" endTime="2025-06-21T12:05:45.5872396+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4e2c628e-e3de-44ac-8d98-2e0d50a1d248" />
    <UnitTestResult executionId="1fc12e57-7b3c-4d9b-9c24-538d0ee72fa2" testId="74029020-936a-421b-05d8-a9ab4650f8fb" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:04.2636833" startTime="2025-06-21T12:04:36.0347996+00:00" endTime="2025-06-21T12:05:39.6950818+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1fc12e57-7b3c-4d9b-9c24-538d0ee72fa2" />
    <UnitTestResult executionId="7c58b3e3-1691-4d68-ad88-a25ade0d4585" testId="5b5ccb48-5fb3-5879-36ce-e4c55aca03a6" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.7549396" startTime="2025-06-21T12:04:35.4130968+00:00" endTime="2025-06-21T12:05:54.8389403+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c58b3e3-1691-4d68-ad88-a25ade0d4585" />
    <UnitTestResult executionId="5fb50567-87c1-4e67-aa2f-d12c1dbac6d1" testId="3aa47f83-56cb-cdbb-ca49-1d01eab95eda" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:20.2176888" startTime="2025-06-21T12:04:35.3712974+00:00" endTime="2025-06-21T12:05:55.2699344+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5fb50567-87c1-4e67-aa2f-d12c1dbac6d1" />
    <UnitTestResult executionId="9780872f-924f-4cc9-aecd-8879c5a159f4" testId="0dd03c53-0257-6c3a-adff-09e4926276e6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.2407355" startTime="2025-06-21T12:04:36.4121323+00:00" endTime="2025-06-21T12:05:50.8382804+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9780872f-924f-4cc9-aecd-8879c5a159f4" />
    <UnitTestResult executionId="bb91fad6-b0f2-43ff-b39a-03199ee659e4" testId="58f19209-38c6-7645-e846-6a5abd05b6d4" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" computerName="fv-az1057-923" duration="00:01:10.4672856" startTime="2025-06-21T12:04:34.6898088+00:00" endTime="2025-06-21T12:05:45.1540592+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb91fad6-b0f2-43ff-b39a-03199ee659e4">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    /// &lt;summary&gt;Some documentation.&lt;/summary&gt;
[Obsolete]
protected internal virtual string MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0fb8950a-d27d-4c3a-95a0-c0f0d561fd50" testId="a54d5e03-e9fc-367f-3019-7dd7504431df" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:19.7197493" startTime="2025-06-21T12:04:36.7689256+00:00" endTime="2025-06-21T12:05:55.3974079+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0fb8950a-d27d-4c3a-95a0-c0f0d561fd50">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback({|Moq1100:(string s1, int i1)|} =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="431e18ea-570e-4b64-9fc5-b8835d8bda8d" testId="e975ee0f-9b31-8151-0819-5610232890e1" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new SealedClass();&quot;)" computerName="fv-az1057-923" duration="00:01:17.5211721" startTime="2025-06-21T12:04:35.3645418+00:00" endTime="2025-06-21T12:05:52.5188851+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="431e18ea-570e-4b64-9fc5-b8835d8bda8d" />
    <UnitTestResult executionId="a62fc394-ba85-4ada-95af-090fb0f53cb5" testId="d622a621-682b-f9b1-0815-1efb9cf37394" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.2500426" startTime="2025-06-21T12:04:35.4170535+00:00" endTime="2025-06-21T12:05:48.3199101+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a62fc394-ba85-4ada-95af-090fb0f53cb5" />
    <UnitTestResult executionId="3cb892f7-7b1e-49b4-a2e2-d5e2fbe64ff6" testId="2048e002-4f91-0c5a-41f6-c60cf767b3c9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" computerName="fv-az1057-923" duration="00:01:00.1326521" startTime="2025-06-21T12:04:35.9664639+00:00" endTime="2025-06-21T12:05:35.4550445+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3cb892f7-7b1e-49b4-a2e2-d5e2fbe64ff6" />
    <UnitTestResult executionId="1e0b7b43-4bf6-48d3-91a0-2d64958722b3" testId="dbd95e85-25ac-2cc6-dc53-f91afc9e624c" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3597984" startTime="2025-06-21T12:04:34.9676076+00:00" endTime="2025-06-21T12:05:54.1815308+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e0b7b43-4bf6-48d3-91a0-2d64958722b3">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData("test"));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="62106046-15d8-4aa7-8954-fa265674e354" testId="3b4613be-1c29-e1b3-9335-2da174c05a72" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" computerName="fv-az1057-923" duration="00:01:07.5218469" startTime="2025-06-21T12:04:34.8609583+00:00" endTime="2025-06-21T12:05:42.2754116+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62106046-15d8-4aa7-8954-fa265674e354">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9592ebd4-b414-412a-97e7-acacfbad647b" testId="7c9e26f8-1b1f-bfe4-0f78-fe3e3aeecde9" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:19.3045493" startTime="2025-06-21T12:04:35.4252888+00:00" endTime="2025-06-21T12:05:54.3925371+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9592ebd4-b414-412a-97e7-acacfbad647b" />
    <UnitTestResult executionId="0b856f06-5fbb-40c7-bd1c-eaa0cb74f35d" testId="1179012f-4069-da18-82d8-cb10463d5da9" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" computerName="fv-az1057-923" duration="00:01:12.8060200" startTime="2025-06-21T12:04:36.5453346+00:00" endTime="2025-06-21T12:05:48.3910848+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b856f06-5fbb-40c7-bd1c-eaa0cb74f35d" />
    <UnitTestResult executionId="7ab5aa68-0d2e-4b0d-842d-2d065cc27edf" testId="123186ad-e013-63a6-13fe-134c8b92d959" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:00.2109305" startTime="2025-06-21T12:04:36.6081788+00:00" endTime="2025-06-21T12:05:35.8241012+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ab5aa68-0d2e-4b0d-842d-2d065cc27edf" />
    <UnitTestResult executionId="263c1c6d-090d-4d00-bec2-51e46d715363" testId="0e9b2bb0-71b8-5a2f-1eee-b35afd47c369" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" computerName="fv-az1057-923" duration="00:01:06.0764861" startTime="2025-06-21T12:04:34.6622793+00:00" endTime="2025-06-21T12:05:40.7271494+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="263c1c6d-090d-4d00-bec2-51e46d715363" />
    <UnitTestResult executionId="0549d688-c972-461c-9df3-fc17b5a35842" testId="68db5aeb-2825-697e-952a-09eb4429543e" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.1198003" startTime="2025-06-21T12:04:35.3685782+00:00" endTime="2025-06-21T12:05:54.1262119+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0549d688-c972-461c-9df3-fc17b5a35842" />
    <UnitTestResult executionId="5e0006fc-fd69-4cbd-9197-5e782789d79f" testId="f479a5b0-4402-43b8-0ee6-39d5578e86eb" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:57.4734156" startTime="2025-06-21T12:04:36.0613064+00:00" endTime="2025-06-21T12:05:32.8925358+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e0006fc-fd69-4cbd-9197-5e782789d79f" />
    <UnitTestResult executionId="f85887fa-c24a-41fc-b4be-5cc63d63d406" testId="fcf34d21-95d8-5bc8-1727-c3e33bc18148" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsNullAndPredicateIsNull" computerName="fv-az1057-923" duration="00:00:00.0002392" startTime="2025-06-21T12:04:36.6428304+00:00" endTime="2025-06-21T12:04:36.6431579+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f85887fa-c24a-41fc-b4be-5cc63d63d406" />
    <UnitTestResult executionId="e06f52fb-c5c7-4882-be26-696ed987c059" testId="2466ecf9-8a91-44db-ca41-1904b7852a0d" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.3028700" startTime="2025-06-21T12:04:35.8349863+00:00" endTime="2025-06-21T12:05:36.5759390+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e06f52fb-c5c7-4882-be26-696ed987c059" />
    <UnitTestResult executionId="e4a7d820-80e0-4f2a-952a-45cfeb9efb2e" testId="b5ce423e-745c-f906-eb0c-b427a00322c7" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:10.7143643" startTime="2025-06-21T12:04:36.8473534+00:00" endTime="2025-06-21T12:05:46.4161079+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4a7d820-80e0-4f2a-952a-45cfeb9efb2e">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d37c0ac0-3c45-4e05-99ba-7d5930c2eb38" testId="367183c3-5560-cc55-05c7-fb404df4bfec" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:00:59.9210504" startTime="2025-06-21T12:04:35.9623884+00:00" endTime="2025-06-21T12:05:35.2548629+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d37c0ac0-3c45-4e05-99ba-7d5930c2eb38" />
    <UnitTestResult executionId="8678fa57-3c58-4dcf-bf37-9741dbfe656d" testId="a7864f3d-d148-bd6b-3614-c86b23f24958" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.0395843" startTime="2025-06-21T12:04:35.2146604+00:00" endTime="2025-06-21T12:05:46.0064189+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8678fa57-3c58-4dcf-bf37-9741dbfe656d" />
    <UnitTestResult executionId="a3c538c0-a06c-4f43-a4f6-3936fadfddd2" testId="68754f32-e623-3220-d135-c04ea4b0e9e6" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:20.0996169" startTime="2025-06-21T12:04:35.7836065+00:00" endTime="2025-06-21T12:05:55.3531804+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a3c538c0-a06c-4f43-a4f6-3936fadfddd2" />
    <UnitTestResult executionId="e8072b1c-0483-406c-b40a-f425c9631ddc" testId="bdaef25b-58fc-de46-ba92-0d6f6ef804d9" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:20.5563657" startTime="2025-06-21T12:04:35.0009474+00:00" endTime="2025-06-21T12:05:55.4099502+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8072b1c-0483-406c-b40a-f425c9631ddc" />
    <UnitTestResult executionId="733ec44b-3ab3-43d4-8286-2ad9e5072946" testId="17ea1787-6026-1555-c86a-2f5cf4308b7b" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForInterfaceMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" computerName="fv-az1057-923" duration="00:01:08.1419904" startTime="2025-06-21T12:04:34.6760914+00:00" endTime="2025-06-21T12:05:42.8132795+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="733ec44b-3ab3-43d4-8286-2ad9e5072946" />
    <UnitTestResult executionId="33be172d-ff7b-45ef-9758-7912c8b5553a" testId="3b0112e2-05f0-738e-f54d-bb04b512bb8f" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.6236142" startTime="2025-06-21T12:04:35.8145345+00:00" endTime="2025-06-21T12:05:36.9814843+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33be172d-ff7b-45ef-9758-7912c8b5553a">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d0034c6-5784-484c-a9ab-eaa714dda948" testId="b741a100-0e28-2f65-3426-ae70801da113" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.GetBooleanA&quot;···)" computerName="fv-az1057-923" duration="00:01:03.6736062" startTime="2025-06-21T12:04:35.8436586+00:00" endTime="2025-06-21T12:05:38.9472251+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d0034c6-5784-484c-a9ab-eaa714dda948">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.GetBooleanAsync().Result).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d02c3cc6-a37b-4a72-b87c-a238b1d5a438" testId="3bf1fb73-95c1-ef7a-dbda-ac329b313cb3" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:14.7441347" startTime="2025-06-21T12:04:34.9914973+00:00" endTime="2025-06-21T12:05:49.5763663+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d02c3cc6-a37b-4a72-b87c-a238b1d5a438">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test")).Throws(new ArgumentException());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d5a8663-defe-46f1-82dc-f3659f0e83b1" testId="5ea2d559-c45e-da14-9519-e9191f742ea7" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.9092639" startTime="2025-06-21T12:04:35.3792303+00:00" endTime="2025-06-21T12:05:45.9893060+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d5a8663-defe-46f1-82dc-f3659f0e83b1" />
    <UnitTestResult executionId="45b6ed05-7b20-4172-9909-384cb7ad1001" testId="46dac1b1-26aa-f344-9429-03033a1e5592" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" computerName="fv-az1057-923" duration="00:01:13.8561997" startTime="2025-06-21T12:04:36.6795010+00:00" endTime="2025-06-21T12:05:49.5868655+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45b6ed05-7b20-4172-9909-384cb7ad1001">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="72343e18-c9f6-4185-9692-d4e720da21f7" testId="bf9c3327-85e4-95a6-77a1-c0afeaa52df1" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomDelegate += It.&quot;···)" computerName="fv-az1057-923" duration="00:01:05.2077085" startTime="2025-06-21T12:04:34.6427178+00:00" endTime="2025-06-21T12:05:39.7901547+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72343e18-c9f6-4185-9692-d4e720da21f7" />
    <UnitTestResult executionId="8377f5f5-a6d1-4180-8ef8-3a9ad766243c" testId="cd0cbef3-60f5-7467-9c5c-b2db3b410110" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:56.5198220" startTime="2025-06-21T12:04:36.1043019+00:00" endTime="2025-06-21T12:05:31.9540667+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8377f5f5-a6d1-4180-8ef8-3a9ad766243c" />
    <UnitTestResult executionId="4f3c84cb-dfcc-44ac-b697-25aae8ce1d05" testId="20ac565f-992c-dba6-3104-9c7f63b8e0d8" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" computerName="fv-az1057-923" duration="00:01:14.5620147" startTime="2025-06-21T12:04:36.7339415+00:00" endTime="2025-06-21T12:05:50.2487553+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f3c84cb-dfcc-44ac-b697-25aae8ce1d05">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eaff1da4-52c8-495f-a258-20e13786152e" testId="273bbb1e-80ec-dde3-e509-88dec84dc4a3" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:15.7613891" startTime="2025-06-21T12:04:35.9593160+00:00" endTime="2025-06-21T12:05:51.0722788+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eaff1da4-52c8-495f-a258-20e13786152e" />
    <UnitTestResult executionId="d8193b3f-abca-4326-a65e-479ad6ef1610" testId="6571c244-89a9-25f5-73a9-ee5ef8357337" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.0059752" startTime="2025-06-21T12:04:35.1795459+00:00" endTime="2025-06-21T12:05:48.9769418+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8193b3f-abca-4326-a65e-479ad6ef1610" />
    <UnitTestResult executionId="5767a285-6426-4fcd-9e4e-ffaf511c0650" testId="b3831554-d598-a4f2-3772-3d9dfdd985fe" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" computerName="fv-az1057-923" duration="00:01:12.7250245" startTime="2025-06-21T12:04:35.7333585+00:00" endTime="2025-06-21T12:05:47.9241511+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5767a285-6426-4fcd-9e4e-ffaf511c0650">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((long bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a169c46d-de4b-4897-a47b-3e9545bcabb8" testId="23e08cf9-b55f-2415-7846-6bb4207843d4" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:05.5390955" startTime="2025-06-21T12:04:35.1603250+00:00" endTime="2025-06-21T12:05:40.4786301+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a169c46d-de4b-4897-a47b-3e9545bcabb8" />
    <UnitTestResult executionId="2043bbe8-332a-4e94-9c0c-c5ad6371c843" testId="70609528-b21b-f912-b1b0-55b4725d4b2b" testName="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" computerName="fv-az1057-923" duration="00:01:05.0904115" startTime="2025-06-21T12:04:34.8616048+00:00" endTime="2025-06-21T12:05:39.8435776+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2043bbe8-332a-4e94-9c0c-c5ad6371c843" />
    <UnitTestResult executionId="993c0261-a592-4d94-aa83-991dce0c2143" testId="818ddfea-b6fd-ae7e-49d8-717e8d7f1c25" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" computerName="fv-az1057-923" duration="00:01:06.0524960" startTime="2025-06-21T12:04:35.1803169+00:00" endTime="2025-06-21T12:05:41.0017324+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="993c0261-a592-4d94-aa83-991dce0c2143" />
    <UnitTestResult executionId="85dc592c-918b-44a1-acad-0e3406412975" testId="c2ca7e36-f556-b616-f178-7d91e11de242" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:20.3321236" startTime="2025-06-21T12:04:34.6545388+00:00" endTime="2025-06-21T12:05:55.0050393+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="85dc592c-918b-44a1-acad-0e3406412975" />
    <UnitTestResult executionId="ef7d51ee-ab55-4e1c-b6f9-4cab19964cc4" testId="f088fd21-c378-83ea-f387-7c5ce49d58d9" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualIndexer&gt;().Setup(x &quot;···)" computerName="fv-az1057-923" duration="00:01:03.4429404" startTime="2025-06-21T12:04:37.0413692+00:00" endTime="2025-06-21T12:05:39.1541587+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef7d51ee-ab55-4e1c-b6f9-4cab19964cc4">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClassWithVirtualIndexer&gt;().Setup(x =&gt; x[0]);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9b3c7140-749e-45ff-844a-02609d5d28a0" testId="a57af381-d31b-855a-8c50-91e368b52e56" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5853787" startTime="2025-06-21T12:04:35.8410097+00:00" endTime="2025-06-21T12:05:54.8580259+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b3c7140-749e-45ff-844a-02609d5d28a0">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee8aeea2-d72e-4b49-ad2a-540d97f7d664" testId="04baf1e4-f02b-ac52-f21f-4f95c4501a8a" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" computerName="fv-az1057-923" duration="00:01:14.7970143" startTime="2025-06-21T12:04:35.2228033+00:00" endTime="2025-06-21T12:05:49.7871384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee8aeea2-d72e-4b49-ad2a-540d97f7d664">
      <Output>
        <StdOut>public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAsync().Result);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9373eab-3652-4eaa-899c-a0bbe13d489d" testId="a0596946-a296-ebb8-d566-7d0a00f3cfb4" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" computerName="fv-az1057-923" duration="00:01:09.4572480" startTime="2025-06-21T12:04:35.8241124+00:00" endTime="2025-06-21T12:05:44.7185157+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9373eab-3652-4eaa-899c-a0bbe13d489d">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="70d9c996-cb9f-49ea-872c-6455088a28ae" testId="60c6d850-38d5-2bfd-6058-0f088f11d74d" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:58.6781395" startTime="2025-06-21T12:04:35.6705067+00:00" endTime="2025-06-21T12:05:33.8438720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70d9c996-cb9f-49ea-872c-6455088a28ae" />
    <UnitTestResult executionId="0d202966-c65b-4d5a-8cb0-f8b6d21e5ca1" testId="705426a7-09bf-198a-a28f-796041c4f2e7" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:15.8810773" startTime="2025-06-21T12:04:34.6691175+00:00" endTime="2025-06-21T12:05:50.5468693+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d202966-c65b-4d5a-8cb0-f8b6d21e5ca1" />
    <UnitTestResult executionId="44129cf4-9710-4ae5-89d8-1667b7e95d0e" testId="51f75363-5b7d-1b10-4253-4371ccce0772" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:17.3063285" startTime="2025-06-21T12:04:35.7959643+00:00" endTime="2025-06-21T12:05:52.5412498+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44129cf4-9710-4ae5-89d8-1667b7e95d0e">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="89bde090-a5fe-4aea-b392-9c4d18b98953" testId="524c66cf-038f-ea37-c8f3-33c7ddc4b6cb" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:09.6198705" startTime="2025-06-21T12:04:36.9211028+00:00" endTime="2025-06-21T12:05:45.3035665+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89bde090-a5fe-4aea-b392-9c4d18b98953">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1e69c3d5-79aa-47dc-bcc6-41eb308632d5" testId="b03bbbb9-582b-1504-0890-30fb2dd5e5c7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" computerName="fv-az1057-923" duration="00:01:07.8429127" startTime="2025-06-21T12:04:36.0605041+00:00" endTime="2025-06-21T12:05:43.2751126+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e69c3d5-79aa-47dc-bcc6-41eb308632d5" />
    <UnitTestResult executionId="aaa06042-e49c-4128-9e34-1dddd81d513c" testId="c24c56ff-17e4-db06-4d7b-8410ee4a29a7" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" computerName="fv-az1057-923" duration="00:00:58.3243922" startTime="2025-06-21T12:04:35.2898321+00:00" endTime="2025-06-21T12:05:33.3094714+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aaa06042-e49c-4128-9e34-1dddd81d513c">
      <Output>
        <StdOut>namespace MyNamespace;

public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.GenericValueTaskAsync().Result|});
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b0142416-7ef1-4243-954e-5d20edf3c70c" testId="c6880c13-bebe-7218-388a-676aa7c699b7" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMultipleConstructorOverloads" computerName="fv-az1057-923" duration="00:01:07.0811103" startTime="2025-06-21T12:04:35.1901474+00:00" endTime="2025-06-21T12:05:42.0429009+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0142416-7ef1-4243-954e-5d20edf3c70c" />
    <UnitTestResult executionId="1a37d609-aad3-497c-90b7-ab23170c267a" testId="3106dae9-acb9-b105-e6c4-ec89d20fa9f8" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:14.3973839" startTime="2025-06-21T12:04:35.7367487+00:00" endTime="2025-06-21T12:05:49.5954234+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a37d609-aad3-497c-90b7-ab23170c267a" />
    <UnitTestResult executionId="164afc01-94b0-4d25-92b5-bdd521016b3f" testId="ea6e4f77-47d6-6843-79ac-3e2400d301e0" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:14.4543281" startTime="2025-06-21T12:04:35.4436781+00:00" endTime="2025-06-21T12:05:49.6213624+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="164afc01-94b0-4d25-92b5-bdd521016b3f" />
    <UnitTestResult executionId="ac4cdf92-3d81-4915-948c-e55154266b4c" testId="46296023-0852-5426-aef8-97e05a13defc" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupRemove(x =&gt; x.TestEve&quot;···)" computerName="fv-az1057-923" duration="00:00:52.1606967" startTime="2025-06-21T12:04:37.0366166+00:00" endTime="2025-06-21T12:05:27.8636853+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac4cdf92-3d81-4915-948c-e55154266b4c">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().SetupRemove(x =&gt; x.TestEvent -= It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9ca293d5-216b-4420-b680-324e0ebc41af" testId="ba9a1d4c-decb-ceef-7cff-54b211b2f02d" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:59.4806752" startTime="2025-06-21T12:04:35.1374962+00:00" endTime="2025-06-21T12:05:34.3899752+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ca293d5-216b-4420-b680-324e0ebc41af" />
    <UnitTestResult executionId="32a000b2-b41b-41b5-9367-73e24dec3e77" testId="2987fec6-cb02-fe93-77e1-bac00bd29d21" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:00:54.6297289" startTime="2025-06-21T12:04:36.1683926+00:00" endTime="2025-06-21T12:05:30.0976981+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="32a000b2-b41b-41b5-9367-73e24dec3e77" />
    <UnitTestResult executionId="e8f4440c-0fbd-4934-9016-117b643dd2bd" testId="16958f2f-df54-f2e9-7500-3c37668c49a7" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:14.6098030" startTime="2025-06-21T12:04:35.7791908+00:00" endTime="2025-06-21T12:05:49.8486564+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e8f4440c-0fbd-4934-9016-117b643dd2bd" />
    <UnitTestResult executionId="8d548786-c3fd-4e43-b8b9-13f8ae164ecd" testId="e5ac1d91-1d4e-960e-6ac5-4e5aa862d654" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:02.3775358" startTime="2025-06-21T12:04:35.5491778+00:00" endTime="2025-06-21T12:05:37.4765107+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d548786-c3fd-4e43-b8b9-13f8ae164ecd" />
    <UnitTestResult executionId="d94fb72c-46db-488f-b32a-5d866a211256" testId="59dab297-8ce3-a71b-ab66-0174b4e5293e" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" computerName="fv-az1057-923" duration="00:01:10.2252704" startTime="2025-06-21T12:04:35.3147997+00:00" endTime="2025-06-21T12:05:45.2206729+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d94fb72c-46db-488f-b32a-5d866a211256">
      <Output>
        <StdOut>public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.GenericTaskAsync().Result|});
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ea90ce7e-9fd9-4180-b104-210847499b19" testId="9394ed31-8b15-d2f1-f029-ac09cc7b016d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.3949025" startTime="2025-06-21T12:04:36.0368883+00:00" endTime="2025-06-21T12:05:45.8012208+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea90ce7e-9fd9-4180-b104-210847499b19" />
    <UnitTestResult executionId="f9d4a2db-af94-48eb-a6ff-a22360fafcfb" testId="a44eebad-ab3b-399f-b9d3-0a1c1c7c3b76" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" computerName="fv-az1057-923" duration="00:01:15.5933986" startTime="2025-06-21T12:04:35.4297221+00:00" endTime="2025-06-21T12:05:50.7210686+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9d4a2db-af94-48eb-a6ff-a22360fafcfb" />
    <UnitTestResult executionId="04d2acf1-4831-4d7b-91c2-fbff58061189" testId="e14df78d-fe05-0612-813c-f3688fb1a3cb" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" computerName="fv-az1057-923" duration="00:00:52.7694794" startTime="2025-06-21T12:04:36.2858299+00:00" endTime="2025-06-21T12:05:28.2552221+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04d2acf1-4831-4d7b-91c2-fbff58061189" />
    <UnitTestResult executionId="72548e39-d084-4d7a-ad23-f44b32f2b004" testId="a5d0caa6-9800-0060-e3d4-c1bba4c468a1" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:13.1135800" startTime="2025-06-21T12:04:36.6335343+00:00" endTime="2025-06-21T12:05:48.7447413+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72548e39-d084-4d7a-ad23-f44b32f2b004">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ab68356-be82-45e8-abc1-36ceef2c1b4d" testId="45df0e7f-c33f-1313-c316-5120c953ba74" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.1890291" startTime="2025-06-21T12:04:35.2884624+00:00" endTime="2025-06-21T12:05:52.1730819+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ab68356-be82-45e8-abc1-36ceef2c1b4d" />
    <UnitTestResult executionId="61d64e95-ead9-44e6-8c14-9678affd18e3" testId="4ef25b2b-2e99-327f-eb80-66326b1819ee" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:19.1478243" startTime="2025-06-21T12:04:36.6248035+00:00" endTime="2025-06-21T12:05:54.7529573+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61d64e95-ead9-44e6-8c14-9678affd18e3">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Loose)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6dc8b64e-79fd-4aa1-aa57-e53004946f57" testId="396eb263-a76e-d72e-fd91-d0d461fac5c2" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:00:58.0993025" startTime="2025-06-21T12:04:36.0341683+00:00" endTime="2025-06-21T12:05:33.5010787+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6dc8b64e-79fd-4aa1-aa57-e53004946f57" />
    <UnitTestResult executionId="88b15b35-7cb3-4a22-bff6-721ebb07041c" testId="81756723-a83b-6e1c-1e5f-bc7e8d6cfd12" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" computerName="fv-az1057-923" duration="00:01:05.1690871" startTime="2025-06-21T12:04:34.9608401+00:00" endTime="2025-06-21T12:05:39.9870595+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88b15b35-7cb3-4a22-bff6-721ebb07041c">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="75ade1a5-e971-484a-8204-3a83dad4d2ad" testId="5bce120d-2bec-60a1-09a1-2035b6372cbe" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:15.3153455" startTime="2025-06-21T12:04:36.6814425+00:00" endTime="2025-06-21T12:05:50.9656515+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75ade1a5-e971-484a-8204-3a83dad4d2ad">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns((List&lt;string&gt; l) =&gt; { return 0; });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b93dbdf7-1b18-4372-802b-124446c09925" testId="0df20694-0b53-e534-cea1-17f10af0cfcb" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" computerName="fv-az1057-923" duration="00:00:56.5257063" startTime="2025-06-21T12:04:35.8283253+00:00" endTime="2025-06-21T12:05:31.7901128+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b93dbdf7-1b18-4372-802b-124446c09925">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eef80a79-968a-4d67-8315-8c379fe7074a" testId="22e6e4f9-32bc-3a24-7e48-b77a674a31e7" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" computerName="fv-az1057-923" duration="00:01:08.6493379" startTime="2025-06-21T12:04:34.6975351+00:00" endTime="2025-06-21T12:05:43.3438833+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eef80a79-968a-4d67-8315-8c379fe7074a">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    public int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    public virtual int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="afa0d255-f757-4451-8152-ea7bab4c4174" testId="b8b40f8a-9c7b-e0be-643a-a16dceea0a0e" testName="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditPositionKeyMissing" computerName="fv-az1057-923" duration="00:00:00.0001119" startTime="2025-06-21T12:04:34.8212801+00:00" endTime="2025-06-21T12:04:34.8215738+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="afa0d255-f757-4451-8152-ea7bab4c4174" />
    <UnitTestResult executionId="5e9d6267-6111-45ce-936f-56e5daae0799" testId="d5de3a36-3090-91ac-4d70-52e329fb7093" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:19.5429019" startTime="2025-06-21T12:04:35.4361915+00:00" endTime="2025-06-21T12:05:54.6958926+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e9d6267-6111-45ce-936f-56e5daae0799" />
    <UnitTestResult executionId="b8f514cc-9cb0-4fb1-bbfa-b70ef9b9466e" testId="0447742d-4953-a3af-8cb6-d02b94ac240b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:00.7872089" startTime="2025-06-21T12:04:36.1958598+00:00" endTime="2025-06-21T12:05:36.3101680+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8f514cc-9cb0-4fb1-bbfa-b70ef9b9466e" />
    <UnitTestResult executionId="93b20404-8426-4d42-a80f-01fff9f77027" testId="5bf68542-134d-838f-f761-1b6cc9906892" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" computerName="fv-az1057-923" duration="00:01:14.5718716" startTime="2025-06-21T12:04:35.8121602+00:00" endTime="2025-06-21T12:05:49.8433825+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93b20404-8426-4d42-a80f-01fff9f77027" />
    <UnitTestResult executionId="2a824989-5552-4e65-88fe-6b9e7db6dbce" testId="212fe0f5-07bc-9e5a-3ed1-ee14d70a6a66" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:19.4628606" startTime="2025-06-21T12:04:36.6405338+00:00" endTime="2025-06-21T12:05:55.0967417+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a824989-5552-4e65-88fe-6b9e7db6dbce">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculator())|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ee0b3d4-c888-4258-8605-52aaaf81317a" testId="c9d05762-19ce-c3a9-04fb-f0917fd9072f" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.5625734" startTime="2025-06-21T12:04:35.4254546+00:00" endTime="2025-06-21T12:05:50.6656760+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ee0b3d4-c888-4258-8605-52aaaf81317a" />
    <UnitTestResult executionId="d127ce1a-1679-458b-881e-dc245c28cd18" testId="7e43f699-be4d-f805-34fa-0105a79e0a78" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleErrorConditionsGracefully" computerName="fv-az1057-923" duration="00:01:00.0605353" startTime="2025-06-21T12:04:35.1360752+00:00" endTime="2025-06-21T12:05:34.9670914+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d127ce1a-1679-458b-881e-dc245c28cd18" />
    <UnitTestResult executionId="b608c146-d386-49e7-9f0a-e9fc32b496d6" testId="d6e4961e-ad8f-465e-fcaa-caa95043a95a" testName="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" computerName="fv-az1057-923" duration="00:01:21.9680161" startTime="2025-06-21T12:04:35.1002100+00:00" endTime="2025-06-21T12:05:56.8490400+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b608c146-d386-49e7-9f0a-e9fc32b496d6" />
    <UnitTestResult executionId="ee7e17e1-9318-4c55-a707-725bd35e5a86" testId="b1c1741b-9959-0b02-6ead-bb9a6ba96dcd" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" computerName="fv-az1057-923" duration="00:01:07.0407612" startTime="2025-06-21T12:04:37.0076290+00:00" endTime="2025-06-21T12:05:42.7383610+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee7e17e1-9318-4c55-a707-725bd35e5a86" />
    <UnitTestResult executionId="20514737-6953-46ac-8f16-c75bf99100d2" testId="7dae86ea-4bc8-e516-895e-61d82871e56c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" computerName="fv-az1057-923" duration="00:01:03.2874561" startTime="2025-06-21T12:04:36.4099495+00:00" endTime="2025-06-21T12:05:38.8332821+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20514737-6953-46ac-8f16-c75bf99100d2" />
    <UnitTestResult executionId="eed69c0a-8635-4615-8a1f-c2cb4b566fde" testId="50513a01-dca4-496a-1387-c153dbf42c75" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:01.3170587" startTime="2025-06-21T12:04:35.4608771+00:00" endTime="2025-06-21T12:05:36.4037190+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eed69c0a-8635-4615-8a1f-c2cb4b566fde" />
    <UnitTestResult executionId="61614085-57ba-4c71-aa79-58043a95f6bb" testId="c9de4501-162f-abe6-8c93-0fdb68ccf3d3" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" computerName="fv-az1057-923" duration="00:01:14.4853217" startTime="2025-06-21T12:04:34.8707161+00:00" endTime="2025-06-21T12:05:49.2469348+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61614085-57ba-4c71-aa79-58043a95f6bb">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Field)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84d7de02-dafd-43ee-9dfe-18f2b04e2d52" testId="6382c322-0847-81f0-53ea-f15e2bd331cf" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:00.5735193" startTime="2025-06-21T12:04:35.9577289+00:00" endTime="2025-06-21T12:05:35.8832564+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84d7de02-dafd-43ee-9dfe-18f2b04e2d52" />
    <UnitTestResult executionId="d325f5ff-fc97-4d98-82ec-ac53b038d392" testId="05679bb8-fac3-c62d-b0a7-68b65d4cad03" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" computerName="fv-az1057-923" duration="00:01:09.6495105" startTime="2025-06-21T12:04:35.8470741+00:00" endTime="2025-06-21T12:05:44.9192330+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d325f5ff-fc97-4d98-82ec-ac53b038d392">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetString(It.IsRegex("[a-zA-Z]+", System.Text.RegularExpressions.RegexOptions.IgnoreCase)));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="72b13b5a-51e9-456c-84be-86d22248ac2d" testId="e3588e43-360c-68cf-5f19-b06e3eabc28a" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" computerName="fv-az1057-923" duration="00:01:11.0283999" startTime="2025-06-21T12:04:36.6785462+00:00" endTime="2025-06-21T12:05:46.6790987+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72b13b5a-51e9-456c-84be-86d22248ac2d">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f5980f19-9c7c-4712-90f8-3779122a9c4e" testId="2c383821-751d-3537-0fca-97f694f420b9" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.4194252" startTime="2025-06-21T12:04:35.6582633+00:00" endTime="2025-06-21T12:05:46.5638804+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5980f19-9c7c-4712-90f8-3779122a9c4e" />
    <UnitTestResult executionId="cc71eed9-df01-4d89-9b04-1d6839bc62eb" testId="50592609-d81f-a345-f819-7592ec4a8571" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock4 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(Moc&quot;···)" computerName="fv-az1057-923" duration="00:00:51.3412774" startTime="2025-06-21T12:04:36.1179329+00:00" endTime="2025-06-21T12:05:26.7779662+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc71eed9-df01-4d89-9b04-1d6839bc62eb" />
    <UnitTestResult executionId="5fac3e74-af55-430d-b123-186d1ad25679" testId="c441b6ec-e1a5-936d-9213-224888b4ccdb" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:15.7705167" startTime="2025-06-21T12:04:35.7652689+00:00" endTime="2025-06-21T12:05:51.0317283+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5fac3e74-af55-430d-b123-186d1ad25679" />
    <UnitTestResult executionId="22d40885-3d01-49fc-969d-f2a87d8ecac9" testId="51d13575-9bc8-115a-e490-9d5eba1bc218" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" computerName="fv-az1057-923" duration="00:01:05.5429638" startTime="2025-06-21T12:04:35.8479476+00:00" endTime="2025-06-21T12:05:40.8157049+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22d40885-3d01-49fc-969d-f2a87d8ecac9" />
    <UnitTestResult executionId="d9a654ea-9478-4804-a62d-5d8e627c0f31" testId="cc93e3e6-0e3e-dd37-b8fb-0abcde8862cd" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" computerName="fv-az1057-923" duration="00:01:10.7291417" startTime="2025-06-21T12:04:35.3164702+00:00" endTime="2025-06-21T12:05:45.7214509+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d9a654ea-9478-4804-a62d-5d8e627c0f31">
      <Output>
        <StdOut>namespace MyNamespace;

public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.GenericTaskAsync().Result|});
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6abcbdec-f028-4808-97cd-2af8ffbe55a8" testId="7efa1121-70c3-5747-2a41-66c2ad8ebaec" testName="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" computerName="fv-az1057-923" duration="00:01:21.9647483" startTime="2025-06-21T12:04:35.1083231+00:00" endTime="2025-06-21T12:05:56.8532020+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6abcbdec-f028-4808-97cd-2af8ffbe55a8" />
    <UnitTestResult executionId="f03dd441-aad5-4d96-973a-4dd881385201" testId="0237648c-8aff-cb22-c0bc-326f372b1479" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:10.1846652" startTime="2025-06-21T12:04:36.8424441+00:00" endTime="2025-06-21T12:05:45.8605282+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f03dd441-aad5-4d96-973a-4dd881385201">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ee5534e-deee-44bc-80fb-7c2efeb53958" testId="9804433f-d6ca-065f-ed44-a5e3561903cb" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:55.4653319" startTime="2025-06-21T12:04:36.0564246+00:00" endTime="2025-06-21T12:05:30.8826664+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ee5534e-deee-44bc-80fb-7c2efeb53958" />
    <UnitTestResult executionId="426302c6-913f-4168-bc00-eafb099473a6" testId="5924068f-58be-b2d9-cec9-ae9781b959ea" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:01:14.6098740" startTime="2025-06-21T12:04:36.4113896+00:00" endTime="2025-06-21T12:05:50.1619887+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="426302c6-913f-4168-bc00-eafb099473a6" />
    <UnitTestResult executionId="75fae315-9830-4cee-bded-36c19ef2da3d" testId="acdf70b8-acf9-91ec-b576-e125c6a8c896" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:00:51.8483122" startTime="2025-06-21T12:04:36.0208588+00:00" endTime="2025-06-21T12:05:27.2361455+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75fae315-9830-4cee-bded-36c19ef2da3d" />
    <UnitTestResult executionId="9e559713-8d5c-4c5f-9924-0cc3bffc7f55" testId="e64db02b-5a15-d2d9-6d10-9671add68dfa" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3303209" startTime="2025-06-21T12:04:35.9787957+00:00" endTime="2025-06-21T12:05:54.7541749+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e559713-8d5c-4c5f-9924-0cc3bffc7f55" />
    <UnitTestResult executionId="59c30c6a-ca63-432d-8131-411071772dbb" testId="3e297006-2438-761c-f854-2a1dd672959a" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" computerName="fv-az1057-923" duration="00:01:18.5607969" startTime="2025-06-21T12:04:34.9554938+00:00" endTime="2025-06-21T12:05:53.4499945+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59c30c6a-ca63-432d-8131-411071772dbb" />
    <UnitTestResult executionId="9e9495f2-6632-4150-9616-afcd04fd538a" testId="7eab27a7-d754-5805-be4b-9d4732cfd4fb" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:11.5894148" startTime="2025-06-21T12:04:34.8869487+00:00" endTime="2025-06-21T12:05:46.3600017+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9e9495f2-6632-4150-9616-afcd04fd538a" />
    <UnitTestResult executionId="fa4ff922-f0e0-45f4-b58d-b7491ac0e884" testId="fa270a5f-fb21-ef34-9da0-36673bfe6174" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" computerName="fv-az1057-923" duration="00:01:22.2289990" startTime="2025-06-21T12:04:35.2171403+00:00" endTime="2025-06-21T12:05:57.2049318+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fa4ff922-f0e0-45f4-b58d-b7491ac0e884" />
    <UnitTestResult executionId="89d80833-0cc3-44d3-b849-4b741cb8ba34" testId="5db75e61-fc59-d8b6-bfbd-85c186270b15" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:01:19.4292162" startTime="2025-06-21T12:04:36.5897077+00:00" endTime="2025-06-21T12:05:55.0694421+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89d80833-0cc3-44d3-b849-4b741cb8ba34" />
    <UnitTestResult executionId="a6463a67-e26e-4560-b09c-e42bcc9e560f" testId="9b518aae-b6a6-dd33-f348-4d3e79379785" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:10.7147959" startTime="2025-06-21T12:04:36.8433780+00:00" endTime="2025-06-21T12:05:46.4062044+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6463a67-e26e-4560-b09c-e42bcc9e560f">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fef55031-6372-4ead-b3b7-7fe695683d5b" testId="80b61061-d617-e43e-8bf6-ffe6bf06d326" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupRemov&quot;···)" computerName="fv-az1057-923" duration="00:01:02.9875339" startTime="2025-06-21T12:04:37.0684902+00:00" endTime="2025-06-21T12:05:38.7274051+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fef55031-6372-4ead-b3b7-7fe695683d5b">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupRemove(x =&gt; x.TestEvent -= It.IsAny&lt;EventHandler&gt;());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="15eb5ea2-f6d0-4756-92e4-d5efad913cac" testId="28845338-d05a-883a-07ae-39bc693b4445" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:00:59.6203728" startTime="2025-06-21T12:04:35.9658292+00:00" endTime="2025-06-21T12:05:34.9438672+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15eb5ea2-f6d0-4756-92e4-d5efad913cac" />
    <UnitTestResult executionId="97b7891c-fd47-4801-807d-551ba8d8ec06" testId="442718cd-5ff5-607d-428a-430c5038ce07" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:02.8899669" startTime="2025-06-21T12:04:36.0316157+00:00" endTime="2025-06-21T12:05:38.2944086+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97b7891c-fd47-4801-807d-551ba8d8ec06" />
    <UnitTestResult executionId="698cf687-2a19-4ffa-897e-ff003f33103a" testId="6f242f8c-2c9d-6f92-9208-bf7f36464284" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:01.2063873" startTime="2025-06-21T12:04:36.7643488+00:00" endTime="2025-06-21T12:05:36.8913710+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="698cf687-2a19-4ffa-897e-ff003f33103a">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd7d3e81-ac72-41f0-90eb-5c89dde795bf" testId="c340976a-6bc1-14f5-d06e-05fec36cb01d" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:05.3767730" startTime="2025-06-21T12:04:35.0410884+00:00" endTime="2025-06-21T12:05:40.2355918+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd7d3e81-ac72-41f0-90eb-5c89dde795bf" />
    <UnitTestResult executionId="33fc88fe-b33b-4995-ae15-e026ce6ed822" testId="a63ff25c-438d-506a-588d-92ddb71d6638" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:01.4541903" startTime="2025-06-21T12:04:36.0981383+00:00" endTime="2025-06-21T12:05:36.9750992+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33fc88fe-b33b-4995-ae15-e026ce6ed822" />
    <UnitTestResult executionId="f2f6deeb-fe3b-4974-b556-97797aad85de" testId="7822ca7b-bcf2-7d19-9513-b6cc69599626" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" computerName="fv-az1057-923" duration="00:01:16.7673922" startTime="2025-06-21T12:04:36.5126939+00:00" endTime="2025-06-21T12:05:52.3877104+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2f6deeb-fe3b-4974-b556-97797aad85de" />
    <UnitTestResult executionId="a314c88f-a2cf-4362-a411-9109f6c3ee58" testId="145518c5-3215-1a65-dde8-a0322b47f389" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.8147004" startTime="2025-06-21T12:04:35.4110198+00:00" endTime="2025-06-21T12:05:45.8779728+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a314c88f-a2cf-4362-a411-9109f6c3ee58" />
    <UnitTestResult executionId="de014dfb-b567-494a-acd5-61d55a0287f7" testId="937275e6-b5d7-2a11-6bcd-7c6eae6e906f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:01:02.8335022" startTime="2025-06-21T12:04:35.9703261+00:00" endTime="2025-06-21T12:05:38.1619104+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="de014dfb-b567-494a-acd5-61d55a0287f7" />
    <UnitTestResult executionId="08053ad2-77b5-4840-b61e-f0b0db7cc5aa" testId="cddbddc5-bec0-946b-c711-0e3a131cf15a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" computerName="fv-az1057-923" duration="00:01:03.2421236" startTime="2025-06-21T12:04:35.6643542+00:00" endTime="2025-06-21T12:05:38.3947238+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08053ad2-77b5-4840-b61e-f0b0db7cc5aa" />
    <UnitTestResult executionId="4dc0bd91-8f6d-459c-b4a5-a3038094beba" testId="4786dc12-4493-b47f-ad7a-3e2886a07228" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.1286384" startTime="2025-06-21T12:04:36.3402978+00:00" endTime="2025-06-21T12:05:49.6318699+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4dc0bd91-8f6d-459c-b4a5-a3038094beba" />
    <UnitTestResult executionId="bf1c4323-2852-4c90-a722-0576decdb6ef" testId="89d8160b-8267-60e2-bcd3-00a79fa80f22" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsNullAndPredicateIsNotNull" computerName="fv-az1057-923" duration="00:00:00.0001321" startTime="2025-06-21T12:04:36.6555605+00:00" endTime="2025-06-21T12:04:36.6559238+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf1c4323-2852-4c90-a722-0576decdb6ef" />
    <UnitTestResult executionId="7f8fbd70-d8c9-4e64-8312-809cd65bf92f" testId="816d92fd-2ac8-36cd-a0c6-6bea2f668719" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:01.9078254" startTime="2025-06-21T12:04:36.0221413+00:00" endTime="2025-06-21T12:05:37.2981121+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f8fbd70-d8c9-4e64-8312-809cd65bf92f" />
    <UnitTestResult executionId="1c626f15-a5df-4ede-a123-4cb7fb0d5e3b" testId="510bd2bc-6dc3-d78a-bf42-131e83d26bf4" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:16.9552822" startTime="2025-06-21T12:04:36.6375995+00:00" endTime="2025-06-21T12:05:52.5633124+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c626f15-a5df-4ede-a123-4cb7fb0d5e3b">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6681045c-7743-4499-986a-d2a311ae3625" testId="c48481c9-9b00-fe71-05df-8da276d40ba5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:00.1543080" startTime="2025-06-21T12:04:35.9747906+00:00" endTime="2025-06-21T12:05:35.4970688+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6681045c-7743-4499-986a-d2a311ae3625" />
    <UnitTestResult executionId="31fb0b30-553f-4031-b030-0c1f26fb010c" testId="ef71d298-26fd-5d0a-a981-7b1d1f2283e4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock1 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(1, &quot;···)" computerName="fv-az1057-923" duration="00:00:59.7330286" startTime="2025-06-21T12:04:36.1056822+00:00" endTime="2025-06-21T12:05:35.1808959+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31fb0b30-553f-4031-b030-0c1f26fb010c" />
    <UnitTestResult executionId="bd564128-279f-45fc-968d-beb528c4e8dc" testId="fa5caaa2-3596-0f53-0c60-19a3bed0c36e" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.5182506" startTime="2025-06-21T12:04:35.7665289+00:00" endTime="2025-06-21T12:05:48.7199626+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd564128-279f-45fc-968d-beb528c4e8dc" />
    <UnitTestResult executionId="0292a0e0-010b-4574-b7da-ab98c81ddd42" testId="559ae0c2-2866-688f-a4ff-d1d1bf6d7f22" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:01:09.9829599" startTime="2025-06-21T12:04:35.1113150+00:00" endTime="2025-06-21T12:05:44.8689644+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0292a0e0-010b-4574-b7da-ab98c81ddd42" />
    <UnitTestResult executionId="1693f286-ffd5-4221-9f03-49111432e527" testId="b236b3c4-c438-c97c-b559-709c9483e369" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" computerName="fv-az1057-923" duration="00:01:18.3964967" startTime="2025-06-21T12:04:36.4203019+00:00" endTime="2025-06-21T12:05:53.9599141+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1693f286-ffd5-4221-9f03-49111432e527" />
    <UnitTestResult executionId="1c25e6d4-18e4-4a3c-ae08-bd7f721e80b0" testId="fe9823d2-bcfd-d5a8-d62a-2a736057bb90" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:16.1428508" startTime="2025-06-21T12:04:36.3678148+00:00" endTime="2025-06-21T12:05:51.6707277+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c25e6d4-18e4-4a3c-ae08-bd7f721e80b0" />
    <UnitTestResult executionId="1ec80867-1c98-4003-8ffe-4111e6bce26c" testId="c8fe4ad8-5f09-feb8-397a-460ee1c0ab56" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" computerName="fv-az1057-923" duration="00:01:09.5535525" startTime="2025-06-21T12:04:35.7922074+00:00" endTime="2025-06-21T12:05:44.7994470+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ec80867-1c98-4003-8ffe-4111e6bce26c" />
    <UnitTestResult executionId="01bc6f19-165f-4999-898c-44ac74a73c46" testId="12721ea3-8ebe-e8b0-4eaa-c7aaee8faad2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexGenericScenarios" computerName="fv-az1057-923" duration="00:01:18.5106143" startTime="2025-06-21T12:04:35.3130560+00:00" endTime="2025-06-21T12:05:53.5714606+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01bc6f19-165f-4999-898c-44ac74a73c46" />
    <UnitTestResult executionId="65f37a05-986f-4c20-92dc-0ba42529aebb" testId="9581bbef-78a6-0640-a2c7-1475f6a7a794" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" computerName="fv-az1057-923" duration="00:00:58.2677331" startTime="2025-06-21T12:04:36.3710966+00:00" endTime="2025-06-21T12:05:33.7705074+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65f37a05-986f-4c20-92dc-0ba42529aebb" />
    <UnitTestResult executionId="0592bfc5-43db-4c6e-b82a-88229d25ab69" testId="3c5849ff-ab44-bcf1-20a3-5a69ab45425f" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:12.6563269" startTime="2025-06-21T12:04:35.6575817+00:00" endTime="2025-06-21T12:05:47.8159855+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0592bfc5-43db-4c6e-b82a-88229d25ab69" />
    <UnitTestResult executionId="50d19067-a7fa-457e-ba1f-944a49fa859e" testId="c59b7e20-30f2-b4a5-e6ba-cfba888c7b5f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" computerName="fv-az1057-923" duration="00:01:19.5460729" startTime="2025-06-21T12:04:36.4000717+00:00" endTime="2025-06-21T12:05:55.0676380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50d19067-a7fa-457e-ba1f-944a49fa859e" />
    <UnitTestResult executionId="e065c29f-7565-4e5c-b985-e6f03cebd56c" testId="672e5d9a-928f-d4c6-4f90-d5b7c4016a65" testName="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.StringEvent += It.IsA&quot;···)" computerName="fv-az1057-923" duration="00:01:14.1615621" startTime="2025-06-21T12:04:34.6447013+00:00" endTime="2025-06-21T12:05:48.7810502+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e065c29f-7565-4e5c-b985-e6f03cebd56c" />
    <UnitTestResult executionId="579d8844-e52a-4e6f-88ee-0d2a4f7fa5a0" testId="751da9bb-c7b8-9b19-0299-16512cdbfb9e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" computerName="fv-az1057-923" duration="00:01:02.7832485" startTime="2025-06-21T12:04:35.9781672+00:00" endTime="2025-06-21T12:05:38.1430942+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="579d8844-e52a-4e6f-88ee-0d2a4f7fa5a0" />
    <UnitTestResult executionId="7529d7b6-9b93-48da-92d7-25808fe46b34" testId="815c3bc6-ac0b-ed1e-e8c3-6c3cdbfe91ae" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:00:55.8724256" startTime="2025-06-21T12:04:35.1134301+00:00" endTime="2025-06-21T12:05:30.7641808+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7529d7b6-9b93-48da-92d7-25808fe46b34" />
    <UnitTestResult executionId="89f74ac4-e998-407f-b1da-a453e5701a0f" testId="0989ffaa-ef8b-96a8-9a7e-9dc26429e12e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" computerName="fv-az1057-923" duration="00:01:13.1536086" startTime="2025-06-21T12:04:36.5532781+00:00" endTime="2025-06-21T12:05:48.7408764+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="89f74ac4-e998-407f-b1da-a453e5701a0f" />
    <UnitTestResult executionId="af9e9899-e4ae-49ed-adc2-bb3bd73fa305" testId="040bcf2f-c535-b023-73f2-b0f55c02adef" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:00:51.3557481" startTime="2025-06-21T12:04:36.1238334+00:00" endTime="2025-06-21T12:05:26.7971181+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af9e9899-e4ae-49ed-adc2-bb3bd73fa305" />
    <UnitTestResult executionId="018cd250-05e1-4a56-a7ac-46afff0a945b" testId="51af7735-a0e2-163a-f978-a7ebed888b56" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:04.3473778" startTime="2025-06-21T12:04:35.0929644+00:00" endTime="2025-06-21T12:05:39.2241302+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="018cd250-05e1-4a56-a7ac-46afff0a945b" />
    <UnitTestResult executionId="8ddb9e3f-d3f0-43f6-9f39-373bef998ce3" testId="b80e90c6-9437-86e4-2ef5-0954bf360175" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" computerName="fv-az1057-923" duration="00:01:13.0296547" startTime="2025-06-21T12:04:35.4308526+00:00" endTime="2025-06-21T12:05:48.1065790+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8ddb9e3f-d3f0-43f6-9f39-373bef998ce3" />
    <UnitTestResult executionId="f77b0084-1ca2-417c-8d95-2d75f4823993" testId="cb4fe3b2-092f-2096-1a0c-a5657d1219d1" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:19.0368082" startTime="2025-06-21T12:04:34.6440618+00:00" endTime="2025-06-21T12:05:53.6887077+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f77b0084-1ca2-417c-8d95-2d75f4823993" />
    <UnitTestResult executionId="4f272da7-115b-49c1-96c5-0175c6ef02b7" testId="8b596ac8-fe15-c204-3241-7fb730ef6bd6" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:17.4581955" startTime="2025-06-21T12:04:35.2891469+00:00" endTime="2025-06-21T12:05:52.4511898+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f272da7-115b-49c1-96c5-0175c6ef02b7" />
    <UnitTestResult executionId="fe6d7f23-302b-4f29-a3b9-c4fbd274c53f" testId="40cb4b1c-9eca-d157-a4b1-5694df598862" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleSystemTypes" computerName="fv-az1057-923" duration="00:01:15.6939962" startTime="2025-06-21T12:04:35.1170326+00:00" endTime="2025-06-21T12:05:50.5864834+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe6d7f23-302b-4f29-a3b9-c4fbd274c53f" />
    <UnitTestResult executionId="6a3fdf37-9544-4290-ac90-4f298f586d82" testId="dd904112-f904-45ec-a7db-9620c4e6ad76" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:00:55.6539478" startTime="2025-06-21T12:04:37.0691996+00:00" endTime="2025-06-21T12:05:31.3954308+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a3fdf37-9544-4290-ac90-4f298f586d82">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.Is&lt;int&gt;(i =&gt; i % 2 == 0), It.Is&lt;int&gt;(j =&gt; j &lt; 100)));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a2945a9-4d66-48b2-88cd-a26a6e328a94" testId="39dafa3c-1c6e-061d-629e-2cc22f7fb959" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.4236588" startTime="2025-06-21T12:04:36.5584784+00:00" endTime="2025-06-21T12:05:47.0130185+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a2945a9-4d66-48b2-88cd-a26a6e328a94" />
    <UnitTestResult executionId="aa6e412c-3ad1-4987-9206-4c2b980f3af1" testId="ca1e4578-312c-50dd-a774-caee50afbfec" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new SealedClass();&quot;)" computerName="fv-az1057-923" duration="00:01:10.8124083" startTime="2025-06-21T12:04:35.3234113+00:00" endTime="2025-06-21T12:05:45.8080505+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa6e412c-3ad1-4987-9206-4c2b980f3af1" />
    <UnitTestResult executionId="363ec0d4-234f-481a-a0bf-e65c5fee05eb" testId="7aa73f34-5ebc-ebfc-06cb-5f84f325747e" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" computerName="fv-az1057-923" duration="00:01:17.3045805" startTime="2025-06-21T12:04:34.6835046+00:00" endTime="2025-06-21T12:05:51.9914729+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="363ec0d4-234f-481a-a0bf-e65c5fee05eb">
      <Output>
        <StdOut>Original:


public class MyClass
{
    [Obsolete]
public int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}

Fixed:


public class MyClass
{
    [Obsolete]
public virtual int MyMethod() =&gt; 0;
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyMethod())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="79cc50e8-8474-45dd-9960-bcef9918f5f7" testId="3c905a16-ae3f-9603-a68e-4f676ab21981" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:05.5264829" startTime="2025-06-21T12:04:35.8616450+00:00" endTime="2025-06-21T12:05:40.8066854+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79cc50e8-8474-45dd-9960-bcef9918f5f7">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new MockRepository(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new MockRepository(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66061ad5-cfff-45d9-ab16-fd0ccd69f93a" testId="fa407d98-f7d0-6cf0-35d3-bb9bebdf537c" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:20.0676472" startTime="2025-06-21T12:04:35.4553730+00:00" endTime="2025-06-21T12:05:55.2032818+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66061ad5-cfff-45d9-ab16-fd0ccd69f93a" />
    <UnitTestResult executionId="27925ac8-6f11-446a-a270-65c775c655c9" testId="d5893a8d-327f-9b88-c743-c4a105bc0822" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:18.7350604" startTime="2025-06-21T12:04:35.4336969+00:00" endTime="2025-06-21T12:05:53.8392718+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="27925ac8-6f11-446a-a270-65c775c655c9" />
    <UnitTestResult executionId="08afc108-db5c-4c86-950e-82b44eb000b7" testId="0062f649-97e5-818b-179f-2265ea6a4f9d" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2704361" startTime="2025-06-21T12:04:37.0014793+00:00" endTime="2025-06-21T12:05:53.0101579+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08afc108-db5c-4c86-950e-82b44eb000b7">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2dfb3298-bac8-4e61-b87f-aefddbb2fdec" testId="25cfc213-7b8f-3c38-a97e-346c977de46f" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" computerName="fv-az1057-923" duration="00:01:18.8327602" startTime="2025-06-21T12:04:34.8084531+00:00" endTime="2025-06-21T12:05:53.6161334+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2dfb3298-bac8-4e61-b87f-aefddbb2fdec">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x.Property)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80107751-6880-45fd-8217-85f013f75c4e" testId="05de673f-2a6c-1d8c-aab9-b38f4f71e81c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:00:50.6727251" startTime="2025-06-21T12:04:36.1287140+00:00" endTime="2025-06-21T12:05:26.1146698+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80107751-6880-45fd-8217-85f013f75c4e" />
    <UnitTestResult executionId="6b2fa6d6-0783-40eb-a779-3661de486534" testId="498a2102-0af4-93e9-4ac5-fea051d61b04" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:20.0162832" startTime="2025-06-21T12:04:34.6147434+00:00" endTime="2025-06-21T12:05:54.6199597+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6b2fa6d6-0783-40eb-a779-3661de486534" />
    <UnitTestResult executionId="58e18730-240d-4093-9cb9-1cbfdf308334" testId="5027b8f0-3078-d394-0998-a0a7eaa40f62" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:00:59.6474577" startTime="2025-06-21T12:04:36.5975503+00:00" endTime="2025-06-21T12:05:35.2593141+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58e18730-240d-4093-9cb9-1cbfdf308334" />
    <UnitTestResult executionId="3c8b0389-4f3e-48cf-91bb-f8af339f67bd" testId="dc4f7fe1-7511-b5a7-8aab-d50dc0370ad4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" computerName="fv-az1057-923" duration="00:01:14.1577008" startTime="2025-06-21T12:04:36.3897453+00:00" endTime="2025-06-21T12:05:49.7035171+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3c8b0389-4f3e-48cf-91bb-f8af339f67bd" />
    <UnitTestResult executionId="9d1b91c4-ed95-45ee-b3ce-ec1e04042251" testId="cc56bc5a-8fbb-7001-21d7-26f6a4666e46" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" computerName="fv-az1057-923" duration="00:00:57.3930149" startTime="2025-06-21T12:04:36.3258533+00:00" endTime="2025-06-21T12:05:32.8887839+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d1b91c4-ed95-45ee-b3ce-ec1e04042251" />
    <UnitTestResult executionId="2adef22b-10f7-4ef3-8327-2d514b1c56e0" testId="b2271c98-188c-59ba-4ac9-df20dab1ba92" testName="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" computerName="fv-az1057-923" duration="00:01:14.0962031" startTime="2025-06-21T12:04:35.7695796+00:00" endTime="2025-06-21T12:05:49.3069379+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2adef22b-10f7-4ef3-8327-2d514b1c56e0" />
    <UnitTestResult executionId="2652ec60-46e8-46e6-92e9-650e95a34b1e" testId="82da5cd2-ad35-a2d0-26f0-0a9d0c434c30" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" computerName="fv-az1057-923" duration="00:01:07.3057547" startTime="2025-06-21T12:04:35.0176687+00:00" endTime="2025-06-21T12:05:42.1483874+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2652ec60-46e8-46e6-92e9-650e95a34b1e">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething("test"))|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eff86beb-af76-4136-81d1-52f3188dfe5f" testId="ce05186e-fee3-9111-d410-1f6ef219b626" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:00:59.9794925" startTime="2025-06-21T12:04:35.8181087+00:00" endTime="2025-06-21T12:05:35.2357976+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eff86beb-af76-4136-81d1-52f3188dfe5f" />
    <UnitTestResult executionId="ee7a5691-e89f-44f9-9e1b-7ca18b95f53c" testId="cb47c782-4614-6e61-857c-400687cb5aac" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNestedGenericTypes" computerName="fv-az1057-923" duration="00:01:10.5024157" startTime="2025-06-21T12:04:35.2186862+00:00" endTime="2025-06-21T12:05:45.4786085+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee7a5691-e89f-44f9-9e1b-7ca18b95f53c" />
    <UnitTestResult executionId="b217bba1-c485-477f-a2a8-dd0a04ccb904" testId="7992398f-e1a2-c020-fe79-892a38ef7bce" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" computerName="fv-az1057-923" duration="00:01:09.9008547" startTime="2025-06-21T12:04:36.1670322+00:00" endTime="2025-06-21T12:05:45.3631426+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b217bba1-c485-477f-a2a8-dd0a04ccb904" />
    <UnitTestResult executionId="ea63d89a-4fdc-4fb9-900f-d8ddf9c79f63" testId="c872a420-5917-534e-7061-800f623a734c" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.2720372" startTime="2025-06-21T12:04:34.6641622+00:00" endTime="2025-06-21T12:05:41.9353704+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea63d89a-4fdc-4fb9-900f-d8ddf9c79f63" />
    <UnitTestResult executionId="db794928-7588-4cc8-abaa-b175efb0f95d" testId="8065815c-88fa-48b3-e8e2-62a578142b66" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNonMockObjectCreation" computerName="fv-az1057-923" duration="00:01:02.8709252" startTime="2025-06-21T12:04:35.1512255+00:00" endTime="2025-06-21T12:05:37.8379631+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="db794928-7588-4cc8-abaa-b175efb0f95d" />
    <UnitTestResult executionId="f8194dc1-683f-419b-b458-077be4b93bd8" testId="56fe3143-9052-3d95-38d5-868cd5745e32" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:04.1723649" startTime="2025-06-21T12:04:35.8961159+00:00" endTime="2025-06-21T12:05:39.5445137+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f8194dc1-683f-419b-b458-077be4b93bd8">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bf0dd895-b4c4-45f7-9d46-581c0fec813e" testId="ec2e6245-9ae4-ce4d-f619-1b0db5655fb6" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" computerName="fv-az1057-923" duration="00:01:15.8386448" startTime="2025-06-21T12:04:35.9481653+00:00" endTime="2025-06-21T12:05:51.1904134+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf0dd895-b4c4-45f7-9d46-581c0fec813e">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)"42")).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="761c9a40-84d1-4bfd-8b85-d3a98858234d" testId="bef2d3f3-b340-bdb5-c754-1671ca328f9e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" computerName="fv-az1057-923" duration="00:00:51.7910059" startTime="2025-06-21T12:04:35.9840401+00:00" endTime="2025-06-21T12:05:27.1299542+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="761c9a40-84d1-4bfd-8b85-d3a98858234d" />
    <UnitTestResult executionId="70e7e83e-fc14-45f7-9b39-cce3cc6a377c" testId="9c3c7d90-1e05-94f2-646a-0c362ec38066" testName="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" computerName="fv-az1057-923" duration="00:01:22.1942374" startTime="2025-06-21T12:04:35.2201166+00:00" endTime="2025-06-21T12:05:57.1731209+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70e7e83e-fc14-45f7-9b39-cce3cc6a377c" />
    <UnitTestResult executionId="0e9169ba-49c9-4b58-85b6-9cdefe7dfe5a" testId="b8b97b02-5edd-038e-93db-f8f1db5a4d6e" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:16.8463876" startTime="2025-06-21T12:04:34.7822199+00:00" endTime="2025-06-21T12:05:51.5732808+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e9169ba-49c9-4b58-85b6-9cdefe7dfe5a">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="56465549-a548-4c75-aa90-637939595065" testId="04bd9787-547a-c413-32c9-48ce2b6c8f52" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" computerName="fv-az1057-923" duration="00:01:05.5382732" startTime="2025-06-21T12:04:35.0310152+00:00" endTime="2025-06-21T12:05:40.3848483+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="56465549-a548-4c75-aa90-637939595065">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38a69032-d9e1-4380-ae6e-239fa02b7670" testId="cc45b4c1-4a71-34b2-730a-6aa67e0a41a8" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.7872709" startTime="2025-06-21T12:04:35.6466448+00:00" endTime="2025-06-21T12:05:49.9486956+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38a69032-d9e1-4380-ae6e-239fa02b7670" />
    <UnitTestResult executionId="6ef23346-5579-43db-bb84-3b3b811163b0" testId="ea22d617-b073-7138-f9e9-1623e26405fe" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.1604425" startTime="2025-06-21T12:04:35.3242796+00:00" endTime="2025-06-21T12:05:54.1525827+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6ef23346-5579-43db-bb84-3b3b811163b0" />
    <UnitTestResult executionId="340589a7-d8fb-4900-babc-bd5ad7f99609" testId="49f7c3ed-476b-de5b-a567-a8490ef69160" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:12.5930707" startTime="2025-06-21T12:04:36.6206598+00:00" endTime="2025-06-21T12:05:48.2049855+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="340589a7-d8fb-4900-babc-bd5ad7f99609" />
    <UnitTestResult executionId="a76b0879-b3e8-463b-a4ad-340c41cb8dc2" testId="c24bf41d-9555-6a96-15fd-43fb65af5715" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" computerName="fv-az1057-923" duration="00:01:19.6380453" startTime="2025-06-21T12:04:36.5076066+00:00" endTime="2025-06-21T12:05:55.2812065+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a76b0879-b3e8-463b-a4ad-340c41cb8dc2" />
    <UnitTestResult executionId="b11cfb48-85fc-4497-94aa-2121db17f966" testId="934de335-af0b-f8f9-34f3-1bbbf28a39f6" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualIndexer&gt;().Setup(x &quot;···)" computerName="fv-az1057-923" duration="00:01:00.7462735" startTime="2025-06-21T12:04:35.9377206+00:00" endTime="2025-06-21T12:05:36.0689431+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b11cfb48-85fc-4497-94aa-2121db17f966">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClassWithVirtualIndexer&gt;().Setup(x =&gt; x[0]);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="982c7feb-4bc9-491f-ab87-9b075a692d41" testId="c80b66e2-194e-cdaa-3345-cdcf3e669b38" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:00.9454238" startTime="2025-06-21T12:04:35.9310478+00:00" endTime="2025-06-21T12:05:36.2488675+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="982c7feb-4bc9-491f-ab87-9b075a692d41">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.IsAny&lt;int&gt;(), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a4279dbb-976e-4cfe-acf0-d31cdd482e0f" testId="9a1770fb-4dc6-381a-0465-82a4637e6d14" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.De&quot;···)" computerName="fv-az1057-923" duration="00:01:06.9053961" startTime="2025-06-21T12:04:36.0651312+00:00" endTime="2025-06-21T12:05:42.3259824+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a4279dbb-976e-4cfe-acf0-d31cdd482e0f" />
    <UnitTestResult executionId="69bfc4f2-5dbd-44c1-bfc9-b1548cd49617" testId="2c011c37-750e-02ce-6ed2-ed3915452d36" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" computerName="fv-az1057-923" duration="00:01:20.4089773" startTime="2025-06-21T12:04:34.6169002+00:00" endTime="2025-06-21T12:05:55.0111601+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="69bfc4f2-5dbd-44c1-bfc9-b1548cd49617" />
    <UnitTestResult executionId="98c0d1aa-5da8-42e3-82b9-ae3d5ec4d900" testId="a3328e5f-ad9c-85aa-be0c-fb85695eb5bf" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:19.2970976" startTime="2025-06-21T12:04:35.3837827+00:00" endTime="2025-06-21T12:05:54.4142149+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98c0d1aa-5da8-42e3-82b9-ae3d5ec4d900" />
    <UnitTestResult executionId="a2ce2299-cd87-45f2-b14d-a82caa2a03da" testId="4d843ccb-d8cc-0944-e532-07d92d55b73e" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:09.5624818" startTime="2025-06-21T12:04:36.9019058+00:00" endTime="2025-06-21T12:05:45.3213179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2ce2299-cd87-45f2-b14d-a82caa2a03da">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f4d9195-a1a4-435f-876d-e6493278b124" testId="bab83788-1aad-4bdc-c752-354bb3b7846c" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:00:59.2525439" startTime="2025-06-21T12:04:35.9678244+00:00" endTime="2025-06-21T12:05:34.5801347+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f4d9195-a1a4-435f-876d-e6493278b124" />
    <UnitTestResult executionId="a42c0f46-d04b-4f9e-883d-776769a2ef08" testId="dee52652-f694-14f3-d87b-28914443db21" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:13.9279634" startTime="2025-06-21T12:04:35.6869335+00:00" endTime="2025-06-21T12:05:49.1078738+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a42c0f46-d04b-4f9e-883d-776769a2ef08" />
    <UnitTestResult executionId="a0f83c4e-9c99-4a95-b52a-911fa1b1b007" testId="ec333ae4-d65d-d173-5113-dc8124154ee5" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:19.0397858" startTime="2025-06-21T12:04:34.6399510+00:00" endTime="2025-06-21T12:05:53.6741310+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a0f83c4e-9c99-4a95-b52a-911fa1b1b007" />
    <UnitTestResult executionId="29f7fc21-0359-4e4d-802e-6dc7ac990949" testId="a616e231-f3f8-97a8-0deb-672041d7bf5d" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" computerName="fv-az1057-923" duration="00:01:18.8801162" startTime="2025-06-21T12:04:36.4065139+00:00" endTime="2025-06-21T12:05:54.4600349+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29f7fc21-0359-4e4d-802e-6dc7ac990949" />
    <UnitTestResult executionId="d60969db-93ec-4f50-bd1c-7a7bb05939c3" testId="a6c73803-e08d-1dc6-7ec3-077ff4b70ae8" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:16.0985140" startTime="2025-06-21T12:04:36.6144074+00:00" endTime="2025-06-21T12:05:51.7148740+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d60969db-93ec-4f50-bd1c-7a7bb05939c3" />
    <UnitTestResult executionId="d11f20a0-325a-4c7a-8e47-eca9d854d0be" testId="52b48828-8fc4-4b08-7c25-ec55003a54ef" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsElement_WhenSingleMatch" computerName="fv-az1057-923" duration="00:00:00.0002530" startTime="2025-06-21T12:04:36.6527998+00:00" endTime="2025-06-21T12:04:36.6531270+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d11f20a0-325a-4c7a-8e47-eca9d854d0be" />
    <UnitTestResult executionId="14f33ee4-2643-43d0-9807-d9802487e007" testId="7793dbaa-579c-1157-01c4-531db297c1f3" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:14.0419690" startTime="2025-06-21T12:04:36.7591024+00:00" endTime="2025-06-21T12:05:49.7760779+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14f33ee4-2643-43d0-9807-d9802487e007">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a7905b03-287c-4e5d-931c-fd842e0a2e3b" testId="54d6e4a3-138c-eb3b-3f35-dd9b40bb5f06" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:04.3084088" startTime="2025-06-21T12:04:36.0280783+00:00" endTime="2025-06-21T12:05:39.7019937+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7905b03-287c-4e5d-931c-fd842e0a2e3b" />
    <UnitTestResult executionId="d989108f-66f8-4687-91bd-7eaa7ee29e38" testId="dbef0cf6-e9d3-658b-07f9-87f22e5d5689" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" computerName="fv-az1057-923" duration="00:00:55.4758054" startTime="2025-06-21T12:04:36.1244210+00:00" endTime="2025-06-21T12:05:30.9161239+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d989108f-66f8-4687-91bd-7eaa7ee29e38" />
    <UnitTestResult executionId="b0aa2562-a0e0-49cd-97f0-3f20c3457615" testId="ae91daf1-32ce-a234-2301-7d14080d20e4" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:02.0527124" startTime="2025-06-21T12:04:35.1550435+00:00" endTime="2025-06-21T12:05:36.9933955+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0aa2562-a0e0-49cd-97f0-3f20c3457615" />
    <UnitTestResult executionId="3bfdb27d-2b43-4e2e-a1f1-c6825d6709ec" testId="2bb4c712-393c-1e49-862d-e2fe7584d47e" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" computerName="fv-az1057-923" duration="00:01:17.2308355" startTime="2025-06-21T12:04:34.9405758+00:00" endTime="2025-06-21T12:05:52.0363159+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3bfdb27d-2b43-4e2e-a1f1-c6825d6709ec">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    public sealed override string ToString() =&gt; "";
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.ToString())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e0cfe7f8-e377-4b83-b647-bca2d50f430e" testId="83fc7fff-fa13-de12-2e87-a683e5d73b05" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:06.2484013" startTime="2025-06-21T12:04:35.0994948+00:00" endTime="2025-06-21T12:05:41.1669838+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0cfe7f8-e377-4b83-b647-bca2d50f430e" />
    <UnitTestResult executionId="331b4472-ab6b-4ec9-8922-90797738ab82" testId="05774033-0861-5717-910c-eb57eae566a6" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true, MockBehavior.&quot;···)" computerName="fv-az1057-923" duration="00:00:51.6093774" startTime="2025-06-21T12:04:36.0335332+00:00" endTime="2025-06-21T12:05:27.0052574+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="331b4472-ab6b-4ec9-8922-90797738ab82" />
    <UnitTestResult executionId="456a089e-ac3c-4cf6-8dd9-e8c7ace1f920" testId="73c97c1f-f678-cca6-fbf7-c7f87628113b" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:05.5520690" startTime="2025-06-21T12:04:34.9017384+00:00" endTime="2025-06-21T12:05:40.3370857+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="456a089e-ac3c-4cf6-8dd9-e8c7ace1f920" />
    <UnitTestResult executionId="0e07c8ed-e454-46be-9478-55c1779c7640" testId="90c96183-3cd0-55e4-c78f-f771d09d06c5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldProduceDiagnosticsForInterfaceWithConstructorArgs" computerName="fv-az1057-923" duration="00:01:15.2585387" startTime="2025-06-21T12:04:35.8040788+00:00" endTime="2025-06-21T12:05:50.6319119+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e07c8ed-e454-46be-9478-55c1779c7640" />
    <UnitTestResult executionId="8b8c4c84-923e-4a3b-9f96-144d272aa3aa" testId="160cec22-bcbc-e36f-6662-f4b2b718f138" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" computerName="fv-az1057-923" duration="00:00:58.9845877" startTime="2025-06-21T12:04:35.9034644+00:00" endTime="2025-06-21T12:05:34.3291456+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b8c4c84-923e-4a3b-9f96-144d272aa3aa">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="25794f01-0f7a-4310-9067-340cf9b4b825" testId="65383359-1398-8e84-011b-4be6651a9c1f" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledGlobally(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:01:09.4881761" startTime="2025-06-21T12:04:35.8255441+00:00" endTime="2025-06-21T12:05:44.7509932+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25794f01-0f7a-4310-9067-340cf9b4b825" />
    <UnitTestResult executionId="33b58fb2-4ca8-4642-bac6-861686463e1a" testId="2cbb2b59-e4c1-830c-c81b-a13a1d3ab21f" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" computerName="fv-az1057-923" duration="00:01:11.9221990" startTime="2025-06-21T12:04:34.7073950+00:00" endTime="2025-06-21T12:05:46.6298774+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33b58fb2-4ca8-4642-bac6-861686463e1a">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexer&gt;().Verify(x =&gt; x[0])|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0284b30b-f81c-4e6c-990e-2341b2f5c666" testId="9c4a0fdc-ad83-d9b1-fe6d-92188cc6329a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:01:02.9930636" startTime="2025-06-21T12:04:35.9714807+00:00" endTime="2025-06-21T12:05:38.3649666+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0284b30b-f81c-4e6c-990e-2341b2f5c666" />
    <UnitTestResult executionId="8e767a18-fe25-4b7d-ab54-63784f937098" testId="95dedf37-b449-7440-036f-feef4913bf3b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:08.4855020" startTime="2025-06-21T12:04:35.7305980+00:00" endTime="2025-06-21T12:05:43.6790068+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e767a18-fe25-4b7d-ab54-63784f937098" />
    <UnitTestResult executionId="9b8dc24c-61ba-48cc-b145-b689c3d30931" testId="b6ff9551-550a-b179-512c-4215997f546f" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:16.0057487" startTime="2025-06-21T12:04:35.4002381+00:00" endTime="2025-06-21T12:05:51.0773478+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b8dc24c-61ba-48cc-b145-b689c3d30931" />
    <UnitTestResult executionId="e2f7a353-e399-4738-92fa-8fe7a6ef2295" testId="6e84d580-92f7-3e9f-990e-d78eeac17fcc" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:00:56.8107047" startTime="2025-06-21T12:04:36.2898196+00:00" endTime="2025-06-21T12:05:32.2915252+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e2f7a353-e399-4738-92fa-8fe7a6ef2295" />
    <UnitTestResult executionId="427ada49-62af-4471-a068-092254258196" testId="3466562b-051e-5a6c-8f57-713af9bea0dc" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:08.2846930" startTime="2025-06-21T12:04:35.2045392+00:00" endTime="2025-06-21T12:05:43.2492643+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="427ada49-62af-4471-a068-092254258196" />
    <UnitTestResult executionId="2c397631-c0ff-49fe-ab13-f3b6eb348ff2" testId="d4c115b3-f852-b001-5373-e13d5cd038ad" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" computerName="fv-az1057-923" duration="00:01:09.5697352" startTime="2025-06-21T12:04:37.0096330+00:00" endTime="2025-06-21T12:05:45.2668733+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c397631-c0ff-49fe-ab13-f3b6eb348ff2" />
    <UnitTestResult executionId="e955567e-e22b-4417-aba2-8f7928dcd45a" testId="60253119-4c02-3e7b-65a0-b1d736937fe6" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" computerName="fv-az1057-923" duration="00:01:15.4743857" startTime="2025-06-21T12:04:36.6873643+00:00" endTime="2025-06-21T12:05:51.1663029+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e955567e-e22b-4417-aba2-8f7928dcd45a">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7749a804-7e40-4922-bf73-867ff1e81a26" testId="3e065466-794c-166d-a846-c6c1ebbe4543" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:01:02.5638818" startTime="2025-06-21T12:04:36.0137175+00:00" endTime="2025-06-21T12:05:37.9830786+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7749a804-7e40-4922-bf73-867ff1e81a26" />
    <UnitTestResult executionId="b1ea116a-5632-4271-8c04-e534cda13b98" testId="04dd0945-e96e-e9c0-3739-1156dbcb8549" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" computerName="fv-az1057-923" duration="00:01:04.6353387" startTime="2025-06-21T12:04:34.7005352+00:00" endTime="2025-06-21T12:05:39.3331380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1ea116a-5632-4271-8c04-e534cda13b98">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public class MyClass
{
    public int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}

Fixed:
namespace MyNamespace;

public class MyClass
{
    public virtual int MyProperty { get; set; }
}

public class MyTest : MyClass
{
    public void Test()
    {
        var mock = new Mock&lt;MyClass&gt;();
        {|Moq1210:mock.Verify(x =&gt; x.MyProperty)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8b8f5fbc-e976-4a4a-8aeb-a41604ce22cd" testId="54a7163b-30ef-430d-29ff-6a98f8904b7e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3964073" startTime="2025-06-21T12:04:36.3898318+00:00" endTime="2025-06-21T12:05:54.9419500+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8b8f5fbc-e976-4a4a-8aeb-a41604ce22cd" />
    <UnitTestResult executionId="ad902db3-79f6-47f1-8891-6f6b76497753" testId="5d1c5ed4-1def-55a3-7572-05d0b55b42e0" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:57.9812456" startTime="2025-06-21T12:04:36.0416392+00:00" endTime="2025-06-21T12:05:33.3884137+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad902db3-79f6-47f1-8891-6f6b76497753" />
    <UnitTestResult executionId="d3f9beb5-4cca-404c-86e7-7e71297b7778" testId="42321baa-4c22-10a6-f719-62c4ebe46d78" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" computerName="fv-az1057-923" duration="00:01:01.1966960" startTime="2025-06-21T12:04:35.8907998+00:00" endTime="2025-06-21T12:05:36.5684544+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3f9beb5-4cca-404c-86e7-7e71297b7778" />
    <UnitTestResult executionId="65ad9b8a-d4d9-43b7-89b3-0a6f991ab288" testId="791e324a-f9f5-887e-0dac-9245aacbfa1a" testName="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenIsDefaultOrEmpty" computerName="fv-az1057-923" duration="00:00:00.0322864" startTime="2025-06-21T12:04:35.8883903+00:00" endTime="2025-06-21T12:04:35.9647491+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65ad9b8a-d4d9-43b7-89b3-0a6f991ab288" />
    <UnitTestResult executionId="1f35985e-7254-4da6-a36a-f519219bead8" testId="6f899782-0abc-5450-da00-33f21208a929" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:19.6041681" startTime="2025-06-21T12:04:36.4751309+00:00" endTime="2025-06-21T12:05:55.2292213+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f35985e-7254-4da6-a36a-f519219bead8" />
    <UnitTestResult executionId="67c4118f-f868-4a31-a331-0c7458c73133" testId="73fc752d-02f8-0ecb-0f86-e6aa77807fce" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" computerName="fv-az1057-923" duration="00:01:19.8981400" startTime="2025-06-21T12:04:34.8292436+00:00" endTime="2025-06-21T12:05:54.7014107+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67c4118f-f868-4a31-a331-0c7458c73133">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Field)|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="077bb019-0510-4663-8c58-6e95db009aa4" testId="885155de-7d80-adfd-3ef0-d475318a68d7" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" computerName="fv-az1057-923" duration="00:01:06.2546273" startTime="2025-06-21T12:04:35.0514361+00:00" endTime="2025-06-21T12:05:41.1140036+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="077bb019-0510-4663-8c58-6e95db009aa4" />
    <UnitTestResult executionId="8109df10-4336-42e6-9d0b-8aa9486b1eec" testId="6a680012-9b4b-42a8-eba3-b7ac3ca8ed3b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:10.9328711" startTime="2025-06-21T12:04:36.4187902+00:00" endTime="2025-06-21T12:05:46.5262977+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8109df10-4336-42e6-9d0b-8aa9486b1eec" />
    <UnitTestResult executionId="a8bcb84d-8968-4e75-9b5a-3c8fed0a58bd" testId="ac9593df-ed58-d69d-e43a-61ed71f31408" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:07.4594428" startTime="2025-06-21T12:04:35.2160130+00:00" endTime="2025-06-21T12:05:42.4360199+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8bcb84d-8968-4e75-9b5a-3c8fed0a58bd" />
    <UnitTestResult executionId="5a357e9e-85d8-4a67-8701-285cb950cc44" testId="f9974e7e-97cc-6b46-88a3-ac970c71c337" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" computerName="fv-az1057-923" duration="00:01:08.2480047" startTime="2025-06-21T12:04:35.0965559+00:00" endTime="2025-06-21T12:05:43.1370214+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a357e9e-85d8-4a67-8701-285cb950cc44" />
    <UnitTestResult executionId="e64ad87e-41ac-4c8c-bbbd-b098fa6194c1" testId="7611c84b-55c5-c369-e97b-99345d1f32f2" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldNotProduceDiagnosticsWhenSuppressedViaPragma" computerName="fv-az1057-923" duration="00:00:57.6803672" startTime="2025-06-21T12:04:36.0435406+00:00" endTime="2025-06-21T12:05:33.0969704+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e64ad87e-41ac-4c8c-bbbd-b098fa6194c1" />
    <UnitTestResult executionId="ae270c38-e5a0-4b28-b259-0101b4faa2ba" testId="61675ae5-4c64-18fd-3bb6-2deb43c92ed3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" computerName="fv-az1057-923" duration="00:01:16.0580350" startTime="2025-06-21T12:04:36.3906452+00:00" endTime="2025-06-21T12:05:51.5830978+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ae270c38-e5a0-4b28-b259-0101b4faa2ba" />
    <UnitTestResult executionId="b74f33ab-1c55-49d6-907f-f40c1c1533cb" testId="8cf57e9b-b761-1f7b-6349-67fbb5eaeee2" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:19.7440155" startTime="2025-06-21T12:04:35.6711728+00:00" endTime="2025-06-21T12:05:54.9065379+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b74f33ab-1c55-49d6-907f-f40c1c1533cb" />
    <UnitTestResult executionId="52762029-98e3-4bd1-9b23-33f523515196" testId="ec62c6da-bcdc-1a43-6e16-9da83f3e83de" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" computerName="fv-az1057-923" duration="00:00:52.0940880" startTime="2025-06-21T12:04:35.9601458+00:00" endTime="2025-06-21T12:05:27.4050266+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52762029-98e3-4bd1-9b23-33f523515196" />
    <UnitTestResult executionId="38986c9b-2eb3-4059-8fae-ef33fd4aaa61" testId="d8a89daa-283d-8cce-a9ab-333d5280d7e8" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:12.0516746" startTime="2025-06-21T12:04:36.5898036+00:00" endTime="2025-06-21T12:05:47.6453680+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38986c9b-2eb3-4059-8fae-ef33fd4aaa61" />
    <UnitTestResult executionId="8d3537e0-1dfc-4395-aedd-f8fcf74371d7" testId="57395e97-2b3e-5551-1bcd-c454b28a8436" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:01.2200327" startTime="2025-06-21T12:04:35.1191312+00:00" endTime="2025-06-21T12:05:36.1200287+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d3537e0-1dfc-4395-aedd-f8fcf74371d7" />
    <UnitTestResult executionId="f6aa58b0-b78e-4a35-bfa4-e2a583660b3c" testId="49947d05-edab-7e73-0114-36596eba2224" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" computerName="fv-az1057-923" duration="00:01:10.9451997" startTime="2025-06-21T12:04:35.4036606+00:00" endTime="2025-06-21T12:05:45.9988636+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6aa58b0-b78e-4a35-bfa4-e2a583660b3c" />
    <UnitTestResult executionId="0e35383f-0e9d-4c91-bc17-2c71c710b67b" testId="5b94b433-3702-16ef-8d4a-a0793a68084a" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:17.9931186" startTime="2025-06-21T12:04:36.9126528+00:00" endTime="2025-06-21T12:05:53.6753065+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e35383f-0e9d-4c91-bc17-2c71c710b67b">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback((int i, string s, DateTime dt) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="339837b1-ea11-4423-a7c5-d5b9f56bb33d" testId="538efd45-15bd-5b30-db20-350b702739cb" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1441091" startTime="2025-06-21T12:04:34.9346821+00:00" endTime="2025-06-21T12:05:52.9462911+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="339837b1-ea11-4423-a7c5-d5b9f56bb33d" />
    <UnitTestResult executionId="70249611-7e7a-4a08-b5ea-da5c2f54dd04" testId="798d50bf-36b9-7b05-81c0-2f946dfbb2f4" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:11.2524351" startTime="2025-06-21T12:04:35.8994492+00:00" endTime="2025-06-21T12:05:46.5511562+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70249611-7e7a-4a08-b5ea-da5c2f54dd04">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d335b738-b224-4bbf-b007-f7da183461e9" testId="3ca07d40-46d0-b75e-f1b6-40485dced7bf" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:03.3381221" startTime="2025-06-21T12:04:35.9043343+00:00" endTime="2025-06-21T12:05:38.6523715+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d335b738-b224-4bbf-b007-f7da183461e9">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="737397de-a6c7-4c39-b2ba-69b64e4a70ae" testId="dbf839f3-1b29-ad47-2497-a4856b2cdb88" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" computerName="fv-az1057-923" duration="00:00:52.8915851" startTime="2025-06-21T12:04:35.0888050+00:00" endTime="2025-06-21T12:05:27.7635562+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="737397de-a6c7-4c39-b2ba-69b64e4a70ae" />
    <UnitTestResult executionId="28c0ad16-3caa-4e7d-81c6-8184346921a7" testId="82864c15-5505-7bce-e3e5-20b34a05e5ab" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1464932" startTime="2025-06-21T12:04:34.9310313+00:00" endTime="2025-06-21T12:05:52.9601192+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28c0ad16-3caa-4e7d-81c6-8184346921a7" />
    <UnitTestResult executionId="80183fa0-2241-4d67-b114-6227a4512b07" testId="55b994c7-3b1e-9039-ea64-462bb4fc1102" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldStillReportDiagnosticsWhenNotDisabled(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" computerName="fv-az1057-923" duration="00:00:53.6540948" startTime="2025-06-21T12:04:35.1675865+00:00" endTime="2025-06-21T12:05:28.6029090+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80183fa0-2241-4d67-b114-6227a4512b07" />
    <UnitTestResult executionId="2cd598f3-2b1e-4d18-9537-71f4d421e06f" testId="300b6f7d-88b1-225b-81d0-d3991ed90e9d" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:19.6881513" startTime="2025-06-21T12:04:35.6864122+00:00" endTime="2025-06-21T12:05:54.8895602+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cd598f3-2b1e-4d18-9537-71f4d421e06f" />
    <UnitTestResult executionId="92741a9d-7f6e-4778-9ac3-e03022e855a0" testId="e7b6e58c-15e2-1c1a-7ff8-56cd03fc5339" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:00:55.5298005" startTime="2025-06-21T12:04:35.1794906+00:00" endTime="2025-06-21T12:05:30.4850399+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92741a9d-7f6e-4778-9ac3-e03022e855a0" />
    <UnitTestResult executionId="f7df21ac-8e5a-4a0e-bd17-d931cf811548" testId="e396fbee-692b-f08e-9a7f-bf2b19a4e8d9" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var empty = string.Empty;&quot;)" computerName="fv-az1057-923" duration="00:01:13.9972741" startTime="2025-06-21T12:04:35.6394787+00:00" endTime="2025-06-21T12:05:49.0963645+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7df21ac-8e5a-4a0e-bd17-d931cf811548" />
    <UnitTestResult executionId="4df03416-e8dd-4f46-ad34-dd8fb1ea0e02" testId="fc9d3af8-2908-f74c-7f6d-8cc9bc3b5985" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" computerName="fv-az1057-923" duration="00:01:17.9233363" startTime="2025-06-21T12:04:35.4616447+00:00" endTime="2025-06-21T12:05:53.0675355+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4df03416-e8dd-4f46-ad34-dd8fb1ea0e02" />
    <UnitTestResult executionId="9560cad4-be18-46c2-b2c7-5fffd97b1871" testId="89a0c3eb-9a10-c13f-0420-5b95f1779695" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:16.5460468" startTime="2025-06-21T12:04:36.4764471+00:00" endTime="2025-06-21T12:05:52.1319940+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9560cad4-be18-46c2-b2c7-5fffd97b1871" />
    <UnitTestResult executionId="9ccf428e-5cae-4d19-98cc-26d6a7a3a4b3" testId="ee213223-fcdc-b8b1-8432-9d43b211917e" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:15.5151812" startTime="2025-06-21T12:04:36.5261980+00:00" endTime="2025-06-21T12:05:51.1232986+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ccf428e-5cae-4d19-98cc-26d6a7a3a4b3" />
    <UnitTestResult executionId="d05e1512-6043-4d77-955d-0f654f5f463f" testId="5424597c-7ec2-aaad-6f88-4b37ca5d175f" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" computerName="fv-az1057-923" duration="00:01:18.5564413" startTime="2025-06-21T12:04:35.8565528+00:00" endTime="2025-06-21T12:05:53.8493892+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d05e1512-6043-4d77-955d-0f654f5f463f" />
    <UnitTestResult executionId="55af70e2-4d7d-4cfb-b358-8e7e52eab659" testId="6c295b81-d7e6-a35a-5bf2-1c516a2fdc4d" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:07.1267075" startTime="2025-06-21T12:04:34.6587215+00:00" endTime="2025-06-21T12:05:41.7734665+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="55af70e2-4d7d-4cfb-b358-8e7e52eab659" />
    <UnitTestResult executionId="7a18de0c-0026-4bfb-9fdc-2db70d41c9e6" testId="df5790e1-a88f-bbbc-7b9a-5ffcb6d303d4" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" computerName="fv-az1057-923" duration="00:01:17.3232333" startTime="2025-06-21T12:04:35.8130160+00:00" endTime="2025-06-21T12:05:52.6178494+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a18de0c-0026-4bfb-9fdc-2db70d41c9e6">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1400:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Loose);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8756531f-6964-455e-8627-cdb21b6ecaa8" testId="ccf36209-8200-2735-383b-3db6b593a641" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:00.2277204" startTime="2025-06-21T12:04:36.3992085+00:00" endTime="2025-06-21T12:05:35.7473772+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8756531f-6964-455e-8627-cdb21b6ecaa8" />
    <UnitTestResult executionId="6046bc8c-29df-44bc-9ff6-5f828ffc5fac" testId="31cde91e-588b-b246-fe6d-8cc9d6699771" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:17.1160467" startTime="2025-06-21T12:04:35.9265882+00:00" endTime="2025-06-21T12:05:52.4396953+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6046bc8c-29df-44bc-9ff6-5f828ffc5fac" />
    <UnitTestResult executionId="a24756fb-66ea-4067-9365-f338424203e4" testId="b4c5b679-7faa-c3c3-1ba1-8b8a5a1cade9" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.6779252" startTime="2025-06-21T12:04:34.9772457+00:00" endTime="2025-06-21T12:05:50.5723484+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a24756fb-66ea-4067-9365-f338424203e4" />
    <UnitTestResult executionId="45e64a76-d8ae-4506-b7a4-1c3d79082999" testId="126578bb-4ab7-1175-2a1f-9d74d0a2a539" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" computerName="fv-az1057-923" duration="00:01:09.5804196" startTime="2025-06-21T12:04:35.8203585+00:00" endTime="2025-06-21T12:05:44.8413801+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45e64a76-d8ae-4506-b7a4-1c3d79082999">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculate(It.Is&lt;int&gt;(i =&gt; i &gt; 0), It.IsAny&lt;int&gt;()));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6af43031-0267-401d-bfb4-86b74df98fe2" testId="777b84e8-f4b3-1c16-8698-70f4efe7c677" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" computerName="fv-az1057-923" duration="00:01:18.7041287" startTime="2025-06-21T12:04:34.9577161+00:00" endTime="2025-06-21T12:05:53.5223516+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6af43031-0267-401d-bfb4-86b74df98fe2">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData("test"));
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="adce13e8-0ce9-47d3-abb8-7706ad37f9d4" testId="9634dabd-aa34-43a2-26b5-42029baa5bd4" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" computerName="fv-az1057-923" duration="00:01:08.0025853" startTime="2025-06-21T12:04:36.2846509+00:00" endTime="2025-06-21T12:05:43.4831472+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adce13e8-0ce9-47d3-abb8-7706ad37f9d4" />
    <UnitTestResult executionId="4feabd0c-ff25-4d9b-be5a-e91c37eb4b37" testId="ad6c889b-9776-943c-1668-7be69b8766d3" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" computerName="fv-az1057-923" duration="00:01:04.1388959" startTime="2025-06-21T12:04:36.3977998+00:00" endTime="2025-06-21T12:05:39.6583222+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4feabd0c-ff25-4d9b-be5a-e91c37eb4b37" />
    <UnitTestResult executionId="2abd3171-7f3a-4bbf-998d-fd40257423af" testId="250312ba-45f3-f2a2-5f5b-f68f1de2d467" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:13.1657203" startTime="2025-06-21T12:04:36.5316775+00:00" endTime="2025-06-21T12:05:48.7766661+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2abd3171-7f3a-4bbf-998d-fd40257423af" />
    <UnitTestResult executionId="97ae2ba5-7da5-4cef-b3e9-61c921ddac02" testId="d7b34ec8-45c1-3086-2522-8e05df1fb973" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:03.7135138" startTime="2025-06-21T12:04:36.9859434+00:00" endTime="2025-06-21T12:05:39.4821328+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97ae2ba5-7da5-4cef-b3e9-61c921ddac02">
      <Output>
        <StdOut>Original:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}

Fixed:


internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Returns(0).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="058a2daf-bb28-4828-8a5c-5f8e414afb9e" testId="fd09cb2d-5fc8-0054-5f8e-49a22f7275d5" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" computerName="fv-az1057-923" duration="00:01:16.8034000" startTime="2025-06-21T12:04:36.5913137+00:00" endTime="2025-06-21T12:05:52.3969961+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="058a2daf-bb28-4828-8a5c-5f8e414afb9e" />
    <UnitTestResult executionId="e7a2c7f4-ffd1-4f69-b016-bc8c4304a8e6" testId="bf36c91e-e6d7-e9de-8182-0e0bded6e071" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" computerName="fv-az1057-923" duration="00:01:17.8374850" startTime="2025-06-21T12:04:36.7511755+00:00" endTime="2025-06-21T12:05:53.6136753+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7a2c7f4-ffd1-4f69-b016-bc8c4304a8e6">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f1c18f0a-c334-4a5b-b07d-e5edf611dc4f" testId="97abdaf4-7a2b-91ad-459d-55604c5868c5" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" computerName="fv-az1057-923" duration="00:01:00.3060303" startTime="2025-06-21T12:04:35.9494943+00:00" endTime="2025-06-21T12:05:35.6160618+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1c18f0a-c334-4a5b-b07d-e5edf611dc4f">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), It.IsAny&lt;string&gt;(), It.IsAny&lt;DateTime&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8abad3ee-e51b-4e6b-9061-05cf329b540d" testId="6db87122-a9cd-864f-f91e-3c0be3dae264" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:19.3079373" startTime="2025-06-21T12:04:36.5920242+00:00" endTime="2025-06-21T12:05:54.8986337+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8abad3ee-e51b-4e6b-9061-05cf329b540d" />
    <UnitTestResult executionId="e7d587ed-65f4-4394-ab19-8f9ca4bc6b6c" testId="c2e76667-437c-9a72-b9a3-c3254a9737c7" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" computerName="fv-az1057-923" duration="00:00:56.9568971" startTime="2025-06-21T12:04:36.0519294+00:00" endTime="2025-06-21T12:05:32.3790054+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7d587ed-65f4-4394-ab19-8f9ca4bc6b6c" />
    <UnitTestResult executionId="d4ceb8a2-9d92-4808-89f3-551df8e0cacc" testId="03fb83bc-37f9-6279-d552-6ab92fdeaf0c" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:15.7090231" startTime="2025-06-21T12:04:35.4057302+00:00" endTime="2025-06-21T12:05:50.7820444+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4ceb8a2-9d92-4808-89f3-551df8e0cacc" />
    <UnitTestResult executionId="dd79563a-ab39-4e4a-b773-dc2d1127be20" testId="78234765-2208-fc90-af7c-2fec17072779" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" computerName="fv-az1057-923" duration="00:01:18.1519842" startTime="2025-06-21T12:04:36.5211709+00:00" endTime="2025-06-21T12:05:53.7834212+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd79563a-ab39-4e4a-b773-dc2d1127be20" />
    <UnitTestResult executionId="5caced4d-b401-45d3-bd56-b93a4c2f0b6a" testId="11a624d8-40c2-2c5b-49e0-7b9bad65ff1a" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:15.1850137" startTime="2025-06-21T12:04:35.3975880+00:00" endTime="2025-06-21T12:05:50.2318046+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5caced4d-b401-45d3-bd56-b93a4c2f0b6a" />
    <UnitTestResult executionId="e9e70bc7-bef8-4242-b156-45c62ff8e830" testId="2f10b757-974f-460f-746b-53d789f3b8b1" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" computerName="fv-az1057-923" duration="00:01:17.2797526" startTime="2025-06-21T12:04:34.9899108+00:00" endTime="2025-06-21T12:05:52.1645125+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9e70bc7-bef8-4242-b156-45c62ff8e830">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(42);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23a61c57-7b49-44ce-9bbe-ba38615b09e4" testId="be48ee49-5629-a22b-8f86-eddc1f2d7800" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" computerName="fv-az1057-923" duration="00:01:13.5253231" startTime="2025-06-21T12:04:36.6137172+00:00" endTime="2025-06-21T12:05:49.1286126+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23a61c57-7b49-44ce-9bbe-ba38615b09e4" />
    <UnitTestResult executionId="ed4efeac-2086-4e51-a488-e8366c84c86e" testId="9da1c174-f43b-ddb0-375a-8efb38762c05" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:56.1205178" startTime="2025-06-21T12:04:36.0550914+00:00" endTime="2025-06-21T12:05:31.5364657+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ed4efeac-2086-4e51-a488-e8366c84c86e" />
    <UnitTestResult executionId="0e8e8818-5106-484f-97e0-7e91bac0c809" testId="a3a67ade-d1b0-ea1e-d585-ca0adad6eb30" testName="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:10.5732546" startTime="2025-06-21T12:04:35.3923003+00:00" endTime="2025-06-21T12:05:45.6362065+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e8e8818-5106-484f-97e0-7e91bac0c809" />
    <UnitTestResult executionId="2b7acffd-14d8-48c0-8e12-665cdab5366f" testId="11683885-c8d1-86e4-4271-3a874eed182a" testName="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" computerName="fv-az1057-923" duration="00:01:09.0836813" startTime="2025-06-21T12:04:35.2594430+00:00" endTime="2025-06-21T12:05:44.0651539+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b7acffd-14d8-48c0-8e12-665cdab5366f">
      <Output>
        <StdOut>public class AsyncClient
{
    public virtual Task TaskAsync() =&gt; Task.CompletedTask;

    public virtual Task&lt;string&gt; GenericTaskAsync() =&gt; Task.FromResult(string.Empty);

    public virtual ValueTask ValueTaskAsync() =&gt; ValueTask.CompletedTask;

    public virtual ValueTask&lt;string&gt; GenericValueTaskAsync() =&gt; ValueTask.FromResult(string.Empty);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9f03f00e-db0b-439b-87ac-eca79164bf51" testId="888e452f-83e3-cfaf-47c8-1f47e1b81716" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" computerName="fv-az1057-923" duration="00:01:06.1754947" startTime="2025-06-21T12:04:34.7974872+00:00" endTime="2025-06-21T12:05:40.9330554+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f03f00e-db0b-439b-87ac-eca79164bf51">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba815c04-75c8-48b9-a60d-0f75e5c2a5d4" testId="f40faa33-4f1c-999e-1669-fecd9e09aecf" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" computerName="fv-az1057-923" duration="00:01:18.0839500" startTime="2025-06-21T12:04:35.7975235+00:00" endTime="2025-06-21T12:05:53.3308763+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba815c04-75c8-48b9-a60d-0f75e5c2a5d4">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    bool Do(CustomType custom);
}

public class CustomType
{
    public int Value { get; }

    public CustomType(int value)
    {
        Value = value;
    }

    // User-defined conversions
    public static implicit operator CustomType(int value)
    {
        return new CustomType(value);
    }

    public static explicit operator CustomType(string str)
    {
        return new CustomType(int.Parse(str));
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomType&gt;())).Returns((CustomType i) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="239fee0d-8260-4645-b065-e793164f714e" testId="c1c9e2ed-4d98-7cda-df33-7853e7f7d7a4" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:02.2150585" startTime="2025-06-21T12:04:35.6492753+00:00" endTime="2025-06-21T12:05:37.3790885+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="239fee0d-8260-4645-b065-e793164f714e" />
    <UnitTestResult executionId="61c3f9ae-911d-42f4-a828-e9aa9ce43200" testId="d4ab68b4-f595-9b30-4644-cabe72a3b81f" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" computerName="fv-az1057-923" duration="00:01:12.2854654" startTime="2025-06-21T12:04:36.3698106+00:00" endTime="2025-06-21T12:05:47.8010105+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61c3f9ae-911d-42f4-a828-e9aa9ce43200" />
    <UnitTestResult executionId="da6ca738-ab04-4cfc-8ece-4a455adf691e" testId="43f30db5-69ce-d3f2-2dc7-8aad3616194d" testName="Moq.Analyzers.Test.PackageTests.Baseline" computerName="fv-az1057-923" duration="00:00:00.3072139" startTime="2025-06-21T12:04:35.4546235+00:00" endTime="2025-06-21T12:04:36.0318384+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da6ca738-ab04-4cfc-8ece-4a455adf691e" />
    <UnitTestResult executionId="06e12981-caa1-437d-abd5-d3d4a79cddf4" testId="c0f262c5-84b5-bddd-9a98-401d8f1083ee" testName="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" computerName="fv-az1057-923" duration="00:01:04.4000327" startTime="2025-06-21T12:04:35.0634781+00:00" endTime="2025-06-21T12:05:39.2634617+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06e12981-caa1-437d-abd5-d3d4a79cddf4" />
    <UnitTestResult executionId="3a6174a1-5206-481b-9d7d-ea9416b85bf9" testId="26038d57-9521-14e0-ebcf-97dd2aab2171" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" computerName="fv-az1057-923" duration="00:01:16.5797763" startTime="2025-06-21T12:04:36.5629310+00:00" endTime="2025-06-21T12:05:52.1969264+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a6174a1-5206-481b-9d7d-ea9416b85bf9" />
    <UnitTestResult executionId="44e33f3e-ee08-446b-bd08-32c29b55a319" testId="2e8c7c19-66cf-4c6d-6e92-70484a19cafa" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:13.3280041" startTime="2025-06-21T12:04:36.7619214+00:00" endTime="2025-06-21T12:05:49.0337115+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44e33f3e-ee08-446b-bd08-32c29b55a319">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(() =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f122a26-7a4a-41ac-8b2c-781f6b99b033" testId="fbe61e14-6dfc-decb-68e0-f3b192f02ab7" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" computerName="fv-az1057-923" duration="00:01:08.8554066" startTime="2025-06-21T12:04:34.9720692+00:00" endTime="2025-06-21T12:05:43.6959702+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f122a26-7a4a-41ac-8b2c-781f6b99b033">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5b997ba6-e8e6-45d7-be4e-eb04f4331853" testId="fc245d61-ccc2-75c8-6aab-781cbb782942" testName="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" computerName="fv-az1057-923" duration="00:01:11.8641668" startTime="2025-06-21T12:04:35.7718887+00:00" endTime="2025-06-21T12:05:47.1059419+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b997ba6-e8e6-45d7-be4e-eb04f4331853" />
    <UnitTestResult executionId="dfbd20f6-31ca-4cf1-b376-ee446502e39b" testId="7ef5f66e-60cc-befb-714f-f3550c6ef073" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" computerName="fv-az1057-923" duration="00:00:59.2474024" startTime="2025-06-21T12:04:35.3639027+00:00" endTime="2025-06-21T12:05:34.2620174+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dfbd20f6-31ca-4cf1-b376-ee446502e39b" />
    <UnitTestResult executionId="02da1142-6833-4799-86a2-ac3705c988f5" testId="d08d558c-a212-2a90-2292-bc68910c0d09" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" computerName="fv-az1057-923" duration="00:01:07.5628151" startTime="2025-06-21T12:04:34.8859716+00:00" endTime="2025-06-21T12:05:42.3320873+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02da1142-6833-4799-86a2-ac3705c988f5">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e70a4074-b8f2-4874-83e6-0a9317947887" testId="11ac459e-df7a-8ab7-d1b6-529e445539ef" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:15.9441784" startTime="2025-06-21T12:04:34.6698157+00:00" endTime="2025-06-21T12:05:50.6239965+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e70a4074-b8f2-4874-83e6-0a9317947887" />
    <UnitTestResult executionId="ac1c3aad-d49c-4000-9cdd-38a5272e24f4" testId="42f415c2-fb88-e0b2-a114-dc50695b4b3d" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:03.3044640" startTime="2025-06-21T12:04:35.1491190+00:00" endTime="2025-06-21T12:05:38.2369123+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac1c3aad-d49c-4000-9cdd-38a5272e24f4" />
    <UnitTestResult executionId="71441743-407c-4657-abb8-e0a120ba55b0" testId="79af3be7-0f7b-bed8-5e2c-fe55183debfa" testName="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.ProcessR&quot;···)" computerName="fv-az1057-923" duration="00:01:01.6862311" startTime="2025-06-21T12:04:37.0425395+00:00" endTime="2025-06-21T12:05:37.4002516+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71441743-407c-4657-abb8-e0a120ba55b0">
      <Output>
        <StdOut>namespace MyNamespace;

public interface ISampleInterface
{
    int Calculate(int a, int b);
    int TestProperty { get; set; }
    string GetString(string input);
    bool ProcessRef(ref int value);
}

public interface IAsyncMethods
{
    Task DoSomethingAsync();
    Task&lt;bool&gt; GetBooleanAsync();
}

public interface IValueTaskMethods
{
    ValueTask DoSomethingValueTask();
    ValueTask&lt;int&gt; GetNumberAsync();
}

public interface IIndexerInterface { int this[int i] { get; set; } }
public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.ProcessRef(ref It.Ref&lt;int&gt;.IsAny)).Returns(true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3a2901d7-b0d0-457d-9743-cbe3e003c597" testId="35602ef6-e4d0-391d-8aa4-fbb44b3b8639" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" computerName="fv-az1057-923" duration="00:01:19.3941931" startTime="2025-06-21T12:04:36.4177102+00:00" endTime="2025-06-21T12:05:54.9426005+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a2901d7-b0d0-457d-9743-cbe3e003c597" />
    <UnitTestResult executionId="c1ef6fd5-c126-4cd7-9f4c-9ffc26cf97ce" testId="32fcf582-ebdf-c618-5ed1-cbd1e48622db" testName="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:16.5844956" startTime="2025-06-21T12:04:35.6547372+00:00" endTime="2025-06-21T12:05:51.7075057+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1ef6fd5-c126-4cd7-9f4c-9ffc26cf97ce" />
    <UnitTestResult executionId="b6f6270c-21d8-4180-b612-2cc6ab3626d0" testId="99dc1c0f-17e2-1ca5-4ed6-b7a153d0a941" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:11.5494233" startTime="2025-06-21T12:04:36.4833078+00:00" endTime="2025-06-21T12:05:47.1183986+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6f6270c-21d8-4180-b612-2cc6ab3626d0" />
    <UnitTestResult executionId="e719f5d2-6368-489b-b7e9-5a33fea1fd18" testId="96c58096-7f90-45cd-955c-5a4016af87d1" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" computerName="fv-az1057-923" duration="00:01:12.3752669" startTime="2025-06-21T12:04:36.7652888+00:00" endTime="2025-06-21T12:05:48.0560171+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e719f5d2-6368-489b-b7e9-5a33fea1fd18">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;())).Returns((object? bar) =&gt; true);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="615ccc82-79ce-43a3-a48a-a66977911464" testId="29a48a57-be1f-e2ad-397a-3bfa1b99967f" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:03.5917001" startTime="2025-06-21T12:04:34.4326640+00:00" endTime="2025-06-21T12:05:38.0083092+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="615ccc82-79ce-43a3-a48a-a66977911464" />
    <UnitTestResult executionId="6bd8769c-e0e5-434b-9c18-936ec94a33e1" testId="20b776ac-3ff6-e2bd-5fc7-a83bcd0d4ce3" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:14.9862696" startTime="2025-06-21T12:04:34.9991823+00:00" endTime="2025-06-21T12:05:49.8369802+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6bd8769c-e0e5-434b-9c18-936ec94a33e1">
      <Output>
        <StdOut>public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ee6cae0-2c44-4d2f-913a-059d82cdcb72" testId="cd5fa932-47fc-9b32-c71a-3f85f65cf1b8" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" computerName="fv-az1057-923" duration="00:01:06.8609355" startTime="2025-06-21T12:04:37.0246069+00:00" endTime="2025-06-21T12:05:42.5623073+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ee6cae0-2c44-4d2f-913a-059d82cdcb72" />
    <UnitTestResult executionId="40c6b3f8-1112-4c78-bd82-a09a64cea5eb" testId="77ed5d95-e058-ad31-03b1-f136a6c88417" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" computerName="fv-az1057-923" duration="00:00:52.2511380" startTime="2025-06-21T12:04:36.2736220+00:00" endTime="2025-06-21T12:05:27.7123568+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40c6b3f8-1112-4c78-bd82-a09a64cea5eb" />
    <UnitTestResult executionId="e921f26c-08fc-4ab4-954a-51e5395b60ee" testId="38f13c2a-e4a2-8c72-6bdd-315d00112cba" testName="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" computerName="fv-az1057-923" duration="00:01:13.0325157" startTime="2025-06-21T12:04:35.8047186+00:00" endTime="2025-06-21T12:05:48.3163469+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e921f26c-08fc-4ab4-954a-51e5395b60ee" />
    <UnitTestResult executionId="da369896-46b4-4f36-81f2-2587aef3e28a" testId="ff3fa527-2d6f-2ce7-35e0-9d4b9d426c21" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" computerName="fv-az1057-923" duration="00:01:10.1186712" startTime="2025-06-21T12:04:34.7808454+00:00" endTime="2025-06-21T12:05:44.8407603+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da369896-46b4-4f36-81f2-2587aef3e28a">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8306fcbd-e63c-47da-8791-6fde9ed723f5" testId="0e7b1c85-a438-b5fa-f42c-27c703c66b21" testName="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" computerName="fv-az1057-923" duration="00:01:04.7925749" startTime="2025-06-21T12:04:35.8775144+00:00" endTime="2025-06-21T12:05:40.0911982+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8306fcbd-e63c-47da-8791-6fde9ed723f5">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}

Fixed:
namespace MyNamespace;

public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fed5434e-7db4-4e28-8d7b-db6b6837c918" testId="7d720a71-0e27-2b73-7c8c-964981e5abdc" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" computerName="fv-az1057-923" duration="00:01:05.3224563" startTime="2025-06-21T12:04:34.9561929+00:00" endTime="2025-06-21T12:05:40.2092164+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fed5434e-7db4-4e28-8d7b-db6b6837c918">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Returns(10);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d684cfef-2fe0-4fd0-9635-40032ba230c7" testId="c79b0bc9-b69b-cac8-6984-85d6934f4db1" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" computerName="fv-az1057-923" duration="00:01:18.9169572" startTime="2025-06-21T12:04:36.3787966+00:00" endTime="2025-06-21T12:05:54.4329953+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d684cfef-2fe0-4fd0-9635-40032ba230c7" />
    <UnitTestResult executionId="dd4c2ece-6f47-4767-ac1c-1af27ffc3add" testId="04f49772-32a1-488e-69c6-a255cc955d76" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:11.1477837" startTime="2025-06-21T12:04:35.9535116+00:00" endTime="2025-06-21T12:05:46.4689647+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd4c2ece-6f47-4767-ac1c-1af27ffc3add">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        Mock.Of&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1e739da3-5652-456a-9274-b08d2d5a6940" testId="d903eb4a-efed-e801-a971-e1d2446a5d24" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" computerName="fv-az1057-923" duration="00:01:04.7670402" startTime="2025-06-21T12:04:34.9876586+00:00" endTime="2025-06-21T12:05:39.6283982+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1e739da3-5652-456a-9274-b08d2d5a6940">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Returns(10);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4fe22306-01cf-49a8-b2d3-46454ad7e228" testId="de191661-dee2-fb26-a3cd-a19e869a3d1a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" computerName="fv-az1057-923" duration="00:01:14.5448206" startTime="2025-06-21T12:04:36.5982433+00:00" endTime="2025-06-21T12:05:50.1450320+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4fe22306-01cf-49a8-b2d3-46454ad7e228" />
    <UnitTestResult executionId="7f64e3f0-20f8-407f-af4c-dab0be1bd3f0" testId="8754ba35-c888-46be-6e6d-ecfd0b9884af" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" computerName="fv-az1057-923" duration="00:01:19.4740779" startTime="2025-06-21T12:04:34.7059044+00:00" endTime="2025-06-21T12:05:54.2721572+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f64e3f0-20f8-407f-af4c-dab0be1bd3f0">
      <Output>
        <StdOut>public interface ISampleInterface
{
    int Calculate(int a, int b);
    string TestProperty { get; set; }
}

public class SampleClassWithVirtualIndexer { public virtual int this[int i] { get =&gt; 0; set { } } }
public class SampleClassWithNonVirtualIndexer { public int this[int i] { get =&gt; 0; set { } } }
public interface IExplicitInterface { void ExplicitMethod(); }
public class SampleClassWithStaticMembers { public static int StaticField; public const int ConstField = 42; public static readonly int ReadonlyField = 42; public static void StaticMethod() { } }

public abstract class BaseSampleClass
{
    public int Calculate() =&gt; 0;
    public abstract int Calculate(int a, int b);
    public abstract int Calculate(int a, int b, int c);
}

public class SampleClass : BaseSampleClass
{
    public override int Calculate(int a, int b) =&gt; 0;
    public sealed override int Calculate(int a, int b, int c) =&gt; 0;
    public virtual int DoSth() =&gt; 0;
    public int Property { get; set; }
    public int Field;
    public event EventHandler? TestEvent;
}

public class SampleClassWithVirtualEvent
{
    public virtual event EventHandler? TestEvent;
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculate())|};
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="13a9ed3c-dab1-41b2-97fc-6127317fa1db" testId="9a01244b-6f15-7249-8ea9-1f58189bbfc1" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" computerName="fv-az1057-923" duration="00:01:06.1072812" startTime="2025-06-21T12:04:34.9429560+00:00" endTime="2025-06-21T12:05:40.9334437+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="13a9ed3c-dab1-41b2-97fc-6127317fa1db" />
    <UnitTestResult executionId="c54bea22-335b-4ee8-ae56-9fcbb79a29c9" testId="bc22d645-fc4d-65a9-5ca9-76f653186480" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" computerName="fv-az1057-923" duration="00:01:11.1322372" startTime="2025-06-21T12:04:36.6892656+00:00" endTime="2025-06-21T12:05:46.7936806+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c54bea22-335b-4ee8-ae56-9fcbb79a29c9">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback(({|Moq1100:int i|}) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;string&gt;&gt;())).Callback((List&lt;string&gt; l) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8c2c2a67-47c2-4273-96b8-39efccd10e29" testId="0384bf74-fb70-1a04-825c-8ada86fe45c0" testName="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" computerName="fv-az1057-923" duration="00:01:07.9340254" startTime="2025-06-21T12:04:37.0222728+00:00" endTime="2025-06-21T12:05:43.6659411+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c2c2a67-47c2-4273-96b8-39efccd10e29" />
    <UnitTestResult executionId="47a84580-6b5d-4d10-8e87-2ba5128a4992" testId="c35b6a80-5b79-3795-55d8-38760e60134b" testName="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" computerName="fv-az1057-923" duration="00:01:01.7033006" startTime="2025-06-21T12:04:35.8784958+00:00" endTime="2025-06-21T12:05:37.0014339+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47a84580-6b5d-4d10-8e87-2ba5128a4992">
      <Output>
        <StdOut>Original:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        {|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|};
    }
}

Fixed:


public interface ISample
{
    int Calculate(int a, int b);
}

public class Calculator
{
    public int Calculate(int a, int b)
    {
        return a + b;
    }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;ISample&gt;(MockBehavior.Strict);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bcb71ebd-9d48-4b47-8ddf-b396e720fc24" testId="3040cf7c-bb69-fd13-8105-bbc9f0f23c8b" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" computerName="fv-az1057-923" duration="00:01:18.2093059" startTime="2025-06-21T12:04:34.9362122+00:00" endTime="2025-06-21T12:05:53.0540069+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bcb71ebd-9d48-4b47-8ddf-b396e720fc24" />
    <UnitTestResult executionId="bc5aa36e-5f82-403b-bb82-f78cf3cd2e12" testId="39fd0507-c746-df7c-78eb-33264ba539a9" testName="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" computerName="fv-az1057-923" duration="00:01:10.0500144" startTime="2025-06-21T12:04:34.5457517+00:00" endTime="2025-06-21T12:05:44.6070689+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc5aa36e-5f82-403b-bb82-f78cf3cd2e12" />
    <UnitTestResult executionId="447bf74f-cf6a-4473-a780-3a49bed1a92d" testId="147cd71f-78bb-606a-8591-71dbfcfd57f6" testName="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" computerName="fv-az1057-923" duration="00:01:07.6943756" startTime="2025-06-21T12:04:34.9540932+00:00" endTime="2025-06-21T12:05:42.5148973+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="447bf74f-cf6a-4473-a780-3a49bed1a92d" />
    <UnitTestResult executionId="0c8ad374-10b2-45df-9a98-464fb3b858b8" testId="6ea5300a-4156-6fef-dfc8-63fed6467f4a" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;IFoo foo;&quot;)" computerName="fv-az1057-923" duration="00:00:59.7678054" startTime="2025-06-21T12:04:36.6121174+00:00" endTime="2025-06-21T12:05:35.4519750+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c8ad374-10b2-45df-9a98-464fb3b858b8" />
    <UnitTestResult executionId="9b82acf3-2fc2-4bd1-987f-315ddeded89c" testId="9b602c84-6781-2c9a-c057-da49a13c681c" testName="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" computerName="fv-az1057-923" duration="00:01:06.8045494" startTime="2025-06-21T12:04:35.0200258+00:00" endTime="2025-06-21T12:05:41.6893151+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b82acf3-2fc2-4bd1-987f-315ddeded89c">
      <Output>
        <StdOut>namespace MyNamespace;

public interface IFoo
{
    bool DoSomething(string value);
    int GetValue();
    int Calculate(int a, int b);
    void DoVoidMethod();
    void ProcessData(string data);
    string Name { get; set; }
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);
    }
}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8a3138e3-9ef7-4712-bc73-e78eb4ea495e" testId="35211655-17d0-9d3a-3ade-ad677bc93d8b" testName="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" computerName="fv-az1057-923" duration="00:01:14.2214471" startTime="2025-06-21T12:04:36.4711538+00:00" endTime="2025-06-21T12:05:49.7940356+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a3138e3-9ef7-4712-bc73-e78eb4ea495e" />
    <UnitTestResult executionId="297bf20b-d1de-47f6-807c-7680cebeef55" testId="6de4a39c-01e0-aff0-18dd-2182fe339299" testName="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" computerName="fv-az1057-923" duration="00:01:07.3426858" startTime="2025-06-21T12:04:36.9375379+00:00" endTime="2025-06-21T12:05:43.0332838+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="297bf20b-d1de-47f6-807c-7680cebeef55">
      <Output>
        <StdOut>Original:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}

Fixed:
namespace MyNamespace;

internal interface IFoo
{
    int Do(string s);

    int Do(int i, string s, DateTime dt);

    int Do(List&lt;string&gt; l);

    bool Do(object? bar);

    bool Do(long bar);
}

internal class UnitTest
{
    private void Test()
    {
        new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;())).Returns(0).Callback((string s) =&gt; { });
    }
}</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="29c3f391-2a52-0477-1eac-9f7a3fe85ff8">
      <Execution id="2016ca71-31c2-4883-b155-25b875ce2ebc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9d0e94d6-ccac-0a2c-2a35-ede8fcd4dc4e">
      <Execution id="36c5da48-db42-4ab2-914f-6a24a5020b43" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifySet(x =&gt; { x.Te&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2cb9e03b-1235-b522-f94b-0eb8b3870c50">
      <Execution id="5cd4e470-8df8-467b-ac4b-4b041c7ea4d1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualIndexer&gt;().Setup(x &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="934de335-af0b-f8f9-34f3-1bbbf28a39f6">
      <Execution id="b11cfb48-85fc-4497-94aa-2121db17f966" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e7b6e58c-15e2-1c1a-7ff8-56cd03fc5339">
      <Execution id="92741a9d-7f6e-4778-9ac3-e03022e855a0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0dd03c53-0257-6c3a-adff-09e4926276e6">
      <Execution id="9780872f-924f-4cc9-aecd-8879c5a159f4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2bb4c712-393c-1e49-862d-e2fe7584d47e">
      <Execution id="3bfdb27d-2b43-4e2e-a1f1-c6825d6709ec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForSealedMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="15600f89-daa0-8169-3c9a-b66c0bbba3b2">
      <Execution id="5dfaba9f-23f9-4086-a769-be43a224215d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c59b7e20-30f2-b4a5-e6ba-cfba888c7b5f">
      <Execution id="50d19067-a7fa-457e-ba1f-944a49fa859e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8c83830c-a6e1-edd1-dc18-eba69e6e4288">
      <Execution id="f50ec3f6-9321-4b9b-bee2-357888ee8322" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1a3e159f-fbd3-7c7a-7995-3562f823fe92">
      <Execution id="a96c59be-4d55-4297-a273-ece74f17399e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="36144847-de01-fe86-9acd-4f60bdf76449">
      <Execution id="6ef88122-a713-4e9c-8f0f-629d1b829196" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dd904112-f904-45ec-a7db-9620c4e6ad76">
      <Execution id="6a3fdf37-9544-4290-ac90-4f298f586d82" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="68d39d5f-5e26-6b1e-7704-2d52b2eaad56">
      <Execution id="41955feb-7905-446c-8d07-073fabf2f7af" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0ac75799-5490-9ceb-b321-0523c127bb97">
      <Execution id="fbb79d05-c55a-461a-9958-3ccdca345d02" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eedba9d4-13c8-dcd6-e7ec-d14516b826d8">
      <Execution id="9bccd81b-f2db-40e5-b71c-d0e0c79a967c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0e7b1c85-a438-b5fa-f42c-27c703c66b21">
      <Execution id="8306fcbd-e63c-47da-8791-6fde9ed723f5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1f3814de-7df6-32a2-b09f-3f28f231eed5">
      <Execution id="d285daec-9b83-49c8-b9b3-eff1fb9c0cfb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="705426a7-09bf-198a-a28f-796041c4f2e7">
      <Execution id="0d202966-c65b-4d5a-8cb0-f8b6d21e5ca1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bc1d9eb4-7516-3caa-e2b5-c889b4b7c1f2">
      <Execution id="8e0d4855-1bab-49bb-aef5-3f44125fb39a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9b6aa232-0b8b-5cbb-0191-0cf613d6bd08">
      <Execution id="460cd7d5-32e5-4766-adbf-1a0db6218ad0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0e9b2bb0-71b8-5a2f-1eee-b35afd47c369">
      <Execution id="263c1c6d-090d-4d00-bec2-51e46d715363" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="60c76dc5-4c4e-b32f-b77c-7d308c2dfc19">
      <Execution id="27e7c5d3-f63c-4431-9a19-c6c98bd44e81" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupAdd(x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="08760bcf-ac39-003b-493a-cf86239aa54f">
      <Execution id="61a9dca1-bc25-48c2-b55f-ffbe845436eb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fa270a5f-fb21-ef34-9da0-36673bfe6174">
      <Execution id="fa4ff922-f0e0-45f4-b58d-b7491ac0e884" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f1fded68-0c10-6600-47db-05f80f0574b3">
      <Execution id="ebb40c91-8e66-4109-9ebe-1564882365f9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7a34b5f8-197b-1f92-2ef2-6d6d19047ce5">
      <Execution id="f5695bd4-0603-4cb7-b946-5b5fbcffe56c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="478427fa-8669-c6b5-9fa7-131a94eeb6c4">
      <Execution id="91b8b3ff-8f7b-429f-a72b-d33f43f2448e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.De&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="773ca150-1c99-8d35-2db0-31dcd92e2928">
      <Execution id="8f5d510e-d35c-4185-83fe-0210b8cd5ef8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a0596946-a296-ebb8-d566-7d0a00f3cfb4">
      <Execution id="e9373eab-3652-4eaa-899c-a0bbe13d489d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0a9f1c10-6d86-8ab0-8af2-457318cb73a7">
      <Execution id="6f59ead2-df98-40e2-a8fd-5688398094df" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6390bfb3-5ac1-f269-5941-31667a25464d">
      <Execution id="cf691ed4-c280-45ab-9861-a29613dc2b0f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cf8e3931-af37-2b1e-2602-85f7f872e277">
      <Execution id="128e259e-d552-4bb7-87fa-af3208292666" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e6ad22b3-3797-657d-5dc3-fa2762249d95">
      <Execution id="eb03a9c0-6449-4ea9-8691-00973833ff8d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1a6f65da-3ffd-4b9d-8485-0ed56964c473">
      <Execution id="b8ff1014-aecd-43bd-bbf9-4938d3a0569f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="edba1135-a0fa-d876-9c47-5c21a52e050d">
      <Execution id="0be87cc9-980a-47ab-a154-1ce5f6f29353" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0b0d90a3-f911-727b-bb6c-a616ca206b70">
      <Execution id="8394525f-876d-4791-9a1e-f2138d3aaae7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d98f073a-7ce5-6eb5-1be5-e8ea3ab7064b">
      <Execution id="b7268402-cead-42d5-a4f4-e7773f4a7c55" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="94a2244e-0d93-7a16-40c4-6c97edda2257">
      <Execution id="bd2b5433-43bf-4121-9bee-e33cdebefce8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5ccc639c-11db-1192-d7fc-e993da646164">
      <Execution id="a1568ee2-22d1-42c3-ae66-4d26ab70c349" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="954e8a58-6ead-1a00-543e-e75ea0a5366b">
      <Execution id="f4ca87e9-5069-4aa8-9f86-c2845120b3ec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="23ff765c-b052-d07e-f9a8-f34280cbe091">
      <Execution id="2fdb3d84-a392-4e5a-941c-5d032ce1b66e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bbc9dc68-3c7f-9b64-1af2-2681c279c7da">
      <Execution id="91443d46-2dcd-4322-8c41-f42fee87d03a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ef08cb55-e83f-1917-bacc-6b6746703c6f">
      <Execution id="ccccb33b-1a33-4866-b400-fbbbc10a4bc9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="28e086ea-2ba7-13cc-c33c-ecc9a6a067ed">
      <Execution id="a6e9c1a2-302b-4d25-8cc2-c870848e2534" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="54ef1e08-2b27-41bc-0b50-e7dd8faf6218">
      <Execution id="10b8811f-7277-4623-b007-cbb67d4c8e86" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a7864f3d-d148-bd6b-3614-c86b23f24958">
      <Execution id="8678fa57-3c58-4dcf-bf37-9741dbfe656d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var empty = string.Empty;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="04bc0b3e-290c-e8c6-08a9-2ea12bb1b1db">
      <Execution id="1e9c85dc-83b1-4749-a874-713eec5c4e6f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleErrorConditionsGracefully" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7e43f699-be4d-f805-34fa-0105a79e0a78">
      <Execution id="d127ce1a-1679-458b-881e-dc245c28cd18" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleErrorConditionsGracefully" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eff62265-3e4d-fd10-e259-adfcdb0a7852">
      <Execution id="220c9723-f3ab-4752-a60b-414b1b8f9a5f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="69fb1b2d-2706-0896-e620-e99330f6f0f1">
      <Execution id="05f73e4b-e3da-4c27-b161-39b8463dc564" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0b1fb93a-347e-43ca-1df2-4b4f1e6902b4">
      <Execution id="f5efcaeb-2919-4ce9-9c2c-836925d2eca3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9e96b658-7822-a4c7-f2fe-269b62959fe0">
      <Execution id="2ff14648-08b9-4661-b854-1000cd34f907" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0c9c7536-30aa-8708-79c3-4cbd914c2af7">
      <Execution id="569ffbd4-f89e-499a-999c-e180d6ffa3d6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5c04f593-7e16-5bce-f4d1-92f913acf854">
      <Execution id="d0985af4-09f8-4c95-866d-b24abdcfed22" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="18a7724e-1d27-ff07-fe96-877f46b00d6b">
      <Execution id="b56f2d12-7170-457f-8cb5-6fd198d6507f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock2 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(\&quot;2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="935b8322-5ce0-4ab6-1dd6-3ee36f69e354">
      <Execution id="59eb4374-bbc4-4acf-b028-aa63b8b8498d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldFailIsRealMoqIsUsedWithInvalidParameters" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c17d2ae2-01c0-322e-f39b-5687ad1e5caf">
      <Execution id="fec40ae5-d9a5-4c44-a6c3-446778f1898e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c9de4501-162f-abe6-8c93-0fdb68ccf3d3">
      <Execution id="61614085-57ba-4c71-aa79-58043a95f6bb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f0bad7e1-ea2f-6014-0166-ebb22c995597">
      <Execution id="52c76772-248d-441f-aaf4-e354ae180965" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="521c0c90-839b-7300-1957-c8c11f94eed6">
      <Execution id="c5e7bd67-1869-4f81-9c9e-c13905682d18" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="51d13575-9bc8-115a-e490-9d5eba1bc218">
      <Execution id="22d40885-3d01-49fc-969d-f2a87d8ecac9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="243530d0-146c-c89f-0fd0-612f6c13a9cc">
      <Execution id="7a519d32-605f-4686-ac62-7cd320bb432d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ThrowsArgumentNullException_WhenPredicateIsNull" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bf5377ba-e86a-2980-2249-3dfac08904d0">
      <Execution id="6de96658-d164-4b54-84c4-bc1382614a85" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArray_ThrowsArgumentNullException_WhenPredicateIsNull" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ad6c889b-9776-943c-1668-7be69b8766d3">
      <Execution id="4feabd0c-ff25-4d9b-be5a-e91c37eb4b37" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b30bd7c0-056b-404c-ca86-6df314217d41">
      <Execution id="0d6cdff2-a89b-442b-8422-ac603726e689" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ab1072a1-b0ea-1679-9e3f-0b1dbda50c52">
      <Execution id="956d78ea-7105-4340-8aec-35572febfe5c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="738e3811-8bf4-17da-c2d7-5b3cc6dbde1c">
      <Execution id="8a57ede6-a0c6-4e52-8e6e-47403b6f4cc2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9467ac43-e3e1-879b-f5e5-0013b3269997">
      <Execution id="53fb387e-2a25-492b-933c-bc96b2ffaf7a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cce9ab88-2092-a6b7-1940-cae712184a14">
      <Execution id="686205bf-e381-4881-a769-ae87a7bee179" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e155a156-9f0d-933b-bb24-c33abf38350d">
      <Execution id="50aeb4a0-5fd6-4c37-b279-311a61389de3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4e695683-2469-5cda-a5a6-c08b18f33756">
      <Execution id="cb1a47de-5c1d-4af0-bb63-923431d6aa81" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9c4a0fdc-ad83-d9b1-fe6d-92188cc6329a">
      <Execution id="0284b30b-f81c-4e6c-990e-2341b2f5c666" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a9b431dc-fcb8-667a-a2b2-1332f8570507">
      <Execution id="5f4e2db1-ad8d-4b9a-85d4-15ecd8a56066" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6fc3c939-0942-b865-13b7-c3272029f90f">
      <Execution id="6617e88f-a523-45c7-8896-f94d63c2d637" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="537eb5d2-a824-975a-0613-0c1354039157">
      <Execution id="de28c771-cb69-4db0-9b0f-63f4a8130bb5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7039b170-2191-0406-0300-d7750e9c4590">
      <Execution id="1b2df612-6dd6-49a5-87f5-9da60b881469" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7478ed45-5a19-6ec5-7735-8eb45c89609b">
      <Execution id="dde7eb3a-05f0-4223-b49e-04e6b74f8324" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eaf13974-cd79-25d1-0272-3c52d906a5a5">
      <Execution id="2246f57a-1705-4948-897a-6852d2fd5145" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4f37d230-6296-612d-363f-3ba2d6785e2d">
      <Execution id="0f64e056-8eaf-4a08-80a0-bc3beaa3126e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var empty = string.Empty;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e396fbee-692b-f08e-9a7f-bf2b19a4e8d9">
      <Execution id="f7df21ac-8e5a-4a0e-bd17-d931cf811548" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="14335f76-3166-4157-be6d-2e5e154aeda9">
      <Execution id="082c4505-4252-48dc-8f5e-d3d58a439bff" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="86490483-c0d7-77ee-fc2e-d47db6335368">
      <Execution id="45c21b57-b16d-4833-9e9f-e13d997598b4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.StringEvent += It.IsA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="672e5d9a-928f-d4c6-4f90-d5b7c4016a65">
      <Execution id="e065c29f-7565-4e5c-b985-e6f03cebd56c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5ff9ccd3-9878-878c-127c-5b124e6c4917">
      <Execution id="954579a7-41f7-4d79-a442-90586953aa6c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8b0cd8a3-e242-d4f2-01dd-506b84c1c3d0">
      <Execution id="586252c6-eb10-4d1c-a1ce-282a78f54133" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ba9a1d4c-decb-ceef-7cff-54b211b2f02d">
      <Execution id="9ca293d5-216b-4420-b680-324e0ebc41af" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e8a756cd-a0d2-097e-b24d-f2afca7f0464">
      <Execution id="e9d41399-9b13-4da7-a0bd-bcd85963693b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7572e84c-2248-269c-96d6-9efc266eba19">
      <Execution id="0142afe2-0736-4749-8d40-c27c646e0695" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldNotReportSealedClassDiagnosticsWhenDisabledViaConfiguration" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0533875d-6218-8dde-0fb3-b39e309c901d">
      <Execution id="bf2d8d22-fb17-4dda-98d9-c27aeb1884f6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4d843ccb-d8cc-0944-e532-07d92d55b73e">
      <Execution id="a2ce2299-cd87-45f2-b14d-a82caa2a03da" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5e4863fe-9252-0cf0-55e9-20754ffe72a8">
      <Execution id="acb07154-a7cc-441a-84d5-971e6c2c6af4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="94860150-aab6-61ad-d5cd-3e85a63faae8">
      <Execution id="7d52c069-f5a1-4985-9834-dc8da5914857" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4a20db08-04d8-9527-6c96-f14befcf5229">
      <Execution id="8857ff96-6c6f-4ad6-b137-3f1e46262212" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="413e882f-5f73-1a57-373e-d30702772893">
      <Execution id="7eccb73d-0245-40fc-b459-57e80882889d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8a83f806-8f22-ae83-a082-590827d93218">
      <Execution id="4806c07c-7683-40a4-b100-6a38cac9c9b0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="765d9c59-0796-beb6-082d-70599b9ef0b5">
      <Execution id="0957ac9a-9b62-4886-a2ad-496c906f0a38" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditTypeInvalid" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff912f26-8dca-21ed-7f82-078a7352816b">
      <Execution id="e630fced-1ed5-4a14-a0a8-6ce7fe2d470f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests" name="TryGetFromImmutableDictionary_Fails_WhenEditTypeInvalid" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ProtectedMemberBasicPatternsAnalyzerTests.ShouldNotReportDiagnosticsForBasicProtectedPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;CommandBase&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="93e483d1-0d13-c3ee-52d7-ac1ddcc4beb8">
      <Execution id="59c03f61-f5b7-4903-a642-9510a2550ed6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ProtectedMemberBasicPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForBasicProtectedPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="64165e3e-af5f-9646-b3af-821bd2e587fc">
      <Execution id="e488a8c1-e887-4e29-8213-279017aded2d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2331914b-afe4-d381-35da-c0138ba1ac3b">
      <Execution id="8c02b249-6846-4667-91e4-b13be3a91daf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f836cea3-54d1-7216-3ab5-2afed32c432a">
      <Execution id="c1bc51a4-db95-4156-a0a2-0bc2b1e23c2b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd8ce32f-f88c-e8c4-f71c-d67c3aa116d3">
      <Execution id="00a83ca0-88dc-41aa-a73a-741ca9952570" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="751da9bb-c7b8-9b19-0299-16512cdbfb9e">
      <Execution id="579d8844-e52a-4e6f-88ee-0d2a4f7fa5a0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="18152db1-5233-250f-08aa-23f8de301626">
      <Execution id="16fc437b-6c60-4d19-b807-3dad53d3aef5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c1c9e2ed-4d98-7cda-df33-7853e7f7d7a4">
      <Execution id="239fee0d-8260-4645-b065-e793164f714e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b7f744e2-4460-5a29-41eb-317872412275">
      <Execution id="dc5f0490-6bc7-4b55-8cc8-525c2ca26331" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="119c0cf8-29af-95cc-fde9-a0c838229e36">
      <Execution id="ab627786-99d1-4ecc-ab28-6bf98b875e1b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="442718cd-5ff5-607d-428a-430c5038ce07">
      <Execution id="97b7891c-fd47-4801-807d-551ba8d8ec06" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="818de790-05ce-2719-2a07-4a7c15fe2872">
      <Execution id="f81b5b06-0d5a-4f9a-9191-ddf200998206" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a5d0caa6-9800-0060-e3d4-c1bba4c468a1">
      <Execution id="72548e39-d084-4d7a-ad23-f44b32f2b004" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cb4fe3b2-092f-2096-1a0c-a5657d1219d1">
      <Execution id="f77b0084-1ca2-417c-8d95-2d75f4823993" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b0fcb94e-95b1-6302-66b9-e182fcb7fe99">
      <Execution id="595baf39-e59c-4673-bb5a-b625e76c4f50" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c208df3c-a06c-d3a8-3763-093f565d69c3">
      <Execution id="197f6165-1f32-4b4e-bfa2-65c1f6560fab" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Loose)|}&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9acfcadd-d51d-defa-7963-9d53d1c36171">
      <Execution id="55d5243f-9f5d-4009-a7d7-272250ca7f76" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a8d02d40-d394-a52c-b088-4c44a55e1e0f">
      <Execution id="05b4d789-c06b-4e42-ac1a-889157532a23" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForAbstractMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7051f829-9e0a-1b72-f8a9-6f40e76e6400">
      <Execution id="bbe343ac-bad2-4c76-8d42-abf458acefe7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForAbstractMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2581c941-3c68-b8e5-8bee-18c1c6d657ee">
      <Execution id="3e30073b-3bef-4d3d-a74b-b9916d526d48" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3672eb82-1d35-d44b-2738-825c275b220a">
      <Execution id="2e5b5e8e-0c56-426e-8f42-62628b06feb2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f6e78a98-7cf9-b095-5c8a-928122eb287f">
      <Execution id="ef08d277-9884-42f3-b0ab-0d030694b66a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForInterfaceMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="17ea1787-6026-1555-c86a-2f5cf4308b7b">
      <Execution id="733ec44b-3ab3-43d4-8286-2ad9e5072946" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForInterfaceMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="44770953-fdc8-b029-e601-0c880a375c3a">
      <Execution id="7b7f05c6-0f79-419a-b344-d21761d24bd9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="126578bb-4ab7-1175-2a1f-9d74d0a2a539">
      <Execution id="45e64a76-d8ae-4506-b7a4-1c3d79082999" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="686b5f6b-d097-9a11-b341-74c90800697b">
      <Execution id="093cfb47-51fb-411b-95fb-631890cb4b50" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="396eb263-a76e-d72e-fd91-d0d461fac5c2">
      <Execution id="6dc8b64e-79fd-4aa1-aa57-e53004946f57" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7a770df7-2b79-2e3a-c985-0bd6d970c754">
      <Execution id="0cd163ed-81d8-4843-acbc-d796ee4c9dfc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests" name="ShouldHandleAdvancedTypeMatchingPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="063fe473-ef17-c7cd-292e-473793547c66">
      <Execution id="75627977-041d-435a-9b8e-7d1a0b9237ee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9c3c7d90-1e05-94f2-646a-0c362ec38066">
      <Execution id="70e7e83e-fc14-45f7-9b39-cce3cc6a377c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="63a8f3c7-d15e-a139-a333-09366207a0a7">
      <Execution id="84532757-c264-413a-84bf-bfc7be464455" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="618df55a-34e0-e72d-09c7-3904ac675830">
      <Execution id="bbaa2504-cc82-41b3-885e-9722b12d2243" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1e1ab32f-a463-3c8a-9040-abe7355c6f4c">
      <Execution id="ad02ac4d-d6e4-47fd-a6ef-b70d150f02e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0ede7a4e-9fd1-154a-5d06-26027a7e212a">
      <Execution id="6a6e8295-a7c8-4d92-b8fc-34aced640b98" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0e1b46f9-16b3-4bda-d35a-93b365478c06">
      <Execution id="fb3715d5-a5dd-4ee4-94e4-5bdb146bbc46" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ProtectedMemberBasicPatternsAnalyzerTests.ShouldNotReportDiagnosticsForBasicProtectedPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;CommandBase&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0c18c425-de15-3c20-9b48-26da9261b623">
      <Execution id="9c251135-df80-4bc1-a4bc-e9cc0ba92a94" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ProtectedMemberBasicPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForBasicProtectedPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="aa76dbb3-9096-0d0a-f3e3-d2314e84ea11">
      <Execution id="4ae6a182-98f9-4c43-ac30-2f4b26f92e18" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4ae82ef2-44a5-d65e-0037-5bd79cc4a8db">
      <Execution id="718e5cd3-a56b-4c01-8b62-98e8a521ba23" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="27df31b8-deb1-dc6f-0c1e-cd7d663b4d7c">
      <Execution id="f5298100-cd0a-40b1-97cb-4863c1c7488b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8b596ac8-fe15-c204-3241-7fb730ef6bd6">
      <Execution id="4f272da7-115b-49c1-96c5-0175c6ef02b7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d46b3e85-a761-1f0c-9fe7-25a9f39fd348">
      <Execution id="3ef6ee56-9d54-4be5-b9f9-8204acf2bb56" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d7144b69-c307-d44d-89d6-98eba81b79ff">
      <Execution id="93d53313-b5a1-41cc-bb7c-a07d8e9ce6a4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleReferenceTypeConstraints" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="66ae5b97-fd9e-0eb1-8a7b-146a8f553367">
      <Execution id="53eca9f7-14e6-49c9-b170-e8e59035ab5e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleReferenceTypeConstraints" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="15a065bf-6844-92a4-a2ae-1bdcc6c9f747">
      <Execution id="62588550-3998-430f-8ced-c2dc45cb85d2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="25448c90-3b22-e733-c608-a5e672c5398e">
      <Execution id="5af0a0af-a53b-4675-84ce-f465a801c29e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4696a263-84dc-7433-49a8-0cd38fb89ab0">
      <Execution id="1271da8c-b0e8-4ef1-a157-d83b8bee2154" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6382c322-0847-81f0-53ea-f15e2bd331cf">
      <Execution id="84d7de02-dafd-43ee-9dfe-18f2b04e2d52" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="88b0edc6-bd51-7d04-1f6c-ab4fc7940b6c">
      <Execution id="d3964596-4f3b-4d52-a148-bb6c2b21e449" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a6c73803-e08d-1dc6-7ec3-077ff4b70ae8">
      <Execution id="d60969db-93ec-4f50-bd1c-7a7bb05939c3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ea6e4f77-47d6-6843-79ac-3e2400d301e0">
      <Execution id="164afc01-94b0-4d25-92b5-bdd521016b3f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="20195953-6929-4a6c-e5be-58d5c94d2e00">
      <Execution id="e1942575-9070-48c5-8d3e-1e8f3c183485" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9cd80a49-6e32-35ee-b6f1-3bea264bdfcc">
      <Execution id="65f77848-ba54-4d66-8df9-132ac368792f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d28d7174-9304-13b9-f788-5c17b8224008">
      <Execution id="fd35c69c-324c-4ce2-b6ee-a45824fd2b53" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5bf68542-134d-838f-f761-1b6cc9906892">
      <Execution id="93b20404-8426-4d42-a80f-01fff9f77027" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="99dc1c0f-17e2-1ca5-4ed6-b7a153d0a941">
      <Execution id="b6f6270c-21d8-4180-b612-2cc6ab3626d0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(MockBehavior&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fb549ae8-934a-3af1-8595-d1df222bbb27">
      <Execution id="b3cd98bf-0d3d-4313-8f6f-096fbd610ae2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ad9c2372-6707-b6ce-f088-c38ed54c270b">
      <Execution id="9dd11e7c-3da0-4fa7-9ac7-56d66b790e5e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bbe8a229-a133-c2ec-df45-1e4d4e3d009b">
      <Execution id="71ee01f2-d1fc-4903-8cd5-07277dfb82ea" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4b1fd74b-1736-ffbf-e2c1-d9c9c44fd793">
      <Execution id="72d0ee70-74a7-4778-884d-46548659c6dc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fa5caaa2-3596-0f53-0c60-19a3bed0c36e">
      <Execution id="bd564128-279f-45fc-968d-beb528c4e8dc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ec2e6245-9ae4-ce4d-f619-1b0db5655fb6">
      <Execution id="bf0dd895-b4c4-45f7-9d46-581c0fec813e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0435a85c-5725-2ad5-34d3-c5bc557cbdba">
      <Execution id="27148e31-7aca-44d8-8662-0bd8bfb8ce19" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b0eb0072-d1a8-c1c0-40ad-fa4d8b4ee66e">
      <Execution id="50c09de3-03b0-4540-a93c-7c69d5a5cd0d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3cd110b0-491f-78df-9610-2e1de51d5588">
      <Execution id="1e763304-f2cc-464e-b148-a4e7bda80254" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c79b0bc9-b69b-cac8-6984-85d6934f4db1">
      <Execution id="d684cfef-2fe0-4fd0-9635-40032ba230c7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0b83f25a-bcd7-2ee6-3c77-1c52235b6b7b">
      <Execution id="4de697a1-e7ed-4c57-befd-4ba3fefa5af6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c056e857-086e-0025-dba3-a73690f313b4">
      <Execution id="a508248d-a9f9-429d-a0e8-a99bd69ac74d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditPositionInvalid" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="93324b15-783b-cac6-fb63-a83c75f58e19">
      <Execution id="6ac71df2-ed4f-4795-a0e5-bb4f99c5ede5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests" name="TryGetFromImmutableDictionary_Fails_WhenEditPositionInvalid" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2be8f8f7-8957-784b-18fb-ee11f5ee0395">
      <Execution id="b0de3870-219c-4319-9ba4-f9c5698181c4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1661a695-e3c4-b05a-c875-eefac70cc9c0">
      <Execution id="4c298df5-883e-4473-8263-6c28ae726855" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c3065909-acc0-2ca9-261f-2c7685da0332">
      <Execution id="4c7946f2-3214-4f16-b967-687c6f73b267" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cf92442f-ffcf-37b1-c863-bf9eb26ddea8">
      <Execution id="d3fb8313-64de-4f64-8c4c-6f554a3c1753" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d33dd306-5d41-18e4-6471-146964822556">
      <Execution id="c9b88d9d-821e-4221-83cc-a4670a5e1286" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupRemove(x =&gt; x.StringEvent -= It.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8adfbe7e-4cfd-75c1-f96d-49441b95985c">
      <Execution id="271308df-d562-4ccb-b6cc-3ba5a28e3b48" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f5c01d17-e31a-08cf-332e-d2093756a879">
      <Execution id="e264bea3-0204-47d0-b803-474571533a45" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="79f3e3ed-759b-1209-1d85-02c4f6548606">
      <Execution id="a6fe7974-effb-4a69-a24f-877e39510089" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="369301a2-fea9-725a-75d0-5d43f7e31964">
      <Execution id="8c6c2f46-be8f-47fe-9af5-34748bc69790" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="91b24974-a164-a7d8-1d37-c0089c06d9b1">
      <Execution id="f07a42c7-1937-4092-be3b-f666326392f8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="447d92ff-a11c-8677-f5e5-e66a62b7db44">
      <Execution id="876ea201-7ba7-442e-b169-116619931b8b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1366124f-a0a4-6407-f1b7-71992325470b">
      <Execution id="fa953b2d-3294-46d4-9d45-27a98cb9a510" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="be50bc4f-1ce2-b2fe-9f86-2e0cb3dfa7bd">
      <Execution id="bdb51eb7-db9a-41b5-a4ae-f0df52fa82c3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f988ad87-4917-3edd-0322-741dfa68adbf">
      <Execution id="4afdeb86-3434-4b11-8e44-dbc678734914" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="28d6222e-a603-7aa4-36a1-971f5ff1229b">
      <Execution id="df2bab4c-40c4-4b07-bbe9-04b2b585b0a8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cdc305de-fec6-9776-d90b-9c9814e25391">
      <Execution id="d45bfd9d-d2da-4833-b7eb-00ba65a9afd0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6f899782-0abc-5450-da00-33f21208a929">
      <Execution id="1f35985e-7254-4da6-a36a-f519219bead8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bb13dbc0-9768-938d-14e5-b7f42db24959">
      <Execution id="798e6f08-9765-446d-ac66-0a792436a9b1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="08ff69e3-980a-fe77-4d59-3b0688d78c0a">
      <Execution id="0ade3d2f-7e32-41e7-8b8c-cb25836323c1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ccf36209-8200-2735-383b-3db6b593a641">
      <Execution id="8756531f-6964-455e-8627-cdb21b6ecaa8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true, MockBehavior.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="05774033-0861-5717-910c-eb57eae566a6">
      <Execution id="331b4472-ab6b-4ec9-8922-90797738ab82" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f3a4261e-92ac-644f-d1da-7742eb54c855">
      <Execution id="b8426158-5160-4f8e-af93-62d24c2149fd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.StringEvent += It.IsA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b541a45d-9cb1-5094-2d7d-88af65564e59">
      <Execution id="2723723d-9b7d-4096-bf6b-73c89f81f5a3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0a717009-b496-f4e8-292c-a005fb572692">
      <Execution id="22933c48-a3d6-4837-bc92-e42f7ce6dc89" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="af0465d9-15ea-2855-23c1-d25706ddfb4a">
      <Execution id="66412100-c2c0-4bca-b755-18f97bc8316f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="96117b32-0bb5-be5a-143f-a15e67526e66">
      <Execution id="69243563-92c8-4e45-bf4d-bcf2add89e69" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4e1bc35b-995b-adfc-b288-93e3d0e2ea47">
      <Execution id="7aebc797-a86b-4aba-9d53-4a576ff62b6c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="60fff66a-937d-c28b-19eb-e144f4c964b9">
      <Execution id="363dfd0a-190a-4018-a4df-daa6049476d3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="92bfb0fe-bc6a-64ef-31e7-6a65e94d10ad">
      <Execution id="733c225e-72be-4100-a1da-c379ed656290" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="feb9b883-8894-0bd9-586b-32dea8616aa4">
      <Execution id="97aacfae-268f-4aa3-8471-be135c3bf784" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectBuiltInSealedTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ea0276c7-890d-a80f-8e5d-82723522592c">
      <Execution id="c8b4ec9e-9806-433f-b119-d0a2867edeb6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5b94b433-3702-16ef-8d4a-a0793a68084a">
      <Execution id="0e35383f-0e9d-4c91-bc17-2c71c710b67b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a0537bda-04f5-08c9-c19d-dd3495d5f478">
      <Execution id="db9120a3-42d3-4b8f-b926-7e0c5e87696e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="11ac459e-df7a-8ab7-d1b6-529e445539ef">
      <Execution id="e70a4074-b8f2-4874-83e6-0a9317947887" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7f27c765-73d7-716a-2d8a-746509fd951e">
      <Execution id="3853af2f-b3eb-4b33-9921-29cdac11ef27" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="73fc752d-02f8-0ecb-0f86-e6aa77807fce">
      <Execution id="67c4118f-f868-4a31-a331-0c7458c73133" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8a87e595-dad6-03a6-7231-c9602203b8c9">
      <Execution id="4aa2cae3-f028-46d4-b88f-9ce57be29bb8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7b2d3959-a6ad-2f9a-dbb0-dd04000e11f9">
      <Execution id="29fd4c76-b96e-4ae0-8e78-56cc1186b10b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="34df28b6-89bc-581f-3ae9-0331896f7b76">
      <Execution id="cd87314c-a553-47b4-ae16-195de6f31eb0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e7234340-5176-4932-3ed6-447e2c37536e">
      <Execution id="f6860a90-1e70-448b-a2c2-589d75bc955f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="714a4db2-1cd8-316f-be0c-7f0564afc450">
      <Execution id="dd8758ca-447e-49ee-9f77-f8bfdea819c5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="10698101-8058-780a-88d2-dd65efcd2621">
      <Execution id="897c2a39-0835-4f36-8fad-72fc0dc83042" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="79e826a7-e525-1553-5277-c140737937c2">
      <Execution id="02598f82-8911-46b1-a4ae-09daef6f69b9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4dd0a504-9a82-e63f-2edd-c4aa80bef3cb">
      <Execution id="0122f058-0830-456c-9a46-b40ed6e48029" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f5869bef-9331-1494-60f7-6c8301bac361">
      <Execution id="af2c663d-e97f-4f49-9135-b234411ba27f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="80ce2de6-bcd5-2ea5-e710-7a2854074a19">
      <Execution id="c74fe798-159d-4ae9-8aa7-ef4efe4d53cd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="888e452f-83e3-cfaf-47c8-1f47e1b81716">
      <Execution id="9f03f00e-db0b-439b-87ac-eca79164bf51" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_IEnumerable_ThrowsArgumentNullException_WhenPredicateIsNull" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ba61da5c-22b4-4700-7eb9-99a5927e4d75">
      <Execution id="70a6a6ef-e512-4e1d-94e8-5fffb69a6387" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_IEnumerable_ThrowsArgumentNullException_WhenPredicateIsNull" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1b2013e3-d413-69f9-02f4-a7e4ab508dfe">
      <Execution id="5b70fd96-8331-4473-98d6-514f2461fc83" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="39dafa3c-1c6e-061d-629e-2cc22f7fb959">
      <Execution id="6a2945a9-4d66-48b2-88cd-a26a6e328a94" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="510bd2bc-6dc3-d78a-bf42-131e83d26bf4">
      <Execution id="1c626f15-a5df-4ede-a123-4cb7fb0d5e3b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c441b6ec-e1a5-936d-9213-224888b4ccdb">
      <Execution id="5fac3e74-af55-430d-b123-186d1ad25679" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="14c12f21-4075-88eb-9460-2437baed4796">
      <Execution id="27444666-f578-4f5c-b9b2-0d1ce0f0a7e5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d08d558c-a212-2a90-2292-bc68910c0d09">
      <Execution id="02da1142-6833-4799-86a2-ac3705c988f5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c12a9084-2213-5ca5-3946-6d22675684c8">
      <Execution id="2b3233b6-0fc9-4c89-a141-bfbd1b83d18d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ba8a1de4-78b2-c265-827f-ff0f9203b099">
      <Execution id="4b41b84a-4fe4-48c2-b7a4-7b27cda1afba" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="67a37f55-fa59-3d1f-8feb-211b7981c57b">
      <Execution id="107e4e4d-6ae0-441f-95d0-31aca3d68673" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ddd2a97a-bc3f-c9ba-5d0c-8c0971f279f4">
      <Execution id="9bb04602-c8c0-47a7-b228-23ea530112d8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="96c1198b-4b2c-7824-8f08-59e24623e3bb">
      <Execution id="f8eee4a4-f6bf-49ee-b5d4-f6a20ece9771" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b68befab-7740-ade7-92a6-f4a82fa17fbc">
      <Execution id="6378b6f8-5d0b-40f4-a74b-e21b32249d9f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.DoSomet&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="15e4a081-0194-297f-f267-cd79b5327388">
      <Execution id="b8ca546e-d7f3-427c-b5d8-aa5714ce0ddc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1872df90-8cb5-7d4c-ba09-e35e00359994">
      <Execution id="f9f96744-4dad-47c2-bed3-3d8ef7052a53" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bdaef25b-58fc-de46-ba92-0d6f6ef804d9">
      <Execution id="e8072b1c-0483-406c-b40a-f425c9631ddc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="10ea8f13-31d5-1301-9d5c-fe9a17b3506f">
      <Execution id="8fca1618-cbef-4157-b58e-63b2cd868d32" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="28845338-d05a-883a-07ae-39bc693b4445">
      <Execution id="15eb5ea2-f6d0-4756-92e4-d5efad913cac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a254eb0c-c7fa-060b-09e7-121c7d52b332">
      <Execution id="a28993a1-3209-43cf-a1d5-5f146a7112c1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="40c5b490-af60-905a-2862-d626f4fa4049">
      <Execution id="30bf9ee7-1612-4904-b943-9c06e90afde5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="29649cfc-fc7d-6637-fc22-f97955b1613b">
      <Execution id="a8ce41df-a070-48e0-be03-92c07c47bbe3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="81e563b9-9021-e8f1-1496-4e34becc5ac4">
      <Execution id="471da1e9-3890-477b-ba05-b5b93bff0937" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9c7bf3c9-23a3-628c-6c88-0ff4e102484d">
      <Execution id="41fdde48-d38a-423f-8753-4065c5595051" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a3328e5f-ad9c-85aa-be0c-fb85695eb5bf">
      <Execution id="98c0d1aa-5da8-42e3-82b9-ae3d5ec4d900" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledGlobally(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="84120cc5-5c8d-3d98-2fe4-459894241e70">
      <Execution id="f051533b-79bc-4d33-81ff-588fa6bd6ce1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledGlobally" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bd57cf90-a388-8ada-ff2a-1a5e336dede0">
      <Execution id="09b846fd-111b-4330-a6e2-a59b6221c030" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b3e5b9ac-858b-a8df-0d80-880ecc9808d9">
      <Execution id="fd109abd-0e9a-4540-9d65-e7827ef53fb1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArrayAsIEnumerable_ReturnsNull_WhenIsDefaultOrEmpty" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="92bd9671-8e37-a07f-23a5-76e9d08b4229">
      <Execution id="d99d404b-6e7d-4ac2-9866-5a05b84f82a8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArrayAsIEnumerable_ReturnsNull_WhenIsDefaultOrEmpty" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc45b4c1-4a71-34b2-730a-6aa67e0a41a8">
      <Execution id="38a69032-d9e1-4380-ae6e-239fa02b7670" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="19157238-7c0b-1224-6660-150112fca887">
      <Execution id="b50bd2ec-5029-45e7-8243-234888a30f7f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2048e002-4f91-0c5a-41f6-c60cf767b3c9">
      <Execution id="3cb892f7-7b1e-49b4-a2e2-d5e2fbe64ff6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2d1d5719-faad-739f-bff7-efddbfe5dc87">
      <Execution id="fbe6739c-7b2e-46bc-ac0e-811f247b2611" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c734cf90-908a-824c-ca22-1766537f29b9">
      <Execution id="53dc9d91-c01d-4cbc-a4c5-d8800cb2af63" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="be6abb17-51df-dd40-2ca5-2b4b9d90c2a8">
      <Execution id="21b22cb6-5bdc-4636-bbe2-e24514ec02cc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0838f303-9f0c-2a9a-0918-b16a3adacea1">
      <Execution id="6a2e73e6-5f78-4af3-b2ae-32413c3b497e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f584d13e-69d0-2a69-dcda-8da73c391d8e">
      <Execution id="1b7e3316-1a07-4859-bdca-d1e2305a8a8b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9d9d7863-0731-411a-6d5c-6f0cec225a9d">
      <Execution id="abfe4650-1982-498b-862b-65ecdcb4fe96" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eb03a4ab-7106-908f-e881-63eb18d26e8b">
      <Execution id="4cab6a06-c115-4cf5-9c23-29b5257add91" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cbe5848b-858a-dc48-9599-d1840c3561bb">
      <Execution id="03604819-5090-44b9-a371-a070fc24eca4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c27f7b37-1dab-8f2a-0a25-cfb18618bdf3">
      <Execution id="30dcc374-0ad8-46c2-bf39-b537d44907d8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6ea1574a-0d47-3be6-ec8a-ba9673a21164">
      <Execution id="9f27923a-c471-4ac8-8280-40421261b18d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1ffae0ec-a1dc-a7a3-4d8b-74831db04084">
      <Execution id="90edd3a2-06fc-400e-9a01-bce29d67b1cf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c67a6e74-296d-29ee-0dca-b48efd4c2222">
      <Execution id="cda4e615-b1d6-46bd-b6b2-1b9a590c86c0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="28cb3145-b2fc-c564-91de-5cb0cfd0b9de">
      <Execution id="20bb08c9-b1e6-4909-81ba-58f22ff2a014" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c58cfd62-f830-85c8-619a-72416deedc6e">
      <Execution id="dd2dd032-a546-4f1a-a54d-08c23e6afc35" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f139f5ac-f240-83d8-f623-c1567622a139">
      <Execution id="1d85fc02-3eb8-4fc1-8b4f-e46261812f58" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3c67ac09-995f-a8f8-1586-40323c310ad0">
      <Execution id="56b415ca-4570-4661-b66f-f509b7e9aeed" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="80714c7e-aac0-a368-da4d-a024c5ace8f2">
      <Execution id="1f164ce3-165d-4560-89f0-c374c3562166" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2f10b757-974f-460f-746b-53d789f3b8b1">
      <Execution id="e9e70bc7-bef8-4242-b156-45c62ff8e830" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock4 = new Mock&lt;IMyService&gt;(Moq.MockBehavior.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ab9e7e6e-6d2f-931c-55d3-aa811c4391b5">
      <Execution id="19675bdb-a1e8-4586-80d9-21559effb8ae" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b8b97b02-5edd-038e-93db-f8f1db5a4d6e">
      <Execution id="0e9169ba-49c9-4b58-85b6-9cdefe7dfe5a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="13ec5b1c-c5c6-3f0c-5569-76e0ec61674e">
      <Execution id="7957f1a3-0619-4e53-b98e-08275dae23dd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6058ca6e-038e-3995-3d5c-5996434ef0f3">
      <Execution id="fa139d05-e600-4a24-8612-f4cf6d0ca0c9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6bfca6e9-be8b-df0d-b566-5225ea1e6c64">
      <Execution id="0708c702-b4e4-48f7-9554-1e81b0da9423" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfRealMoqIsUsedWithValidParameters" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5a7b1ff9-dcc6-0df1-bbae-11939eee6684">
      <Execution id="1ce067db-62e2-43ee-b58a-4661469a7e4f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfRealMoqIsUsedWithValidParameters" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldStillReportDiagnosticsWhenNotDisabled(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="55b994c7-3b1e-9039-ea64-462bb4fc1102">
      <Execution id="80183fa0-2241-4d67-b114-6227a4512b07" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldStillReportDiagnosticsWhenNotDisabled" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="80974313-6fd8-a182-60cc-083767daa6a3">
      <Execution id="0490cc6b-bbb3-4dfe-b01c-2a3ceadbd386" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7d4c1da7-034e-ee03-c92b-6ae640ef8c7e">
      <Execution id="2c8791c7-e776-4cc8-af71-ff6fbcddc571" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldNotReportSealedClassDiagnosticsWhenDisabledWithPragmaWarning" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f3565819-d11f-1fe7-68fe-ecc4ed90d30d">
      <Execution id="5c42ec2c-7d46-4a35-aeaa-41d32ab2c0f4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0795ba85-ce1d-73eb-4b58-a8665266cd8b">
      <Execution id="42dadc7b-df53-4cb0-8bde-088b9eab87a9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2b444ba7-807d-10f9-3507-0f392580a248">
      <Execution id="6369f834-b692-432c-b5c7-6323a4686074" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="04bd9787-547a-c413-32c9-48ce2b6c8f52">
      <Execution id="56465549-a548-4c75-aa90-637939595065" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f7cad1de-0cf4-e0f0-de34-0549ffe07d6a">
      <Execution id="882f93b6-6315-4f91-91c1-2349deac9582" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1f0cd1c3-c108-7969-43ed-bdb5373559f1">
      <Execution id="1f8b0cd9-e5e1-4cf1-baf0-bfecc4bca855" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a0aefbfc-2fdb-bca5-a92a-3b5e16315d37">
      <Execution id="2bc4cbf8-4b1f-4d49-9686-0c36cbff7d48" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a5681949-3ea9-b54f-8cdc-7be0c2e82294">
      <Execution id="e0540a4a-e61f-4f2e-9179-46674bae8c3c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="de191661-dee2-fb26-a3cd-a19e869a3d1a">
      <Execution id="4fe22306-01cf-49a8-b2d3-46454ad7e228" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="05b7ddbc-4e92-0a6c-b7a0-005564b78e17">
      <Execution id="c448d8c1-5dc1-49cd-9d0a-0c3b92f9b4e8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4141211a-72b4-90d6-fcbb-20b655acf361">
      <Execution id="893b3676-c26e-450c-befe-f488c931a772" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="177c5f76-37bf-cb2c-583f-1f14061d01de">
      <Execution id="d2b92d64-a9b9-4113-ba5f-1702d26a8716" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupAdd(x =&gt; x.TestEvent &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d55faab1-276f-4e1d-b0be-c8c5b2867f94">
      <Execution id="459bc0bc-20e8-4ee4-8987-637e1bfd1f98" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dbef0cf6-e9d3-658b-07f9-87f22e5d5689">
      <Execution id="d989108f-66f8-4687-91bd-7eaa7ee29e38" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="777b84e8-f4b3-1c16-8698-70f4efe7c677">
      <Execution id="6af43031-0267-401d-bfb4-86b74df98fe2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3b3b9f0d-511b-be5b-7630-17d340c4f4e2">
      <Execution id="0b9bb4ac-5de2-4f39-9692-d5a2b9d502d5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2e495a15-2781-b351-6770-c65a65d1aeec">
      <Execution id="b47fa244-a6ca-4552-9f6f-6663c918844e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(MockBehavior&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6c19af90-d4a0-ec60-62ff-872c8eb068ee">
      <Execution id="9fd3ce18-efe1-4dba-ada0-cf0170f9376e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8985e7ba-a059-6a70-c92d-1232161180ae">
      <Execution id="75b4c8a2-245a-4e93-aa98-b5a24affc6e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="655ca05a-8ae4-dfb2-3707-ed2692a54d75">
      <Execution id="0f34149a-8624-44a0-8bcb-0e09b1272ff3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0b0a9a6a-23f0-cc40-565a-c3fa7fc2145c">
      <Execution id="12cf1e6a-6ecb-4727-8ec1-a41b697e68ef" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="99e7c4e0-cdc4-36c5-f1d8-03fe30c98242">
      <Execution id="fffbd2c1-48d7-43ce-8a42-57c3e245a842" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8983fb77-9f55-d809-4155-a3082b59f7bd">
      <Execution id="3cfe7ed1-3808-45d5-a0d6-8ecc532ca996" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f9075e55-a1ab-e51e-c458-544f4f0f0989">
      <Execution id="d18e4779-400e-4dd3-a3b6-3456ba3ad7f0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="efb32894-dd94-6868-39f1-8586a0e0690d">
      <Execution id="ac3845e5-6aee-4323-9a6d-a9671ce41c47" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Pro&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc619cb2-8419-9678-9deb-e40d2289560a">
      <Execution id="eed4f3bc-493f-4d8d-92ba-05587529bf0c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e09f9885-cb5a-dd80-4334-fb1ffaf4e9d3">
      <Execution id="4627937a-d8df-4aad-bd81-b49b38e6bfa9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a898cd21-2dd3-aa11-f5ad-98d4ce3d63c9">
      <Execution id="1047b073-232d-4c43-ac2c-651d87d5d545" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5ec50f6b-d832-169e-e9e9-d1443900b6f3">
      <Execution id="94562fdb-a97e-4e97-9176-bb63b89d5e24" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d309feda-4353-3107-0849-3bb5a4ba9150">
      <Execution id="37251bb5-d8dd-430a-8235-517aba801c0c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f33813cc-d371-e2f2-a61f-d3aa7054e9d1">
      <Execution id="a42f60cc-d4fa-4222-8283-df4fb9e08da4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForSealedMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.De&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9a1770fb-4dc6-381a-0465-82a4637e6d14">
      <Execution id="a4279dbb-976e-4cfe-acf0-d31cdd482e0f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="71eabc56-c4b7-cb7e-d6c4-5661ed313124">
      <Execution id="0bd3b649-f55a-4e4e-8a4f-fdcae33092ee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ae7d63b6-aeec-239f-8fec-a205376b3c82">
      <Execution id="5d915e4a-7c4f-4247-80b9-7112e94d9535" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsElement_WhenSingleMatch" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="52b48828-8fc4-4b08-7c25-ec55003a54ef">
      <Execution id="d11f20a0-325a-4c7a-8e47-eca9d854d0be" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArray_ReturnsElement_WhenSingleMatch" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="273bbb1e-80ec-dde3-e509-88dec84dc4a3">
      <Execution id="eaff1da4-52c8-495f-a258-20e13786152e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b4c5b679-7faa-c3c3-1ba1-8b8a5a1cade9">
      <Execution id="a24756fb-66ea-4067-9365-f338424203e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e4a20c47-8115-5cd8-7dc1-5493456a14f7">
      <Execution id="0c68e9e2-0926-44a4-9988-11056d2cd659" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9634dabd-aa34-43a2-26b5-42029baa5bd4">
      <Execution id="adce13e8-0ce9-47d3-abb8-7706ad37f9d4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var repository = new MockRepository(MockBehavior.S&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="212dd999-4cf7-b083-bd80-135c06132a06">
      <Execution id="26a8d78c-be70-4e39-a6e6-65824e39e91b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.DoSth());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5dd22578-7d86-c0af-adfe-93bf8de0abe6">
      <Execution id="9b1f3586-8be5-4840-bc1c-8660bf0c576d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7822ca7b-bcf2-7d19-9513-b6cc69599626">
      <Execution id="f2f6deeb-fe3b-4974-b556-97797aad85de" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="498a2102-0af4-93e9-4ac5-fea051d61b04">
      <Execution id="6b2fa6d6-0783-40eb-a779-3661de486534" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="25cfc213-7b8f-3c38-a97e-346c977de46f">
      <Execution id="2dfb3298-bac8-4e61-b87f-aefddbb2fdec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fbefc20a-fabf-2034-dc82-563bba9c5a38">
      <Execution id="b4a4fdda-7438-4eaa-b97f-eb7e6781a7e5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="84f97ef6-79f1-faad-7862-98990e4f9b3e">
      <Execution id="831ceb4a-22a1-4539-b18e-355fa584f7b5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="40a59b2d-37fc-050a-c610-545d3a6b187a">
      <Execution id="acc1034d-1edb-4687-b708-34da5535373f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="743ab1f8-3990-c7b2-d6b5-9201c5391dd4">
      <Execution id="d33c6c21-3043-43f2-a56f-bbf20e754f52" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b88132be-c46a-97a5-4553-eba1c75b090f">
      <Execution id="8ba376ce-9b72-4b9d-b73f-0c5ea88eba19" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForSealedMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock3 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d64ee590-96fc-4d9f-b828-c84b16ca01aa">
      <Execution id="11e1165f-072a-41da-b27d-8030eabe29df" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5c9d96a9-ca93-c973-0227-d860e5d405da">
      <Execution id="88867df8-9a76-4b74-8df5-bef2c8aa5f20" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4ef25b2b-2e99-327f-eb80-66326b1819ee">
      <Execution id="61d64e95-ead9-44e6-8c14-9678affd18e3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d78dd45c-bc4a-8547-4b4a-4932b20af1cf">
      <Execution id="7f2c82f3-6dc3-4ad0-b3aa-f74362d114ee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fb5a5f4c-445f-9046-1e69-13d7573f665f">
      <Execution id="9051c0ed-13ab-4f15-bdda-4d79a04b1d49" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="31400373-4ccd-22af-043e-d326a228e0aa">
      <Execution id="d20ad31d-c57c-4577-9714-dfb17e43091a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c99f5a6f-9bde-c6e3-1894-b9ae5f230d49">
      <Execution id="a8010073-872b-44d0-ba33-1d6a8b82d33d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="22b19898-b21d-6105-6c06-a5b6ec0065e1">
      <Execution id="5af6d489-b38f-434f-b8ff-9f06bef9a76f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f8c12b4d-0589-0e8a-5210-2283b97684bc">
      <Execution id="03f01fb7-07b4-44a4-94e2-ba196f9f7b97" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e00025bd-b1ac-835f-21e8-b8051b382760">
      <Execution id="3574b1e4-b300-4038-a756-4591a638de1d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2b582f6b-d891-0a58-1dde-49196bc82626">
      <Execution id="0643c714-ea39-4f86-aacb-3873c307245b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d4bc0b55-d81c-16cc-4b85-88d524f12092">
      <Execution id="d6dc96f8-3298-409d-bbba-fdb1c11db51f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="627f9952-2edb-5341-7841-201150eba998">
      <Execution id="23927ce3-3660-4438-ba30-439e2056f725" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ee66e994-88c8-1cd1-588c-e26b99d70fa7">
      <Execution id="ea059da7-314d-4aee-a06d-2c3e6ca67d54" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="05802647-1477-f0ea-8343-365e87b92734">
      <Execution id="c36e8bd6-c36a-4aa3-b524-c8745ef9bb95" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6de4a39c-01e0-aff0-18dd-2182fe339299">
      <Execution id="297bf20b-d1de-47f6-807c-7680cebeef55" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e19972f0-84af-4f45-5cb3-5671c5b223ad">
      <Execution id="7930c278-29fb-47df-ac67-5b06b3e406ca" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var repository = new MockRepository(MockBehavior.S&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f5454d72-4d22-f9cb-b404-612dd1ebd902">
      <Execution id="5a560794-9c44-404f-ab1f-214f78bfadb2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bc240b12-b91a-34e8-d95e-a08d6ed91659">
      <Execution id="57563a81-dd26-4f3c-9b3f-db9e225548b9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7aa73f34-5ebc-ebfc-06cb-5f84f325747e">
      <Execution id="363ec0d4-234f-481a-a0bf-e65c5fee05eb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldStillReportDiagnosticsWhenNotDisabled(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="495f0522-c9a7-b1e6-2d9c-1f59f26089ed">
      <Execution id="2869457e-d483-46f8-825e-5291ac6c2b90" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldStillReportDiagnosticsWhenNotDisabled" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fabf2558-bad1-97da-0a55-ca7469f4efda">
      <Execution id="a1b0cce5-1ad2-434f-b316-da106d2a2d21" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="515670f0-9475-f984-c503-3d5c984c01f0">
      <Execution id="5ad75454-9996-4d91-bfc2-d24514036e54" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7844bc50-0d77-bd07-3f9e-b23472f38903">
      <Execution id="4fe6703f-8316-4494-90f3-50b787ea5cf2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="54d4b074-d83b-d0e3-5b1b-590faf970865">
      <Execution id="b47aa8a6-d6c5-4989-b5ea-729a0da4558f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="65ec4905-d3ba-4b45-9387-b7cd5e05e6b3">
      <Execution id="7fc88adc-a289-4803-a79f-d9067235b1ea" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="60253119-4c02-3e7b-65a0-b1d736937fe6">
      <Execution id="e955567e-e22b-4417-aba2-8f7928dcd45a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.DoSomet&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a8f78510-6137-dbec-5401-2aa19e507437">
      <Execution id="717664bc-2563-4880-b193-2825298b3241" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0371dd69-06df-7998-a7ca-5b07d5ce10d8">
      <Execution id="40bd4071-f761-4669-af1c-e8766c11975d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1fd9d5b6-176a-c980-37a3-eab8b8aa5882">
      <Execution id="58f29789-1050-4d50-b46a-20a213452718" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff3fa527-2d6f-2ce7-35e0-9d4b9d426c21">
      <Execution id="da369896-46b4-4f36-81f2-2587aef3e28a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="28dfcfc5-71e4-5551-866d-bd727a2fb916">
      <Execution id="02414d43-b40a-421d-ad7a-c1726b732102" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="303299c1-3e94-ee22-a3be-78b710909305">
      <Execution id="58a60344-ad3a-4f3e-8ecd-e2db1842209a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="caae96bf-473e-7bb8-9a74-f357e8f1f5d3">
      <Execution id="f2eb362b-2375-4c12-a97f-742658872a9b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="300b6f7d-88b1-225b-81d0-d3991ed90e9d">
      <Execution id="2cd598f3-2b1e-4d18-9537-71f4d421e06f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8e7eb20d-1f0d-9f21-c16e-02c3b96cec72">
      <Execution id="87025f54-8f33-4e87-a002-83b1e4b17f4d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b43bb6e2-2962-f083-9d22-1cdeacc8fc35">
      <Execution id="b08fd592-2e69-43d2-9f71-9b2329132ed6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Fie&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0881dba9-4980-6975-5649-21e5613317c7">
      <Execution id="010cd5ea-9bd0-4973-a274-83872db00c6a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f4ac8330-f886-4290-e73d-138db862a486">
      <Execution id="e0e8a62f-331f-4f2e-b4ba-568bd6194de6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2fae4574-2457-172c-4718-c6a6b185459c">
      <Execution id="a91f8647-5728-4d01-8a6a-4258a26625cf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="999e4374-aebe-5684-3171-b323d5c5e9b1">
      <Execution id="4fe4befb-78b7-4e8e-b87d-eac6f2a5782c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1c2f6689-e44b-8d7c-5ab0-a4af8b28a111">
      <Execution id="c2c46699-ae5e-49c9-8f2e-e2144ec7a28c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="937275e6-b5d7-2a11-6bcd-7c6eae6e906f">
      <Execution id="de014dfb-b567-494a-acd5-61d55a0287f7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e14df78d-fe05-0612-813c-f3688fb1a3cb">
      <Execution id="04d2acf1-4831-4d7b-91c2-fbff58061189" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="82da5cd2-ad35-a2d0-26f0-0a9d0c434c30">
      <Execution id="2652ec60-46e8-46e6-92e9-650e95a34b1e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c013d0c7-26ac-c939-2ea3-38bec193f1f4">
      <Execution id="de22bb7a-e919-49e9-a422-b7472b34aa86" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldNotReportSealedClassDiagnosticsWhenDisabledViaConfiguration" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="771350c4-06ef-1c9d-255b-94f39f48dc95">
      <Execution id="4a346dfa-49f0-4bbd-90fc-ba0037c64e3b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="51af7735-a0e2-163a-f978-a7ebed888b56">
      <Execution id="018cd250-05e1-4a56-a7ac-46afff0a945b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="740ed921-7857-935c-7a59-679c8d5a1f2a">
      <Execution id="195e28e2-bf75-44b7-9ce7-a4485a402626" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="890b2ac1-fe82-8019-0c0b-54bb6eca93f8">
      <Execution id="0a080eae-d0c5-43dd-a1af-38fd35f6eecd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="733cb1c0-533d-b31f-6978-668ef23d2200">
      <Execution id="347af8f9-f264-49a1-9bb7-37f1c4aa1731" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_FirstElement_RemovesCorrectly" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="00e4532e-f1be-f8d0-c15c-245adc25af88">
      <Execution id="4b8a8cde-5697-4bcf-b357-416bb367bf73" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.ArrayExtensionTests" name="RemoveAt_FirstElement_RemovesCorrectly" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="75ff428a-fea7-7577-f7d1-94eace001dda">
      <Execution id="3ae4a3ce-9ead-4423-9d31-340e7b4ae942" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a6be901f-8306-d244-f751-3bffce51e4b0">
      <Execution id="af7fc8ea-662d-4c3c-baa0-aa2ed4a42f3d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c1f1bcc4-50f1-66fc-885d-98faf6bef61d">
      <Execution id="9903b274-08b3-4623-8311-c5b670f4ff08" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldSuppressBothDiagnosticsWhenBothAreDisabled" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e6b762b4-157b-3abd-388a-c58903f93edd">
      <Execution id="8af304a0-7419-4a3d-93b0-6b3079f58732" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldSuppressBothDiagnosticsWhenBothAreDisabled" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fd799f24-7265-4182-8a14-9cdf49796b23">
      <Execution id="4a4c6d70-30c8-4b0a-8784-bb9f22133962" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c63e4c32-042f-a1dc-2b21-77918123cea6">
      <Execution id="22d7f62b-96de-4004-80ab-efd931ecb735" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7a4739c5-c17e-59fe-7366-e8e222a26964">
      <Execution id="af9e9b60-2bba-4bc8-bf8d-36bcb257fdcd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3228ca39-d7f6-df03-7bda-7947f9751218">
      <Execution id="a7409e63-c5fe-456b-9518-faf7482251d5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b6ff9551-550a-b179-512c-4215997f546f">
      <Execution id="9b8dc24c-61ba-48cc-b145-b689c3d30931" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="feee4bbe-9ea0-c5bd-0dac-1d53be8df868">
      <Execution id="fe78eda8-55f0-4c5f-b113-eb6cd3faa697" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsNull" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7cee6fe2-75f9-808e-7d16-39f7c1bf580e">
      <Execution id="1564a715-e064-47a7-8907-86378b7b499d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ReturnsNull_WhenSourceIsNull" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f9974e7e-97cc-6b46-88a3-ac970c71c337">
      <Execution id="5a357e9e-85d8-4a67-8701-285cb950cc44" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d0c49d54-8724-fbbc-2973-46d4f4c74365">
      <Execution id="20672e11-f569-448d-9a58-d2b4c8265b59" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3b148d2b-baad-a66c-4364-9c93c8a4f81b">
      <Execution id="e9ad5a6d-00cc-46dd-ab8c-6cb62837d9b2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d1e1db13-4dd6-13ce-27fe-9f4c16ac5a9d">
      <Execution id="e37da6d5-c7a3-4ee5-a16f-15e1d359a10b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="38c8274b-5b3d-ca62-31af-dd8e70824ff5">
      <Execution id="85c438bf-a69d-4960-958a-fea8b2dedf0b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="46d4dfff-9f57-563f-bbf2-8653800d4bdf">
      <Execution id="f4ebff6b-fd5a-43a8-b3a7-19b1b2c46efa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9ec73178-8587-635f-a9a8-1aebd2dcc81e">
      <Execution id="a25bd8cb-698b-4c0a-ba2d-b0af996e40e0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="484b5345-0195-1a44-c588-fb9e9daa6ad1">
      <Execution id="a30ed4fe-1375-4e7e-a977-e5e7067ef055" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForVirtualMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7cecfa68-bb2f-4f10-4bd2-d7ea0d66de53">
      <Execution id="f5a91a1c-010c-49ad-b7e5-13c37a7745f4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForVirtualMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c0f262c5-84b5-bddd-9a98-401d8f1083ee">
      <Execution id="06e12981-caa1-437d-abd5-d3d4a79cddf4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="36c76ccf-4e1a-b24d-5b6c-fdf93c19d34f">
      <Execution id="0a635913-123d-4d71-8f2a-b11a283a9972" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ba06cdea-5c7a-119e-f0de-7a2bb9091453">
      <Execution id="6d8f5547-131e-4d22-9a35-e400dfd3cd85" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9f6bec22-53c8-7dd7-987e-cc2bf6a44572">
      <Execution id="d57f5458-48d3-4243-ad4d-e5aa4e20826a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupAdd(x =&gt; x.TestEvent &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="17e4de40-597c-33e9-9d20-0cbf3384a751">
      <Execution id="a6c711ec-fbec-4a57-9840-911557351467" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a616e231-f3f8-97a8-0deb-672041d7bf5d">
      <Execution id="29f7fc21-0359-4e4d-802e-6dc7ac990949" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="367183c3-5560-cc55-05c7-fb404df4bfec">
      <Execution id="d37c0ac0-3c45-4e05-99ba-7d5930c2eb38" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7eab27a7-d754-5805-be4b-9d4732cfd4fb">
      <Execution id="9e9495f2-6632-4150-9616-afcd04fd538a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0665cb18-34c1-d2cb-497a-49cdc01d0a00">
      <Execution id="06c39cd5-f45f-4259-8682-6283ed1b81fb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_EmptyArray_ThrowsException" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8501d3ec-4167-5b8e-8549-0547e4e4afcc">
      <Execution id="3c1a24be-0a3a-497b-99b9-accf164e9032" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.ArrayExtensionTests" name="RemoveAt_EmptyArray_ThrowsException" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="775a6f83-2593-6301-1bbb-351ddd620d4a">
      <Execution id="062f7033-686c-4678-9751-7a6a1b93d5a9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ad83d352-51ae-0aef-a1a3-faf6b7ded3e7">
      <Execution id="e154a9ef-08a5-49eb-8a53-3b61871fe3a4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="08e16d68-c179-252b-4d7d-c464f7e1d901">
      <Execution id="9f74048d-5739-4b24-8930-2cec38cda80f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ca81e23f-4b10-013e-4c1c-ca51d2d61e52">
      <Execution id="4528aba9-0200-4f37-8918-87f2dccf5faa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3207fedd-90a4-cd88-425b-109a5ca51fab">
      <Execution id="81abee48-9efe-4f01-b8e8-7a5e80cda96f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dd50e690-44ad-3311-b768-8963d681486c">
      <Execution id="a749451d-8c13-4ad8-8954-f39f7d75b11b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5db75e61-fc59-d8b6-bfbd-85c186270b15">
      <Execution id="89d80833-0cc3-44d3-b849-4b741cb8ba34" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="76e5f031-4b4b-9cb0-c707-a9001c7b50ef">
      <Execution id="48510f2d-cedf-4e0d-adbc-920aa0cc674d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="db0a0964-8445-ac59-2ad7-9445a30b6ea6">
      <Execution id="fe760d91-ef48-49fb-a2ef-246729d2446e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenIsDefaultOrEmpty" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="791e324a-f9f5-887e-0dac-9245aacbfa1a">
      <Execution id="65ad9b8a-d4d9-43b7-89b3-0a6f991ab288" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenIsDefaultOrEmpty" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleInvalidMockOfCalls" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ac022616-7910-d608-bf11-dfff5b70dcf4">
      <Execution id="4e2c628e-e3de-44ac-8d98-2e0d50a1d248" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleInvalidMockOfCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="24733208-9b4e-71b8-2dce-918de84e5d92">
      <Execution id="a48fbf66-29db-446f-8527-4384583dc116" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a6ce8e98-9f9a-40b2-b6b2-4d9957d96401">
      <Execution id="737a7623-142b-4886-bf7d-df21a8ad3378" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5d9d8932-9c03-4450-9f3a-19df60fee432">
      <Execution id="bb885986-d147-484a-bef1-4bfd34617fa8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d8548820-f426-7b72-e979-00f72be49ac8">
      <Execution id="725b05ca-8c1d-4e69-8378-e70e61fb4be6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc93e3e6-0e3e-dd37-b8fb-0abcde8862cd">
      <Execution id="d9a654ea-9478-4804-a62d-5d8e627c0f31" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="50526835-f3af-7d07-e0c3-0e3124fb33b4">
      <Execution id="48fa3aed-ebba-4f80-8d2e-a6ed722ea983" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a40d5647-4b85-37bc-638a-207cdaeb69d0">
      <Execution id="65a6919b-885e-476a-8b06-e6e1938bb5c5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8cf57e9b-b761-1f7b-6349-67fbb5eaeee2">
      <Execution id="b74f33ab-1c55-49d6-907f-f40c1c1533cb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7793dbaa-579c-1157-01c4-531db297c1f3">
      <Execution id="14f33ee4-2643-43d0-9807-d9802487e007" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e89e369b-6136-c4a0-4e31-b68c970692c0">
      <Execution id="a9087fc2-1e49-4949-85bf-0e3fcdef3724" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifySet(x =&gt; {&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c08961be-429c-46f9-1bd6-33b22621c518">
      <Execution id="d2fa4acf-45e7-4d97-9ccd-7696e63cf323" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="798d50bf-36b9-7b05-81c0-2f946dfbb2f4">
      <Execution id="70249611-7e7a-4a08-b5ea-da5c2f54dd04" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="538efd45-15bd-5b30-db20-350b702739cb">
      <Execution id="339837b1-ea11-4423-a7c5-d5b9f56bb33d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="88550bbe-5d31-99b4-2fb8-bec6a6ca1654">
      <Execution id="f3e238a8-b500-44ee-9e38-74c15ce2990d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2fddb39e-7cb8-dd0b-4c0f-57eea1e5a8e4">
      <Execution id="a26fe6ad-c41e-43c3-b86d-5a32ebd677f9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a57af381-d31b-855a-8c50-91e368b52e56">
      <Execution id="9b3c7140-749e-45ff-844a-02609d5d28a0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6817e04d-d2e6-0f35-235f-2320aff67c14">
      <Execution id="04527496-55a9-4a3b-9b57-335b0b626b49" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualPropertyVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f9a84eb9-0814-30a0-baf2-2618094b6ac6">
      <Execution id="9c18141e-bd20-4110-891c-5b67779b98fe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="20e6e9ba-e717-a238-e38e-363903d2b78d">
      <Execution id="f79bd80f-a83a-4629-a33d-52913f302c8b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cbbe0b41-3044-27fe-f6a2-6d1814fbef28">
      <Execution id="d1e89e3e-3596-4c26-9853-c4c3e8c83185" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7743a6e1-82ab-43a3-63b1-629e96ed1213">
      <Execution id="3ed71df4-2c3f-4f1b-b086-f5e83be9f771" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock3 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(Moq&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cb83e29f-2dec-78b9-eda2-6a96de84ed0e">
      <Execution id="c4c854b3-45e3-43d9-9c43-1052e4b1df0f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldFailIsRealMoqIsUsedWithInvalidParameters" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="757fe415-4fa0-4784-3598-b2597cdf6a55">
      <Execution id="222abfc0-7d2e-4ef8-ab67-a912d5c70581" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="89f326d5-f978-fdf7-31d7-bf5e211e7882">
      <Execution id="93894ba2-fcbf-4e91-87dc-c6413f9f7b5a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a31557a8-beaa-0773-d840-9dac7df7c016">
      <Execution id="9be49b26-b174-40d7-a707-eb46d6b4c2b7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0e1dcc21-49bc-d12b-cc1e-28e29b871df2">
      <Execution id="494b14ff-a82d-4719-a7aa-c63e9b63b9ea" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8eba2de9-38c5-5bd4-25a7-ef326c22dada">
      <Execution id="2c89f9fa-f5b2-4d65-ad3e-5d906d36fa61" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e4dbc117-c8e6-7d96-77db-415f65570986">
      <Execution id="78187df4-5cb4-4b90-88bf-8010727e63a6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c5f3d0b0-1290-9e1f-a687-de94f70c7ef7">
      <Execution id="571750f5-58f0-4d58-9e15-3581eb2804d1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="482ac86f-226d-2159-99b1-3e0b15c6fdbd">
      <Execution id="47a18ef1-d2cd-44ea-bdb9-4dd37fe5203f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fd739bd7-051e-8600-d623-c94401c4afde">
      <Execution id="151e5373-ece3-4b78-a57e-a4d0bd76bb90" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b4995f7b-2251-2083-a3a1-fb61eaf02590">
      <Execution id="d4d98bce-2478-42a9-a5a1-98d560939783" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d576fd12-dec0-2a83-0c7b-cf68127141a9">
      <Execution id="e44b6523-b5f9-4b64-a1c0-98a0c9cd13ec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ec062dfc-321d-6497-b076-8d80b2d217e7">
      <Execution id="903098cd-1535-44ad-a496-0c34cf12e2fc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f4f67e27-a125-4cae-1179-a70efc26c409">
      <Execution id="05a80928-7be1-43f6-aace-49c1ef961b4c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8c0aa406-9cd5-6402-3a10-c892c26c5eb3">
      <Execution id="5346752d-0b98-4a00-8c86-e918a757fa73" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c4fcda4d-bb7a-ca45-f419-893fcadcf06f">
      <Execution id="784f919d-8e93-4690-bf02-cb7e6d1e2acc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cfe1494b-fb96-2790-edee-1f5fbba221a0">
      <Execution id="9d4c8bc0-41dd-47bc-a9b1-a5ea1e84199b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c14417a8-d833-78d5-0427-85f81afa0b82">
      <Execution id="324d832b-9f5c-4a8d-821b-efb87ba299bb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fdcece57-9003-68ef-f695-6e9ee17f585b">
      <Execution id="ee583331-977d-4f9e-b6eb-358b477d78b4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="83fc7fff-fa13-de12-2e87-a683e5d73b05">
      <Execution id="e0cfe7f8-e377-4b83-b647-bca2d50f430e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="36504397-6d0d-3518-732f-84835bf4c0b8">
      <Execution id="76c52781-33f5-42cc-a56d-ad9b6d38d69b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6aab743f-6931-4fdb-0013-cd4ee4922c3c">
      <Execution id="3804d840-6e63-4233-9bd4-f1286871794b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a899a9ac-d8ea-b440-f174-6dea5d42448b">
      <Execution id="dedce4af-bd17-4deb-acf0-5f7d38a3294e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e9f1f437-597a-3172-349d-8e27eda6f83e">
      <Execution id="f5ddb297-9063-4c4b-9e2e-cbec90a24087" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e717a128-aad5-94ff-a038-5bedf19449ea">
      <Execution id="ba93f763-a6ca-4b83-accc-f4e04c61a9b0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="151e6b6d-d9ed-0790-78c3-14eff8d77f56">
      <Execution id="78c777e3-6fbc-4af4-87d8-899e8b1fe1e8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2118aba4-b361-426b-bedb-883490cf8462">
      <Execution id="62340b62-ddc3-4c59-81de-57e50b5b7e4b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.GetBooleanA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b741a100-0e28-2f65-3426-ae70801da113">
      <Execution id="9d0034c6-5784-484c-a9ab-eaa714dda948" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1e8b8b72-ac76-339b-2c1f-dfbf13883417">
      <Execution id="12826e6b-6a71-4d06-96c9-3698973d51fa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditTypeKeyMissing" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="15dd13fb-232d-11e4-b4c8-b1997b13a31e">
      <Execution id="a80a0557-f927-49d3-8f73-514997a1b3fd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests" name="TryGetFromImmutableDictionary_Fails_WhenEditTypeKeyMissing" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d750f795-0da2-bb17-8107-8dd8f9053231">
      <Execution id="3a377152-3818-4b6d-b4df-a8f13dfca4e6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cceab81a-506d-6c31-c036-06d3243c9960">
      <Execution id="cef4ae7c-cff2-48ec-8cad-22023ee9d147" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7d67c080-fb9e-136d-6b45-6bc86b37a6d5">
      <Execution id="9994f42c-9493-480a-9e56-24e267146161" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="abf9b919-a906-e592-b072-dff12376100e">
      <Execution id="26be0b8e-29a9-4dc8-8244-b20ba8c9b2c6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d8580ded-7e39-20ef-08bc-47cfb1e5e703">
      <Execution id="94a63ade-81fd-49c3-af97-1f309a1d5905" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="97abdaf4-7a2b-91ad-459d-55604c5868c5">
      <Execution id="f1c18f0a-c334-4a5b-b07d-e5edf611dc4f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="66027c81-a5a9-3cd3-8e98-bd24862efd4a">
      <Execution id="f8d143c9-9b51-482a-b202-5b2b66817c98" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="08102230-f5d9-dd0f-1c6c-c5fc88e60157">
      <Execution id="28ce74a3-fb57-4b61-b45e-bab5c31944ee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2bf9a495-9b89-5d86-4f7d-fd6ac58f767f">
      <Execution id="cb327515-786b-46a3-afe4-e12e150cb069" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1862c672-8f91-7e4d-b935-4969b7f31831">
      <Execution id="1632a4bd-7e58-412a-916a-98088500dc56" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3e065466-794c-166d-a846-c6c1ebbe4543">
      <Execution id="7749a804-7e40-4922-bf73-867ff1e81a26" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="11a624d8-40c2-2c5b-49e0-7b9bad65ff1a">
      <Execution id="5caced4d-b401-45d3-bd56-b93a4c2f0b6a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0148e2db-f8d0-3cb6-5dec-d71f688dabd8">
      <Execution id="d11bf5e0-0a8f-4af6-92e1-82a1a4d63641" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForInterfaceMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f59bc880-ba88-5ccd-d6bd-69f5d95d2c9b">
      <Execution id="40ffe6e0-4bc5-4ff9-83d6-88f0cc69f200" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForInterfaceMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9cfb7bf9-e772-a042-c11b-dff2cda49f62">
      <Execution id="6aa53bae-66e7-4fcc-9c7e-c7e1b85e2ccc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="298b8ff6-7b1d-afae-44e7-3bc96f574aed">
      <Execution id="581cce38-cf03-4bdb-a693-c090b310d350" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="08a7c46d-156f-d5ba-aadc-e8633cc4cda4">
      <Execution id="959ea0c0-c1aa-4020-96d9-58e80d9bb2c7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="10613081-8054-ecae-ed47-83cf6ed30748">
      <Execution id="fde84581-1223-433b-8bd2-c0d6de1e997a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eeebf50b-5feb-d90e-ff6a-d27ddb55002c">
      <Execution id="daab238c-3f3e-42c2-a4bd-06c79bc04a7c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e5cdd042-12ac-a14c-1162-7183fd8d28f3">
      <Execution id="b29b7749-7115-493b-b330-4a1907b79984" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7c9e26f8-1b1f-bfe4-0f78-fe3e3aeecde9">
      <Execution id="9592ebd4-b414-412a-97e7-acacfbad647b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.ProcessR&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="79af3be7-0f7b-bed8-5e2c-fe55183debfa">
      <Execution id="71441743-407c-4657-abb8-e0a120ba55b0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd5fa932-47fc-9b32-c71a-3f85f65cf1b8">
      <Execution id="1ee6cae0-2c44-4d2f-913a-059d82cdcb72" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;IFoo foo;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ace266a9-510d-90a5-7961-8a2e627b504c">
      <Execution id="0d5269fe-9dd1-4e9d-a676-4cfb43a27168" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="feb836c1-b7dc-030d-9724-d1e765d27e98">
      <Execution id="0bfa793f-edff-4d38-beb1-4bfc8948dcbc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c8bd649f-26b2-55e7-50e4-0b6b4c66ddf9">
      <Execution id="166c904b-b67c-423e-9f85-fdbc2967c28a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="edbd64bd-6ab2-df22-a276-71d903ed76d1">
      <Execution id="2bf84fb6-e283-4cbf-ae88-981cb6881472" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9f66b224-8063-cd61-38fc-dd22b542232c">
      <Execution id="9f8af17b-687f-4518-aad6-79a1e31d4479" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="276fadce-77e1-500e-972e-db9deea5f91d">
      <Execution id="3fc4944e-154a-4fc7-a863-21ce37c7bfa8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fe9823d2-bcfd-d5a8-d62a-2a736057bb90">
      <Execution id="1c25e6d4-18e4-4a3c-ae08-bd7f721e80b0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8926aa7d-14c3-3602-dc95-b631b7d5ee27">
      <Execution id="120cad20-1b90-418c-b53c-c3f2e5273f4b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0447742d-4953-a3af-8cb6-d02b94ac240b">
      <Execution id="b8f514cc-9cb0-4fb1-bbfa-b70ef9b9466e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4d93fd39-d9af-0e56-4bc7-f51b250e0307">
      <Execution id="2a2a8941-b0a9-4f41-a56d-be59c73c83cb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff5e99fb-4a04-235c-d50d-9679c70b0b05">
      <Execution id="91591662-2abf-42e6-8ba2-7f19ab94477c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7f4945f6-205f-77ad-da12-74c532b9029c">
      <Execution id="0ea220ae-9b13-4be2-a4ce-e867edc62237" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Pr&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="21f40236-8846-0651-f72a-53dbdb3e6157">
      <Execution id="6938b243-c5be-49f5-b0ea-9e3075ad1c28" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Fails_WhenEditPositionKeyMissing" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b8b40f8a-9c7b-e0be-643a-a16dceea0a0e">
      <Execution id="afa0d255-f757-4451-8152-ea7bab4c4174" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests" name="TryGetFromImmutableDictionary_Fails_WhenEditPositionKeyMissing" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="01af7f90-3f66-e7c1-4ba1-8c19e14429a3">
      <Execution id="a5dc40ea-25bb-4e20-a277-ce0d97c1ea43" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="50770159-1f0a-0314-79b9-6013e27ddffe">
      <Execution id="c70275c6-2ad1-4800-b4cb-a932957e1800" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9df928f9-66c7-ba59-6de1-2d1c042a311a">
      <Execution id="2271080f-052e-4c5a-a5b6-7aab6b770a8e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleSystemTypes" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="40cb4b1c-9eca-d157-a4b1-5694df598862">
      <Execution id="fe6d7f23-302b-4f29-a3b9-c4fbd274c53f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleSystemTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a84a7e1c-3df3-0faf-6518-d4df30ea888f">
      <Execution id="74011d32-975a-4cbd-9aec-88da4e0f783b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="36852ca0-7987-11cc-6ca3-19ec05537536">
      <Execution id="ad91eeda-bb1d-4662-b151-39267093d9ed" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f09c5673-318f-626e-d11f-0ac2bf7c9301">
      <Execution id="c6e48e9c-c7cc-442b-8c17-87c4b81e1c8b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8b49317e-f629-5196-f117-429a98c3e1d1">
      <Execution id="66c09eae-8730-4136-8ba3-c8765d078759" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="35211655-17d0-9d3a-3ade-ad677bc93d8b">
      <Execution id="8a3138e3-9ef7-4712-bc73-e78eb4ea495e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="76016af8-30c3-be33-3174-7c28ea1aec62">
      <Execution id="980f0ba8-1872-47dc-a04b-9ec1ee2c1f72" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d10ce0a2-7793-e3e1-f49f-df2dcdd01162">
      <Execution id="98c3986c-000a-482d-bc91-26460af32601" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="029b3bd6-157d-b5c2-6bee-b24b5ef82a38">
      <Execution id="ff7f29a3-96f5-46bd-aa56-1d08db54913b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="82f31cb3-17dd-0086-da80-1486ad49d487">
      <Execution id="8ba96d4f-ce91-4cc5-9074-fdc3c8ae3fe4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2987fec6-cb02-fe93-77e1-bac00bd29d21">
      <Execution id="32a000b2-b41b-41b5-9367-73e24dec3e77" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="96c58096-7f90-45cd-955c-5a4016af87d1">
      <Execution id="e719f5d2-6368-489b-b7e9-5a33fea1fd18" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="69140cf6-b12f-82de-93e7-f78e85c1bf76">
      <Execution id="0c6796d2-fbaa-4502-b041-a4e1bb44efeb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8b2f67c3-dad5-943c-db20-750c00ec3f10">
      <Execution id="fb79ac34-d109-433d-a910-cdb0147fc5cb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b9832d23-c2dc-e00a-0b9a-980a2b238730">
      <Execution id="df5bac3a-3a04-4725-9307-a13c42c425f9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectBuiltInSealedTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupRemov&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="80b61061-d617-e43e-8bf6-ffe6bf06d326">
      <Execution id="fef55031-6372-4ead-b3b7-7fe695683d5b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ee6d3f10-ea5d-353a-7895-33eb774d68d2">
      <Execution id="12749515-5bcd-49fd-8bf1-7bb7cefcf7da" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="996bbd72-2fc2-c5c4-baa7-a248176bcb3b">
      <Execution id="bb67cbd4-0f57-4852-91dd-cc0049a838a2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6bf33806-4140-93ed-2eee-60288d8a0b65">
      <Execution id="0aeed2d5-9c79-450c-a875-f131f8bb8c02" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="deb05467-e0f5-6998-bc66-831a8929abb8">
      <Execution id="e8b2e5c4-1224-46d9-a2dc-21be9ad572fe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="916bd290-0ab9-fe4e-b092-45bd9cd2ed00">
      <Execution id="2ed457c5-8fce-4586-a8ad-bb26b5518d1c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="51871a82-043e-bbdc-6bb9-dc80514a6346">
      <Execution id="3fbcf99e-7c0b-4b44-8b41-af6d04e71a10" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="204c66c9-c5f4-97b4-2d24-46bb9392add7">
      <Execution id="58a9ca81-28a6-4746-930e-cac54fc766aa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a63ff25c-438d-506a-588d-92ddb71d6638">
      <Execution id="33fc88fe-b33b-4995-ae15-e026ce6ed822" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6de6128b-db30-f260-2b88-12d1ff74aa8b">
      <Execution id="36809bdb-ed2d-4f08-aea1-d3e12b5083ef" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Pro&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a86ae657-5203-7779-4ef1-7357b169da83">
      <Execution id="b6688077-33bc-4755-a034-a406edfc8120" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="aa2d1a39-7bc5-69c3-03dd-bc258810475a">
      <Execution id="5cf5051c-0663-45cb-b6b0-2c2e0725c69a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3b63aa8f-9f86-158f-600a-85e113f587d1">
      <Execution id="4c976885-d54e-420c-b668-6cfdd7aea12e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ce53d3ed-6960-e485-7f33-9e008be2529f">
      <Execution id="d13694c9-e7bb-4815-b45e-9bd72c2990c5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f75df37b-431e-5ae9-1643-dd2e056de097">
      <Execution id="bc711550-7d1a-4857-ad45-c093d7a9a012" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c1e34a92-c989-1a14-a54a-907fe734d090">
      <Execution id="2cbd828c-bf2a-4416-a3d8-14b00a34aa52" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5d1c5ed4-1def-55a3-7572-05d0b55b42e0">
      <Execution id="ad902db3-79f6-47f1-8891-6f6b76497753" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="58f19209-38c6-7645-e846-6a5abd05b6d4">
      <Execution id="bb91fad6-b0f2-43ff-b39a-03199ee659e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_String_ThrowsArgumentNullException_WhenPredicateIsNull" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="58e81949-d3a9-f68b-aaf9-7a88843f92f0">
      <Execution id="5b00d56c-55e6-4ef6-a962-f36d9d89ece8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArray_String_ThrowsArgumentNullException_WhenPredicateIsNull" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e5c528f0-3d85-4adc-6e97-b5dbae4e91f2">
      <Execution id="052e2b85-fcc3-4d64-899a-6463f5d7787f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Fie&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ea22b0e8-67d7-fa78-f883-820a22f6f302">
      <Execution id="bc8e0e0e-ece1-45a6-8617-091f204def9e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="21a40027-fbfe-26b9-f62c-d2efb771872d">
      <Execution id="393f7365-e729-439f-9cc1-c90f7d919ec1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="86e608cc-05c7-e7f5-6a44-fba699d72b14">
      <Execution id="7c63d152-2502-4a9a-9c58-1acb5639b8d7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ee213223-fcdc-b8b1-8432-9d43b211917e">
      <Execution id="9ccf428e-5cae-4d19-98cc-26d6a7a3a4b3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b3831554-d598-a4f2-3772-3d9dfdd985fe">
      <Execution id="5767a285-6426-4fcd-9e4e-ffaf511c0650" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9f96f86f-05a1-4871-bad8-bfef2eb50f7c">
      <Execution id="34a5ffc4-b1a6-4c35-a659-d76646173910" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1ed41a3a-44cc-593e-e104-426128ec5b3d">
      <Execution id="77f92a3d-8277-43ed-a79b-ba10d6439d45" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="25493034-5dbd-c0bc-638d-4771a3382808">
      <Execution id="87142895-0592-4cb2-80ed-6f62056154cc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="20ac565f-992c-dba6-3104-9c7f63b8e0d8">
      <Execution id="4f3c84cb-dfcc-44ac-b697-25aae8ce1d05" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="abde3b24-a138-e11f-ff2a-f048d722f45b">
      <Execution id="b9e5815c-6a5e-4161-8622-d0d4b1ee6487" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualMethodVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IIndexerInterface&gt;().Setup(x =&gt; x[0]);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a1878a49-0be7-d056-2556-a53e6ed0c5cb">
      <Execution id="1126fdf8-2e66-4242-91b5-7b4e110c2f8d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupRemove(x =&gt; x.StringEvent -= It.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1000a059-d92a-607d-e7d0-1a682556e8ed">
      <Execution id="97e59bda-703c-46be-b669-f5950e8b8b59" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f62af25d-628e-4ab3-3d02-dc09b355b702">
      <Execution id="a8f1d933-cbd4-406d-be77-8f46b717f578" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f96dba91-df78-49a7-f741-7f6aaf00b872">
      <Execution id="4eeb5ef1-63f4-4b72-80e9-019bdfbdfb66" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="82aca4de-db00-0f05-0677-f236c2fbf3a9">
      <Execution id="16824a43-3918-412f-9ebe-444b6ff3730c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8d4d824c-5ea9-f09d-78c9-c31df08da8bc">
      <Execution id="708577c8-15e3-4ecb-99c2-ef20464b412f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8a2aa2a6-6829-4e84-817f-455d337a4b67">
      <Execution id="34eaa64b-09e1-4e52-9cde-af3aa65b5053" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="da1d09d1-a5ee-29af-4a32-dfa145c35742">
      <Execution id="cc5083da-37b8-4660-a10a-a9206386e398" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ecf321dc-fd20-aa30-d5c5-dcb9fede659a">
      <Execution id="c2515558-fc02-49f9-bb5f-64fa8aa41588" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="89a0c3eb-9a10-c13f-0420-5b95f1779695">
      <Execution id="9560cad4-be18-46c2-b2c7-5fffd97b1871" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ae886758-9c66-3994-3702-dc0c66a63964">
      <Execution id="ecea5b1a-ea14-48e3-9cd2-dd2b399948a7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="238a34b9-ca85-a62e-3c1b-8b7555a106a7">
      <Execution id="1167980b-cf54-4f72-b38b-ee780be0701a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b2cafd04-dbbb-aa4b-16d8-599f3cd6c2ab">
      <Execution id="48c64972-82fb-4fff-8705-d8d2bcdeb7e7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="20c97ea1-bd73-b0d1-366d-989bcfa7c0ee">
      <Execution id="d10f5596-d8e9-4c68-b14f-ce2058f4a91a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="68c60298-6dac-6ae5-4e97-e234c732dbda">
      <Execution id="a7c3429b-445b-4d76-88df-0d7b0a0374b0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0608f51b-eecc-4e8f-f8e6-4d630ce983f6">
      <Execution id="ac34173f-a7a1-40c8-be34-8dbee7f983a3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.DoSomething&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1fa64a88-170f-e7ed-e766-2f9ac0e045ac">
      <Execution id="65e3e65c-fb9a-42dd-baa2-0edf9ff5f2f8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3ca07d40-46d0-b75e-f1b6-40485dced7bf">
      <Execution id="d335b738-b224-4bbf-b007-f7da183461e9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifySet(x =&gt; { x.Te&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fad3e3fd-d405-0d7c-3d8c-dcfb02a8ad60">
      <Execution id="915a99ec-b601-4c02-ac74-86f3ed761a5a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ec333ae4-d65d-d173-5113-dc8124154ee5">
      <Execution id="a0f83c4e-9c99-4a95-b52a-911fa1b1b007" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="24b6cda1-ad91-55bb-4a6a-cac5f2078521">
      <Execution id="9805b118-d4e6-49ea-8d13-f97e9b8383e9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4786dc12-4493-b47f-ad7a-3e2886a07228">
      <Execution id="4dc0bd91-8f6d-459c-b4a5-a3038094beba" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2c383821-751d-3537-0fca-97f694f420b9">
      <Execution id="f5980f19-9c7c-4712-90f8-3779122a9c4e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="383c0209-3a8c-6c13-1ad2-1a4e0e7f0d0d">
      <Execution id="cf6e10d8-c00c-4765-85d0-688964005b9c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="91ee4c58-379e-4809-0012-5d644f69ae03">
      <Execution id="39b3604a-0795-412c-8182-16ebde8e7b6b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="09f97e3b-0a2a-9c3c-4c6a-04d143a3ea08">
      <Execution id="2768a54c-335a-4c4e-9ef5-6324a5e22977" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1d0b25b3-5c07-0a7e-a6af-d2a3fc39575e">
      <Execution id="e5683700-d12e-4ea8-a678-e301c640b68c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1f4210ec-0655-28e9-2ccb-ff891b7ba0c4">
      <Execution id="8c4c362a-d1ea-45f3-91b0-1f0171de0ee7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="109c4c24-f41f-a4ef-27a2-69c90a24bfca">
      <Execution id="963cc73e-b79d-4fe2-80b4-d344e2d03afe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7a986896-84dd-38c7-3f2f-1056e939f372">
      <Execution id="f0d3417c-1a27-4ed6-a6dc-7edb1867b10c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bef2d3f3-b340-bdb5-c754-1671ca328f9e">
      <Execution id="761c9a40-84d1-4bfd-8b85-d3a98858234d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IExplicitInterface&gt;().Setup(x =&gt; ((IExpli&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ae3f61b9-7466-23e1-34d3-fcdc76d9d293">
      <Execution id="0ae108a3-71bf-4175-bb0a-06b3e38a4e50" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="02501572-be45-5f55-62eb-e470d85df547">
      <Execution id="0acb5423-8974-47aa-b7fe-b15ff794ab63" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dcd1422b-84e8-7c60-4422-d64816df66a9">
      <Execution id="258a9575-4bfb-4ce8-9c97-4d1ad7712c2a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e84dbdbf-65d6-5843-0fd2-43cf7edc90ff">
      <Execution id="b30e422f-3556-45ff-b30c-013edb0e2b32" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ca27b2d3-77be-7038-14f1-fbf5dcdc8eea">
      <Execution id="863e2865-7f07-41d8-8b66-f2b939988175" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsEmpty" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="70c6622c-42c6-d83a-2b8d-fd7b9d7203bf">
      <Execution id="d6cb84a0-2892-4bba-9961-a739447e203d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ReturnsNull_WhenSourceIsEmpty" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d7db2dbb-4f46-ad50-1386-97abb1f1d487">
      <Execution id="9c910f79-0129-4660-bc4a-373af4510ebf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e171d48d-ebfc-79d6-4dab-e109afd22556">
      <Execution id="aa17d9d3-68eb-4d4b-9454-74d8b6ca2510" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="42321baa-4c22-10a6-f719-62c4ebe46d78">
      <Execution id="d3f9beb5-4cca-404c-86e7-7e71297b7778" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ad16889a-5d98-9d6d-a002-d16fe35c8efc">
      <Execution id="c025e8af-5719-4e47-954f-75fbdc6ab8c3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="691cb344-acf8-07d9-149f-4d10c8531e03">
      <Execution id="e4957808-b830-4860-8ee9-0dfde887c8ee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5b750fb3-57bc-8cc7-7834-5adc48d2a347">
      <Execution id="d0c5f443-0c65-4960-bc76-b8c35ce1b247" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="327a8bcf-5641-88ce-f631-89a2acd1fed4">
      <Execution id="3c07bd0d-45e8-4d08-935b-04e4d51629d0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="568c05cc-fd22-d82f-c907-dd0ed3613f78">
      <Execution id="46ea9d3b-e892-4818-b8f5-0efda5a0d196" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="31cde91e-588b-b246-fe6d-8cc9d6699771">
      <Execution id="6046bc8c-29df-44bc-9ff6-5f828ffc5fac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9d8481b6-f221-7d79-7288-d444986416bd">
      <Execution id="6782370b-00b8-416a-89c6-97b6857ce7d3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="627a1a20-1cfe-bf9b-e958-d12fc7f814fd">
      <Execution id="33a101c1-0f72-4f0b-8632-7356ee9bb7f6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="934805b1-b38d-1073-4ab2-dfb73ae589c4">
      <Execution id="59fb4833-9802-4406-a800-e6e6096d6bac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldNotProduceDiagnosticsForInterfaceWhenSuppressed" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a0b2bcae-4dc7-5018-19cc-990e79f815f7">
      <Execution id="a17bf099-effb-4c4a-95a8-046f29779f46" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldNotProduceDiagnosticsForInterfaceWhenSuppressed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="718f286e-633a-cfe6-3b5c-f3100dc84e00">
      <Execution id="987264ef-9383-400e-9332-fbec647ced8b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualMethodVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="84c8556b-f7bf-25ea-657a-103bafa8f887">
      <Execution id="58f640c7-bec3-4a3d-b206-cb580efb569f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1a0c9143-e66b-b7a3-35e1-dc372686090e">
      <Execution id="0555adc5-fc34-48aa-929c-bf6689174263" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="da468cfe-4e8b-e49d-3ff3-dffe77f73f3b">
      <Execution id="7abd64db-5dc9-41b6-aae1-95afdbf23d34" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="47131d00-d047-d99e-b755-9c87e2486502">
      <Execution id="3d7ad835-5e8d-4f44-9feb-6ab90677e4aa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Loo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="662c40b5-7649-daca-4b6a-4e48ecfd8be4">
      <Execution id="c9c1b01e-c6a9-46bc-8cd6-6159cc175a96" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.SimpleEvent += It.IsA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="41a9182b-cfa7-295e-890d-ead8fdd0909d">
      <Execution id="5a9c914a-0f54-43b1-b75d-d4b51e3f4c05" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3c5849ff-ab44-bcf1-20a3-5a69ab45425f">
      <Execution id="0592bfc5-43db-4c6e-b82a-88229d25ab69" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="deda012f-6b0e-0756-54d2-3a60970e92bd">
      <Execution id="a36b90fc-0a26-42a4-ae3d-e7a7fefcf3a5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d5de3a36-3090-91ac-4d70-52e329fb7093">
      <Execution id="5e9d6267-6111-45ce-936f-56e5daae0799" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForVirtualMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f6f9a63a-1e58-1b4a-20cd-7f6856c737dc">
      <Execution id="da08f9df-78af-47a4-bda7-afa7c341e0aa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForVirtualMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0f3942e4-ae3d-5f54-a6c8-4b9521f839bb">
      <Execution id="bb05f265-84b3-4dd3-8ee4-3da5a8d7cbc7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc82fd6b-5128-0bab-b357-91f15f7a8200">
      <Execution id="4d356001-baa1-4b3c-afe7-adc49e01b6dd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="212fe0f5-07bc-9e5a-3ed1-ee14d70a6a66">
      <Execution id="2a824989-5552-4e65-88fe-6b9e7db6dbce" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="03fb83bc-37f9-6279-d552-6ab92fdeaf0c">
      <Execution id="d4ceb8a2-9d92-4808-89f3-551df8e0cacc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3faf4abb-5d4f-28d3-227e-0c526e53f977">
      <Execution id="87b4a13d-60bc-4a5f-8ce7-13f6bd63a284" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="83bf5aaa-2d46-3b5f-d348-d63267b1adfb">
      <Execution id="33144cc7-7e50-4e55-aaf6-c3240d82b4ed" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c3189fe3-b3ff-36cd-e2ca-dc0c6f0d4877">
      <Execution id="fcbd5cd3-c807-4034-8357-1878782b208b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9a01244b-6f15-7249-8ea9-1f58189bbfc1">
      <Execution id="13a9ed3c-dab1-41b2-97fc-6127317fa1db" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="acdf70b8-acf9-91ec-b576-e125c6a8c896">
      <Execution id="75fae315-9830-4cee-bded-36c19ef2da3d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b7975642-cea0-bf2a-d0d9-d2b4c7142bdc">
      <Execution id="4db96de5-d679-4757-bf38-be3e5c5c1f99" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="91906b72-9217-f3d2-9c30-6dc33b380aff">
      <Execution id="c22da795-f50a-413e-99d0-735393911d59" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="73c97c1f-f678-cca6-fbf7-c7f87628113b">
      <Execution id="456a089e-ac3c-4cf6-8dd9-e8c7ace1f920" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fdde1ca8-5a4e-1fb8-4037-ad6ae3e468ae">
      <Execution id="c8b3ea35-1a25-4d0e-bfa8-f5cda67582c2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="229e9b16-e733-9d49-76a6-5f3e08da7955">
      <Execution id="16ddc6a8-29a2-440c-beac-0e3e73ad3264" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="13494a85-1328-4d20-6b77-1403a1326ea9">
      <Execution id="9c5afd03-32c7-4481-9966-365a0c6e285b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fc516c4a-cbc6-591d-4131-0c15440ddcb3">
      <Execution id="936ac37a-67c9-410e-aa92-13b5a6d614f1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IInternalInterface&gt;(MockBehavi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="92d2c55c-198d-0d74-5c9b-dde45de3c1a0">
      <Execution id="d8419c3d-9cae-4dec-8d96-df74ff7f7118" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="72668e72-fc62-2889-87a9-6c5783426c9a">
      <Execution id="d2d2c5a2-f700-4349-8ee5-4c217d81f726" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock6 = new Mock&lt;IMyService&gt;(MockBehavior.Loos&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d807e89b-ed9e-f280-c741-aff0f94d4b01">
      <Execution id="fc34a8e4-21ee-4c1b-8fd1-87103cb1674e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceContainsMultipleElements" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fcf1b20d-df6f-a0af-be8a-1fd84c3700e3">
      <Execution id="a6bdb01c-99cb-4c5a-99a9-070dde4487dc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ReturnsNull_WhenSourceContainsMultipleElements" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="59dab297-8ce3-a71b-ab66-0174b4e5293e">
      <Execution id="d94fb72c-46db-488f-b32a-5d866a211256" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7afdd8e5-1781-3fc2-086a-a21e44777dfd">
      <Execution id="f9b2cf01-2b24-4cbe-944c-87f789898de4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9b8540ed-99d0-8d90-8c0a-93cf07afe4f0">
      <Execution id="40ee702f-c2fa-49bd-9869-7a508d64d198" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7918fed1-bdaf-4489-95cd-1e2b7c6c4c09">
      <Execution id="b395d7c7-7c01-4300-b2f0-6529e1fc4242" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1191b40c-1b4c-d64b-07cd-72db1033e655">
      <Execution id="5b97310d-43a2-495d-8890-9a75a88d028c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c9d05762-19ce-c3a9-04fb-f0917fd9072f">
      <Execution id="4ee0b3d4-c888-4258-8605-52aaaf81317a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8dec5d6d-6bf1-1f24-6b9a-267ed757f0ae">
      <Execution id="01b101e4-6dc5-4e50-adcb-febd62e08145" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3106dae9-acb9-b105-e6c4-ec89d20fa9f8">
      <Execution id="1a37d609-aad3-497c-90b7-ab23170c267a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6e56e7bb-c7f7-557a-4af5-065d6d406887">
      <Execution id="621813a1-2ac2-40b9-b18a-96e2b1e299b5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="60c8935b-2e3c-e621-7459-1958f11e67e6">
      <Execution id="f864fee2-4e8b-4c41-bbcb-4815d8c3f5cb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="223186f7-4a40-43ff-9c08-2f534aa4ba65">
      <Execution id="f9ec047e-6a54-4e92-ac90-a4c67c9cb9fe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b4304a90-2046-7e2e-0654-fdc0fc4059f1">
      <Execution id="f3094ee0-e106-49d1-89dd-e48d6134b9ad" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true, MockBehavior.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a0a30046-4ea8-3d94-2b8e-0a8a2861fc61">
      <Execution id="29f484f7-92e9-4ae7-95b4-0138122fcbd3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3a92fab6-3431-8641-33a3-8262921c2731">
      <Execution id="4bc9499f-b8da-4b88-be1c-74a65b256003" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6db87122-a9cd-864f-f91e-3c0be3dae264">
      <Execution id="8abad3ee-e51b-4e6b-9061-05cf329b540d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="629ba4d4-88f3-c31d-adeb-514489f4443f">
      <Execution id="7b8ce3d5-57c2-4bc9-82bd-fd2f47ea4dac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var empty = string.Empty;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="39fc2afc-2956-5f42-cead-5c9e3515b662">
      <Execution id="90272196-5ecc-41ab-b910-9d37fc1c96a0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f0f96a12-5525-0627-48c0-da5aa4fa9858">
      <Execution id="89a09d91-3897-4a3b-81da-4f674b5b42e6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="87806d17-b69c-e960-cfda-1a55d4fc7f2b">
      <Execution id="70553cee-dea6-4314-af7d-bcba9da8139a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7d720a71-0e27-2b73-7c8c-964981e5abdc">
      <Execution id="fed5434e-7db4-4e28-8d7b-db6b6837c918" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2318b3aa-21e9-d2bb-a4f3-94b811d9ee31">
      <Execution id="15dd60b9-d323-4690-b5d9-a834aa0cf0ad" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3494b454-f14e-f23a-226c-c60b125760ec">
      <Execution id="be2df73c-0bbd-4e8c-8e20-60defe1b86be" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d9bcc0fc-ff6c-e48b-fd4d-2c27d60b6764">
      <Execution id="343b7b03-9ae6-444d-b79c-74805419f438" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="86ba5fec-af48-033a-e445-2a1330408bbe">
      <Execution id="8dfb9e32-6f3d-4025-bca7-31d808936871" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1179012f-4069-da18-82d8-cb10463d5da9">
      <Execution id="0b856f06-5fbb-40c7-bd1c-eaa0cb74f35d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7dae86ea-4bc8-e516-895e-61d82871e56c">
      <Execution id="20514737-6953-46ac-8f16-c75bf99100d2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9b518aae-b6a6-dd33-f348-4d3e79379785">
      <Execution id="a6463a67-e26e-4560-b09c-e42bcc9e560f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9e3c042a-3a90-ee8c-eada-b894b45bb9b3">
      <Execution id="1a009dc5-5f94-45d6-8e7f-31a85503ca15" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c163347c-23a3-0cc4-733f-f8372db5eee3">
      <Execution id="97954925-5f6e-4c93-a1ff-e6b6d4877fca" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="49947d05-edab-7e73-0114-36596eba2224">
      <Execution id="f6aa58b0-b78e-4a35-bfa4-e2a583660b3c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="123186ad-e013-63a6-13fe-134c8b92d959">
      <Execution id="7ab5aa68-0d2e-4b0d-842d-2d065cc27edf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d13a68da-ee97-e194-e8f8-9d3029c353be">
      <Execution id="1bcab23a-4666-4d89-8ae5-acc7a5061315" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7067aaa8-d6f8-45b0-0ab0-39fb4ba424a5">
      <Execution id="025de8e6-7a6e-45b1-8b51-69a0ef05a5c1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b03bbbb9-582b-1504-0890-30fb2dd5e5c7">
      <Execution id="1e69c3d5-79aa-47dc-bcc6-41eb308632d5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dbf839f3-1b29-ad47-2497-a4856b2cdb88">
      <Execution id="737397de-a6c7-4c39-b2ba-69b64e4a70ae" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c340976a-6bc1-14f5-d06e-05fec36cb01d">
      <Execution id="bd7d3e81-ac72-41f0-90eb-5c89dde795bf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b03df8a0-c18d-3b80-0fee-91e020f92e19">
      <Execution id="6b20baa7-3067-4646-b087-a6de8a34c935" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="453ee420-0b7b-27c4-aef3-03698ce46a66">
      <Execution id="14231bb3-6440-4bdf-9e18-c0de990b58d8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e9f46646-851a-a6ce-04eb-33329a678952">
      <Execution id="e958cac8-f851-4209-9508-35daba362144" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f9d4b76b-7d45-81a3-f33c-91314ba6e7d7">
      <Execution id="18a6a5f4-c82b-4e06-9d8a-13201b4c9c24" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a44eebad-ab3b-399f-b9d3-0a1c1c7c3b76">
      <Execution id="f9d4a2db-af94-48eb-a6ff-a22360fafcfb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a1370a40-2257-15d8-a79c-e0b0066172e8">
      <Execution id="2b524b75-ba1c-40b9-8b91-875ee8029bfb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualPropertyVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="88b4fbd9-0da6-3423-43dd-b294282f6a10">
      <Execution id="cd5bc77f-4df9-4876-a87e-0aaea1d25690" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d3324c82-ef5a-5fdb-6786-34dee5cc16b5">
      <Execution id="acdb8802-3db2-4e2a-a781-e7f39e3fab82" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f5940400-13c1-9a50-64cc-9687d18a2d77">
      <Execution id="5a967978-0344-4e6b-9b16-aeccc6bd32c4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="524f1c05-395a-c632-0e3f-df5d09042de5">
      <Execution id="646b839b-2842-4eaa-bc10-81b2fe4dfd5c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;{|Moq1204:mockProvider.Setup(x =&gt; x.Submit()).Rais&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4d4ab1bf-cb73-9c16-9550-622b2abef17d">
      <Execution id="5b7db3ad-606a-4ea7-85f0-2574f05416b1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="516eb29d-a59c-e9aa-9ddb-a47176b98da7">
      <Execution id="70f6c6ba-2b6a-4623-8842-b59175dd2ae9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4f367724-eaec-b988-a9ca-1ed7c93db689">
      <Execution id="d323233e-78ac-41de-b3a9-8b4735a59002" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.GetNumb&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="94d077aa-42a9-02df-cedb-9f6304760e13">
      <Execution id="0bc5c7d8-10ac-411b-bce0-454aa26c1145" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6c541383-90dc-59ed-8808-2c2e8425d067">
      <Execution id="fb4c2091-10b6-4a46-a749-58ad829d316d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8a17e300-168b-d101-1a2e-de6c626fe847">
      <Execution id="15808004-3393-410f-8124-954df160a175" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6e7729c5-617e-0f4f-f7ab-81a3ffcef53e">
      <Execution id="cb1c7e96-2c2d-46f7-9c6d-8f33efeebd56" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b2271c98-188c-59ba-4ac9-df20dab1ba92">
      <Execution id="2adef22b-10f7-4ef3-8327-2d514b1c56e0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;()|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b505519e-fb67-589f-12a8-06cb93dc97aa">
      <Execution id="864fdcfd-b3fc-4658-91c6-11c373a88182" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8d21d2f5-8e0e-87b4-2d67-1c020421398e">
      <Execution id="3208660a-c44b-402e-90c2-e23264cfb35e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="76c7c833-e888-90e8-f7e0-15d4a8e6ab68">
      <Execution id="8a5e04db-d700-49c1-9714-1c9bac3d7cac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="05733545-ef12-a259-6f38-d98c4b065ae2">
      <Execution id="9250907e-df15-4e86-b6c4-4f2358bd7478" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="034ec99f-dcff-68b1-9509-2a7c0a129012">
      <Execution id="861cb834-4a9c-41d9-ba62-fc0febc45db0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="af814600-d603-4f5d-41ed-02c12a0801a6">
      <Execution id="852dbc11-5bb9-41ca-aa89-fcab68d0f1da" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b80e90c6-9437-86e4-2ef5-0954bf360175">
      <Execution id="8ddb9e3f-d3f0-43f6-9f39-373bef998ce3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomDelegate += It.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bf9c3327-85e4-95a6-77a1-c0afeaa52df1">
      <Execution id="72343e18-c9f6-4185-9692-d4e720da21f7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5bce120d-2bec-60a1-09a1-2035b6372cbe">
      <Execution id="75ade1a5-e971-484a-8204-3a83dad4d2ad" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9b0db6f4-72e7-8cf4-fa32-70d2e9331a98">
      <Execution id="f49fbbe3-d418-4656-a96d-aaf5d90ed04f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="036ccef3-040e-eef8-14e5-37e9e043c709">
      <Execution id="1e4d9781-e3e1-4f25-83bd-f8786b1697e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d939777f-90e3-6a2b-692c-bbdabe037a2c">
      <Execution id="4efa7f80-ce58-4f60-ace2-5301d7ce1119" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="635aaa3a-d93f-fa5b-1fe8-c6cf66c7eb93">
      <Execution id="3eae7340-b47a-42e6-b06c-0e017dc74be2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="930013f6-6feb-ee30-c736-6987277d9cd3">
      <Execution id="41dc391e-41df-4c55-ba2a-9b37a8a966ba" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0b1fa43b-9919-2bb1-47e5-b81001e3486e">
      <Execution id="88866a16-505e-4ffa-9409-138c86725f1b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="42b06cc7-95be-f03b-5c7f-ff36df7b8df6">
      <Execution id="3d41412c-44cb-4d21-8081-9850b4a64aed" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForAbstractMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="62c282eb-67ed-4e35-2284-c84a21d048ac">
      <Execution id="fc208381-84f8-4222-a780-3bbac40d5a9d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForAbstractMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1c0f8c1e-c5e8-5cc4-0233-51e9e8f0a968">
      <Execution id="79fff83f-cc00-4087-b7ea-6e8f96e385c1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock4 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="50592609-d81f-a345-f819-7592ec4a8571">
      <Execution id="cc71eed9-df01-4d89-9b04-1d6839bc62eb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldFailIsRealMoqIsUsedWithInvalidParameters" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9da1c174-f43b-ddb0-375a-8efb38762c05">
      <Execution id="ed4efeac-2086-4e51-a488-e8366c84c86e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ccc9f5ee-fb74-9bc8-5c31-ffd4a302ad49">
      <Execution id="dc3e576b-5b83-48fb-b183-bdf459ce5f1d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6c295b81-d7e6-a35a-5bf2-1c516a2fdc4d">
      <Execution id="55af70e2-4d7d-4cfb-b358-8e7e52eab659" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fa407d98-f7d0-6cf0-35d3-bb9bebdf537c">
      <Execution id="66061ad5-cfff-45d9-ab16-fd0ccd69f93a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="78826fd7-3ad2-e401-6c6a-b38f3eec38bb">
      <Execution id="8d7c3e32-b644-4d1b-b31e-cfb4c2939d34" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e8383dbb-e46e-baed-720b-b98cb8845b3d">
      <Execution id="ae2033ca-35c2-4f95-87bf-7ab701f68307" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="100a3f0f-be9c-3b9e-8d66-32f58e52f949">
      <Execution id="3e25850a-7e58-4156-95c3-1b9eb273e4b1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4a323416-0f86-ab8d-3b5b-f7aa16a25f2a">
      <Execution id="81d80770-813f-4646-b26d-fbfece8f3eb8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5ea2d559-c45e-da14-9519-e9191f742ea7">
      <Execution id="7d5a8663-defe-46f1-82dc-f3659f0e83b1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualIndexer&gt;().Setup(x &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f088fd21-c378-83ea-f387-7c5ce49d58d9">
      <Execution id="ef7d51ee-ab55-4e1c-b6f9-4cab19964cc4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="081ed490-34c1-0646-5886-3cbc33372286">
      <Execution id="3208b462-39d0-4dd5-869e-c5c42c0fe488" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9c7c701e-5336-659b-030a-04afc9dd817e">
      <Execution id="65fb2f4d-2443-455a-bff6-403305501b89" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="044335f7-ccf6-4dbe-e4c9-dd5cee98e87d">
      <Execution id="73f25764-918c-4651-8c41-45843885cd79" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="60c6d850-38d5-2bfd-6058-0f088f11d74d">
      <Execution id="70d9c996-cb9f-49ea-872c-6455088a28ae" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="df8d35b2-59ee-479c-1f46-6fab45d2c7b0">
      <Execution id="6702b59b-ff7e-456a-a27a-76d417d31ef5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e205d390-9a19-5469-e9ec-39da420a0010">
      <Execution id="5c488291-7b5d-4099-8494-65c176b4bc00" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="83847d44-2753-ea3d-f588-b3f956aa037b">
      <Execution id="86639ec3-db2c-4933-99a1-635901732beb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="56fe3143-9052-3d95-38d5-868cd5745e32">
      <Execution id="f8194dc1-683f-419b-b458-077be4b93bd8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="df508473-adda-9053-f311-ac9fb8171143">
      <Execution id="a06dfcea-7197-42f0-a19b-d6a7014a191f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c2edd9c1-f96e-115a-c464-98fa8ca8e6e3">
      <Execution id="a2e1c130-97a0-46d5-be6f-b5c9c2ac09a1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f1ca1a76-5275-22fb-aeec-914faf525052">
      <Execution id="a25c6110-1d27-4424-8bcc-7378d0188ca0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b1492953-5fbb-40d8-8c7f-5afc51e9c443">
      <Execution id="9bdc66a0-4a32-4681-8d7b-635bc58f44e1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3b0112e2-05f0-738e-f54d-bb04b512bb8f">
      <Execution id="33be172d-ff7b-45ef-9758-7912c8b5553a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7bc50878-a03f-67ee-ce3e-d0ee490643ae">
      <Execution id="e670ca9a-31bf-426f-bc8e-91ca68ea2182" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fa92dfd5-4824-4788-bcfb-b05bdc42d3bc">
      <Execution id="c51dd135-6878-4bd6-9dbc-ab03ae0058d9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new SealedClass();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3a2cc97f-c20d-d4a3-580b-34db605a5e07">
      <Execution id="44edf9c3-85f8-4f8e-93ab-c459513e6956" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e2d8b9c0-7e3b-490e-77a4-9bfc5c4a33f3">
      <Execution id="5ed90392-237f-4695-a0ec-99d89bd7794f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="09dc2407-3e60-4cc0-319c-334426f99aef">
      <Execution id="02978061-cf34-43d0-887d-4623869344c6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9d4550af-8126-3e8b-7f27-9049f4b76998">
      <Execution id="2756e60e-49f9-446f-989b-47fad1af205c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7ef5f66e-60cc-befb-714f-f3550c6ef073">
      <Execution id="dfbd20f6-31ca-4cf1-b376-ee446502e39b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldProduceDiagnosticsForInterfaceWithConstructorArgs" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="90c96183-3cd0-55e4-c78f-f771d09d06c5">
      <Execution id="0e07c8ed-e454-46be-9478-55c1779c7640" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldProduceDiagnosticsForInterfaceWithConstructorArgs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd5cbbc8-ee2c-b5ef-0a44-bc90c05fe183">
      <Execution id="665f3974-000c-490e-996c-e2c4aaccebc0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock2 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c8bce6de-69a0-d3ef-583c-aee1c6e23564">
      <Execution id="0fe04644-1ae0-4514-afa6-c1a99a23b6d6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8d6e4ebd-9b86-8325-016f-25e77d3b534c">
      <Execution id="bdf93e85-6b8d-4209-98c5-6e1d1eef7766" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="287661b4-44d3-57df-3bcc-bb53d4328cfb">
      <Execution id="da770ceb-5bdc-43ec-a91e-c1cbffef1d8e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e0ae0ffa-b00b-cf15-e137-d044388a5bc4">
      <Execution id="0fa815ed-1942-4d2e-a3e5-15394033a52a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new System.Collections.Generic.List&lt;Mock&lt;SealedCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="25440e48-7e58-8e1a-ca5a-0980f370ec08">
      <Execution id="76bd1e2c-de34-4a7b-b7de-5f3bd6f9d7a9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1b154159-e5b9-06e6-f7e9-33b39bf21bd0">
      <Execution id="087222a9-76a1-42ea-9ac8-bc58bd2a2868" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithSuppressMessage(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3195319b-151c-4203-cd8e-17304e583e95">
      <Execution id="d2301042-e8f7-439b-890c-de6c6378eae1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledWithSuppressMessage" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5095ff7a-f563-0c42-25a7-ef992dc11ded">
      <Execution id="b98540b3-fcf7-4ee2-8a77-4c9c3309dbff" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5f06068f-1770-94f8-d8c6-ee50be6e44c7">
      <Execution id="9cd40fc0-c978-4103-9550-65ee0e6612fa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6b6fb377-0429-3912-ea82-b753fe67fff0">
      <Execution id="39dbda33-9f70-4af6-ab5b-c3363b23f284" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="92f5ca24-f275-d531-55d3-c3dc0a260389">
      <Execution id="7e3ca995-79c1-4179-a0a5-bff106acf99d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="14f7ee72-36f2-1b05-ad35-0fa12232daaa">
      <Execution id="017539b2-d8dd-47f7-88d7-130bbc4f0d8e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c842967e-f057-70fe-949b-010be537e625">
      <Execution id="3cc2f3e7-6364-48a9-9d7e-3850e2fdccd7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7e59820f-dadc-96cd-6dd0-8ad0886178f5">
      <Execution id="f1bae8ee-065c-49c0-bdba-d147d30a4dbf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a39c0351-7c2d-5b35-756f-0821070b3e4c">
      <Execution id="779ffa43-0e6f-4449-b36a-d3549dc12480" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1374a7ae-ee43-4141-716a-e6c49614136c">
      <Execution id="e12443db-0a68-4b91-9015-c87d9f2fdf22" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b0245461-cf9e-ce5c-f8eb-6950672ef88e">
      <Execution id="a8fa3514-f4c8-42ce-bf71-38fd6ef48b70" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="29b9f04c-3d2c-e7d2-c6bf-8dd894da511f">
      <Execution id="7334f84e-8164-4c26-8186-5aecbd9fd2eb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e5ac1d91-1d4e-960e-6ac5-4e5aa862d654">
      <Execution id="8d548786-c3fd-4e43-b8b9-13f8ae164ecd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.DoSomething&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b37c3bc1-14e0-1fd6-6603-145e64db0863">
      <Execution id="8c6d631a-ca9d-4a98-9423-57ed8f178b36" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ac9593df-ed58-d69d-e43a-61ed71f31408">
      <Execution id="a8bcb84d-8968-4e75-9b5a-3c8fed0a58bd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="519e8547-e292-17a6-820b-656a609a3aee">
      <Execution id="be0a5b85-7c5b-4e37-807e-248320a24d51" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f9a20186-dbd7-ba1a-e555-304aae1e99e9">
      <Execution id="f2af301a-fef3-4e4c-8c95-151e407d351f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d8a89daa-283d-8cce-a9ab-333d5280d7e8">
      <Execution id="38986c9b-2eb3-4059-8fae-ef33fd4aaa61" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9d8b4867-4123-c157-202c-3288288231d8">
      <Execution id="2559c841-9b3e-40c8-b8c3-722c98670b1c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectBuiltInSealedTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="307430d6-addc-611e-b95a-7924122b9d9e">
      <Execution id="a9cdb98c-cbbc-4098-acd7-151e2dfcb992" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d5893a8d-327f-9b88-c743-c4a105bc0822">
      <Execution id="27925ac8-6f11-446a-a270-65c775c655c9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5b5ccb48-5fb3-5879-36ce-e4c55aca03a6">
      <Execution id="7c58b3e3-1691-4d68-ad88-a25ade0d4585" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc56bc5a-8fbb-7001-21d7-26f6a4666e46">
      <Execution id="9d1b91c4-ed95-45ee-b3ce-ec1e04042251" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4232cc58-584d-ec7e-2062-550645c273a4">
      <Execution id="a3736558-5045-4bf3-9266-5bf00938f4c4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3ecd5d21-bf67-b085-c225-a09603de01c7">
      <Execution id="8ec78464-2ebb-430a-8a6c-c09f07dfc23a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="702dd27f-170e-20e3-4df5-e3dfaf479bc9">
      <Execution id="cdfad0d2-583c-4241-ac74-ebfb66e107c9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="145518c5-3215-1a65-dde8-a0322b47f389">
      <Execution id="a314c88f-a2cf-4362-a411-9109f6c3ee58" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="51341829-e88b-399b-3a4a-a99227f2de56">
      <Execution id="0234f224-d5c2-45d6-b8e6-ddbf18d66d6a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cf61f207-8abb-9a94-935c-7470f4818d92">
      <Execution id="935d5038-3844-4dd9-ac0c-3b50faae6a4f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bd42a84a-3192-2cde-f3c7-4f4c536dd7b2">
      <Execution id="d75c4c81-2959-4e92-9cee-c766ddeeba74" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="51f75363-5b7d-1b10-4253-4371ccce0772">
      <Execution id="44129cf4-9710-4ae5-89d8-1667b7e95d0e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8cd62eac-03a2-1a74-dd51-e189534c3f34">
      <Execution id="4c6cbd2e-573e-4b6e-b08c-1a0f48f10049" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a7594c26-374f-7ad3-515a-969233cd34f0">
      <Execution id="f42afc76-f0a8-4efa-8128-b137424ad89c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0989ffaa-ef8b-96a8-9a7e-9dc26429e12e">
      <Execution id="89f74ac4-e998-407f-b1da-a453e5701a0f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f5950339-2292-3277-1b1e-630be83f9390">
      <Execution id="f5497839-040a-4605-b050-df35f19c6da6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ba55abe9-72ff-14b0-bf44-3ae01d3fcc30">
      <Execution id="646d8fad-155d-42ad-aa46-6fe3e8c27252" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8979d306-8d3a-1ea3-9f81-bb2c3b0ede3b">
      <Execution id="5889bbb8-18eb-449d-a9f6-e409c4d9002b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="68ee19e7-b45c-e5d9-3a61-3a23dfdc2902">
      <Execution id="c58ba8da-f463-4b4e-9869-b89e6a660de6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2cdc6410-dad9-e174-746d-f4f5ae17bc42">
      <Execution id="4b445449-c7f9-4ccb-8b23-b0964b2d405b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="194992c2-87c4-a802-1d25-3745046efc62">
      <Execution id="7e02e0e3-f39e-4d70-8267-acc30bccc1d6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3c2a1615-3cc8-1dac-031b-add21eac4860">
      <Execution id="d932d383-a973-4d95-ba9a-a90f39dd8cfc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4389b15a-0924-fb9a-9e09-b873bd0f4ba7">
      <Execution id="12c93bb4-38fc-4f3b-8c7d-a42483038fc8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0367878b-7833-fce6-919c-7b0e4fbcc777">
      <Execution id="f4984901-6a46-4cc7-a95b-f529a3616c23" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.TryGetFromImmutableDictionary_Succeeds_WithValidDictionary" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f8689325-bb18-af36-7ff9-d55d0b31d69b">
      <Execution id="c0c5ba63-6d8e-4470-aa16-e4cd0ad1b45e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests" name="TryGetFromImmutableDictionary_Succeeds_WithValidDictionary" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c3fa71d1-fe2b-2b3e-8951-e72720da868a">
      <Execution id="e342e88e-57b9-418a-9902-f99ab8fe888b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualMethodVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8d94e1a9-2a0a-815c-9519-124b655d2e48">
      <Execution id="f0603b9e-20ed-42ee-a459-fd585896d0c2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c4f4118a-4e5b-a60c-768e-fefaf93cc854">
      <Execution id="c7465ff7-dc98-461e-a889-e5c81223e3d1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="50513a01-dca4-496a-1387-c153dbf42c75">
      <Execution id="eed69c0a-8635-4615-8a1f-c2cb4b566fde" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, {|Moq1202:\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cdce5b04-c693-0dbc-f98b-8f3d658b45bc">
      <Execution id="6f352f08-3703-4e14-8549-81f4f035a2f1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4e837361-15e2-283a-113c-2f4c72a3f24d">
      <Execution id="a3532e48-432f-49fa-90c4-f857c28e4850" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1d15151d-171c-433f-dc07-059ee5aac532">
      <Execution id="60a32053-7bec-4dc8-a42f-0dfccf8fa41a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1f1b8769-970f-92ac-3774-0d8a7401244e">
      <Execution id="80c2038f-9aeb-44e9-9e83-aafb6a16dd5b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a2be3ce0-e168-1783-dcbc-21b691453dcb">
      <Execution id="4875dac3-a984-4ab6-8d09-3535091c4420" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="848e31fc-460e-748d-b4df-e721579fa1c0">
      <Execution id="55cb60d6-c357-4686-8207-e7884deed58e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8d7c1e9c-d2f4-714b-2d7b-fc952edb9fb7">
      <Execution id="8a759343-f725-43a0-8b7d-966e4e0e2c85" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b85c1ceb-d1a3-5562-cb6b-187c2a702691">
      <Execution id="15fa243f-9564-4d24-9b24-f209911379a5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="87a7e748-94b1-4e9b-a97d-b58bd567453b">
      <Execution id="202ce493-5ab1-458f-8b44-9bee4f947e5e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:OuterClass.SealedNested|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5cae8636-fea7-0c20-c103-e25398002aa9">
      <Execution id="123667c5-bacd-4cb1-96bd-fc41dc51afde" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="813cb6ee-da34-913d-76e9-3657fd89c030">
      <Execution id="5a0bf850-03c9-43a2-a3de-fa834daa54d0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="338fdded-f693-fdc1-cd5a-dd3fd86d059d">
      <Execution id="dc8056f4-c767-41ad-beac-ba12285ad218" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="42cd8ef0-523b-1dc0-f5d2-bd8126fbc0e3">
      <Execution id="8f08bebf-a88b-4425-a830-28486cc466b7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c31b6e8d-c4ef-bdfe-456d-1fd8c47b3052">
      <Execution id="882bc0b7-2ffe-4c1a-b9fa-ce79c591e81e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b408f8c0-2d97-8ee6-6a5e-e64080c32baa">
      <Execution id="67d0e1d6-7f43-46ac-956b-55259e81724d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6c069d1a-d6ee-6bd0-25bd-e8e5c6b5fb57">
      <Execution id="dbcd649e-4c48-4371-8fab-71b23ecf2854" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="61675ae5-4c64-18fd-3bb6-2deb43c92ed3">
      <Execution id="ae270c38-e5a0-4b28-b259-0101b4faa2ba" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a47c7930-40af-b73a-7353-569682b70ec7">
      <Execution id="67f8b02a-ae78-460d-92b0-60f5cc26eebe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2b72fbdb-745d-5e94-0dcc-1004b291f6fb">
      <Execution id="e82c8c16-13ec-4a35-82d7-2ccf9af523cd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="533709b0-4fa0-db25-761d-c9d716be4020">
      <Execution id="1f77ad33-f7ce-4aca-8733-cff97473fa04" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d23e30b4-11eb-4064-0f9d-744a894ce55f">
      <Execution id="0eca480c-29f8-4d2a-9e84-5fad89cc8385" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="524c66cf-038f-ea37-c8f3-33c7ddc4b6cb">
      <Execution id="89bde090-a5fe-4aea-b392-9c4d18b98953" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifyGet(x =&gt; x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="55254d55-c622-2d8a-0267-89f25597a3a4">
      <Execution id="15314063-1e36-4eb6-b56b-0d9a1ceaf22a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2232975d-655f-5684-2057-06724adffb2c">
      <Execution id="14d0f600-eee3-44e3-9075-4eb9ee74ef0e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1a558c60-aafd-1963-f6ee-9c422a5e2fe3">
      <Execution id="5688bbbb-b11a-49df-813c-f46bf118e6d5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_SingleElementArray_ReturnsEmptyArray" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="74efdc0c-ce87-06ae-a8f4-a1548b4fe6af">
      <Execution id="fc6e69c3-5434-426a-ab82-0241c4fee665" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.ArrayExtensionTests" name="RemoveAt_SingleElementArray_ReturnsEmptyArray" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="afbb08c4-24ff-520d-d30f-7851e78cc1b7">
      <Execution id="93e2b8a8-ae1f-4d42-adb3-f838da8f84ed" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5fe44ca4-a628-dd46-1d43-c0811753df46">
      <Execution id="45f813b9-4c3c-4365-998b-41d61493bb8d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fdfbd869-baaa-2aa2-9650-f88e92e18cee">
      <Execution id="e24a20e1-1991-402c-bd83-cbd78f244514" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6b03325a-d3cc-48a3-8d04-204e3075844b">
      <Execution id="09e88732-1396-474e-a586-835db72ff60a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6963eea4-85ab-6cec-88cf-c082afb527d6">
      <Execution id="d3bb4b2b-4737-4373-a591-b3ee8e703628" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="18478b31-4299-6678-f1b3-0821f964db6c">
      <Execution id="9d0c6f29-3fa9-4ad6-913f-32af4ccad4be" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="548873da-aaf9-3cdb-51eb-a84966fca79b">
      <Execution id="48cef4fe-6f90-4a73-bdc2-2f2e4d435322" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="040bcf2f-c535-b023-73f2-b0f55c02adef">
      <Execution id="af9e9899-e4ae-49ed-adc2-bb3bd73fa305" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a3151eb1-f0e1-e363-513b-78be289586d9">
      <Execution id="20982bb4-b7d7-4d03-9585-9b5a149f0575" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((CustomType)\&quot;42\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6b21f0c6-8cfa-64f7-e793-967b87c310cd">
      <Execution id="9ffb33f6-a6d1-4e83-8402-c535b011ec04" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Verify(x =&gt; x.TestPro&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="afd82792-cad8-3d17-fcde-ff9313817a4f">
      <Execution id="2ed6aefe-cf27-4df6-9aa6-7287bce17503" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Fi&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4dec8fad-aa01-b699-7ada-522a43d86674">
      <Execution id="1436a16a-9da4-4a9e-b795-2a12d2224332" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new SealedClass();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cdc0a299-a1c8-2e5d-2ebc-75349ae600ca">
      <Execution id="146d9e91-c6d8-4d11-a765-02846fdf41b2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd65365c-1e92-baa5-6a20-2e054dd0bd25">
      <Execution id="399c9714-fd1b-44d0-8dd4-a54f56aa346e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f4e44a8d-8d37-624c-9f54-73da1df2c81a">
      <Execution id="d9f49f02-9d9b-4c35-b575-dd84ef492e5e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6f3c99b1-36a5-f753-0fc3-0786370c60e3">
      <Execution id="15ac03b3-b199-4687-8080-43af0264e8c2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="951d6230-bd65-8702-b149-1adec8fbf533">
      <Execution id="fae02d6f-4cb2-4f5f-8ba6-3d9574ea1834" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1b66b14f-6aa4-5a79-9057-28c9d23d95af">
      <Execution id="431f14e0-c667-49c6-8e88-a5b89e9647c6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a9943bc8-1ac3-a1e3-b6b4-fcd8844247b5">
      <Execution id="9c870665-54cc-4b8e-9929-8d2223a4f21a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledViaConfiguration" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="468bfca5-300a-87c2-f7eb-1ac41c0960ac">
      <Execution id="d8f7c1e0-0ac2-45a3-a374-5455b53d02c9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff946a47-a680-c36f-e812-0eb2b3f3a020">
      <Execution id="0de859d5-4bb1-49d9-b1bb-b566d0ccb838" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fc245d61-ccc2-75c8-6aab-781cbb782942">
      <Execution id="5b997ba6-e8e6-45d7-be4e-eb04f4331853" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="31b9211e-5e4c-1b32-1f26-b112038cb1da">
      <Execution id="925f1e2e-caa3-4c5e-bc23-57d9b37030c0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9587797b-f9f3-c372-c160-ee39e3f5c56f">
      <Execution id="4536b236-1140-4203-b1a5-12fc362aa80c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomethin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7f1c9860-2c13-e95b-bd48-2dc911bcd5ad">
      <Execution id="cbe50f73-6e91-4a07-aba9-e72d7b203b39" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="797719d9-06fa-fe2a-13d2-71efcf28e428">
      <Execution id="9d998b48-7015-41ca-8993-947582bf4057" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="52d58993-1316-a887-21f0-88a6a979dfd2">
      <Execution id="fd832528-7aac-47b3-ada8-38523cd75fe2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c8004cce-f5de-b34c-61cc-9028bc60c32b">
      <Execution id="869d9192-04a1-45a6-98f7-3103f83aee8a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fa718ec2-8e4a-721b-ecac-e40f6594d885">
      <Execution id="b32aad2a-005f-422a-8201-f9c3cf9903a9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9f38e032-92c7-fde0-2083-513b829d65db">
      <Execution id="3835ef12-3c7a-4f89-a0ee-c8905726a427" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d6e4961e-ad8f-465e-fcaa-caa95043a95a">
      <Execution id="b608c146-d386-49e7-9f0a-e9fc32b496d6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4d95a7f2-d688-fce8-7691-cd001ee7bfe4">
      <Execution id="0c28034d-b2db-434c-9fae-d914e9d0d0f8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8336c08a-3c00-8d52-e909-5b407bd6b011">
      <Execution id="b48ccf18-9945-488a-b28a-6572b4862622" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2e8c7c19-66cf-4c6d-6e92-70484a19cafa">
      <Execution id="44e33f3e-ee08-446b-bd08-32c29b55a319" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e64db02b-5a15-d2d9-6d10-9671add68dfa">
      <Execution id="9e559713-8d5c-4c5f-9924-0cc3bffc7f55" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="715c2045-78f8-6498-cf0f-0b1a59ff7d3a">
      <Execution id="c6e1dbeb-306c-4828-a853-04c1aeb61610" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4fe9fa88-94b3-1c3a-b35a-946b92e4f5c2">
      <Execution id="8fc9f78f-2877-462e-8a01-ea7151135cbc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="68d8efc3-b3d3-bfa0-7251-de5b2f6725e3">
      <Execution id="34c992e0-7b09-43c0-941c-51a647c29db4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c600abf1-7803-e257-d0d2-0fe4da95b3c1">
      <Execution id="5c1b2dd0-b038-453b-9de5-6bdf31ee53b4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.DoSth());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e4a73ec4-8248-27e5-3b81-c661badd3661">
      <Execution id="e0189798-257f-4647-8893-4d4b5a1abad2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8c1b107c-f1e4-7e98-09b5-bce23c52b356">
      <Execution id="53ff8785-03e3-403d-8bc3-5f3b84652c58" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd385045-d4c8-916f-20c0-3c491744135d">
      <Execution id="12f91524-dcab-41cd-9b8e-271599b263ec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7992398f-e1a2-c020-fe79-892a38ef7bce">
      <Execution id="b217bba1-c485-477f-a2a8-dd0a04ccb904" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3f07c33e-257a-9e46-9882-c25bb3ce55e2">
      <Execution id="35499401-cdd6-4b1a-a2b3-fab80e335057" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests" name="ShouldHandleAdvancedTypeMatchingPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="47756e6e-5572-5939-e9bd-8bb7f23cf648">
      <Execution id="29a73868-ad3f-4246-b05d-a1d601458fff" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null, {|M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2d168e6d-3806-48eb-826b-5022f52a6376">
      <Execution id="b7937ab7-6ff1-44e5-90f6-fb03494acb33" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="899dd003-1bfd-e224-24be-d7c2bda94f91">
      <Execution id="62f64e79-6d2f-4ba3-8725-48764364afd2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fe51042f-4b4d-ec97-b4f4-ea15d7c335c4">
      <Execution id="37ec29e6-00d3-48f4-bddf-76e7201f631e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="22e6e4f9-32bc-3a24-7e48-b77a674a31e7">
      <Execution id="eef80a79-968a-4d67-8315-8c379fe7074a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualPropertyVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="32a22e65-aea9-01f0-9ca6-56f0a14c4c3f">
      <Execution id="ad8ee0d4-709e-40c2-b0c6-3dc17a3a252b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ee2fce53-6fac-96c2-0c79-595291907672">
      <Execution id="c9e10a44-259b-42df-90e2-6e378575f88c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9300cddc-7b3b-7071-dda7-b90012537978">
      <Execution id="9dafc772-08b9-4111-b1ed-020f124d9bb8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e49fdeb7-c2b4-b72c-1b43-f91eae425213">
      <Execution id="e8072254-8745-4440-b857-9cf97d514725" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="099a9f32-14ca-7676-b9dd-1002c6a0cdb2">
      <Execution id="18a578f7-b9ba-45be-800f-1706fd6906b2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ffbb2759-881a-8546-5819-63aa68753edc">
      <Execution id="83b11b47-d397-4a33-a2a5-3739c5a6d2a7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="020dd076-763d-898b-ac51-63a0c1561c0e">
      <Execution id="1d8e0358-2d8d-4c7d-a039-834c254ec609" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42.0)).Retur&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f6bfe163-d760-2ba6-029c-2189945bbaeb">
      <Execution id="0c750a87-8403-47da-8ba3-f9f6c228ff2b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff3d4922-a5c8-deec-6e77-32801f5985c1">
      <Execution id="2b26058c-411d-474d-83eb-66197e143093" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2cdf9022-17b5-2b3b-6e4c-ee305ef50b8d">
      <Execution id="c7345760-4d76-409e-b8a3-9f5f93143fc9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c2e76667-437c-9a72-b9a3-c3254a9737c7">
      <Execution id="e7d587ed-65f4-4394-ab19-8f9ca4bc6b6c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff67983f-a08d-8ae6-30f8-797fe5ebc29b">
      <Execution id="ddbe9f39-765b-4ff2-b4eb-82937ad6d2ac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3995284d-076a-a673-1f54-7b50e8f2b53e">
      <Execution id="8ab98a12-60d7-4e25-993d-38e3a0b1d0f2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9394ed31-8b15-d2f1-f029-ac09cc7b016d">
      <Execution id="ea90ce7e-9fd9-4180-b104-210847499b19" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="06927e24-8553-b38d-2a9f-c93d0f91052b">
      <Execution id="8c0b59c6-7dfb-4460-93f9-dc9ba6706a98" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests.ToImmutableDictionary_RoundTripsProperties" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ac802864-65fc-0a68-c43f-1a3bdfcecf1c">
      <Execution id="b520c932-d2a3-4ddb-a9be-017d4845466f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.DiagnosticEditPropertiesTests" name="ToImmutableDictionary_RoundTripsProperties" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.SimpleEvent += It.IsA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc2a7fb0-b711-a032-e42d-9e4dfd6251f2">
      <Execution id="55915d00-c651-423c-a4df-8d3da7689690" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cab8858d-bd81-ddea-54ca-bdc820201dbf">
      <Execution id="d8dffdb2-bd8d-4070-8b24-18923e44598a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="47254a96-69b8-e4bb-5991-8daffa3df47d">
      <Execution id="7e3b1c9f-4c0f-4ef2-80d5-a4b4f5deab96" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="55628be9-b819-2110-dc20-1379da13b1fd">
      <Execution id="1eadb1ae-9f53-4981-aba4-fe53554ecb74" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.TestProp&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="15749751-a3d3-2955-f2ea-d4f0baa46657">
      <Execution id="781ee039-d396-4b41-b7f1-f8e94bc52880" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c2ca7e36-f556-b616-f178-7d91e11de242">
      <Execution id="85dc592c-918b-44a1-acad-0e3406412975" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0c4f3764-f1f2-2068-908a-5d7f98b28c8b">
      <Execution id="480698ca-2287-4d37-b2e5-190a03e99b1a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectBuiltInSealedTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6571c244-89a9-25f5-73a9-ee5ef8357337">
      <Execution id="d8193b3f-abca-4326-a65e-479ad6ef1610" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectBuiltInSealedTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="65dbd63c-5fcb-1226-a31b-58934c0375ad">
      <Execution id="cc1232f9-7de3-4d95-8fbf-7c9252700774" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(1, true)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8d8a981a-dd3a-918c-ab34-4f02198962b0">
      <Execution id="65bdbe67-addf-462e-801c-16ac1b8a4f4d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2dcf9206-a39c-023c-1b91-8deb234ca9ac">
      <Execution id="c50246f8-d522-4c1a-962b-9b3376b86763" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9ff594cd-ccb5-c1ef-8954-c6ffb5c0119b">
      <Execution id="2915f2b6-6226-4fb2-a38d-eb0a50e3349a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;Foo&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5924068f-58be-b2d9-cec9-ae9781b959ea">
      <Execution id="426302c6-913f-4168-bc00-eafb099473a6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IValueTaskMethods&gt;().Setup(x =&gt; x.GetNumb&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6dfa87eb-9b4b-a97b-31e0-f41d0f1148e4">
      <Execution id="559d9be6-e164-4a05-a7ed-5b6c92e5f4db" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="92b4cf56-0e75-818f-1b86-bd5a2e1613c9">
      <Execution id="47ae3d9b-ca1c-4814-82a5-53d299e7bd11" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="29a48a57-be1f-e2ad-397a-3bfa1b99967f">
      <Execution id="615ccc82-79ce-43a3-a48a-a66977911464" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="347ec476-ec39-285b-043c-b037f89ef0ad">
      <Execution id="8f03ad6d-7c47-4af8-8bc7-89191865cad8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a358ccd7-1df7-8395-0955-c52355645e80">
      <Execution id="cc575479-4d50-4bf2-bbc4-30cae43a067b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="df5790e1-a88f-bbbc-7b9a-5ffcb6d303d4">
      <Execution id="7a18de0c-0026-4bfb-9fdc-2db70d41c9e6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="78b5492f-26c1-6f2f-5a04-36ccf021b50c">
      <Execution id="708cdf41-cb17-4096-9af7-7838bacca4cb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cbda1c55-2da6-8044-ec47-bdd6f7812fac">
      <Execution id="4ee9cf8a-7253-4907-ba5f-e1c22b4059ee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b7fd7b8e-8898-53be-4e7d-f03d0583e142">
      <Execution id="bafe8054-61ae-4967-8b4f-c2c8faa6d186" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="612ad57f-7b3f-4988-a801-3bc0d08b608d">
      <Execution id="b680f2ec-2e9b-454e-bea7-cbde45507643" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a8d180e9-4b4f-36bf-3809-bb019b0b39a6">
      <Execution id="c8ca1057-7bc5-4b4d-a09f-e58a8b573633" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="25915602-30a1-11c3-1441-58ce4ebf36c9">
      <Execution id="8a23c992-fb8c-4863-859e-b3fca70e32b1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9e21d77b-ca59-9c81-5d8b-4b63cc11cb88">
      <Execution id="8fe1b6d9-91ed-4fdf-8b97-b06c3a935ac4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e0662c63-adde-4702-9dd5-70b6afbe8996">
      <Execution id="7d1e5e02-45f6-4d03-afc8-2e7351fe168a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="846a45b1-d7f5-1c39-3c0c-a4c23c94133c">
      <Execution id="826b15dd-38c9-41c3-b0f9-d8ea0d44dce8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0b543f48-aea0-1cc0-ed51-2547c3201ca8">
      <Execution id="f04a8b78-99e7-407a-bac1-7f7662606759" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="522d2c18-ed47-dacf-c7f6-b4b3c286b53d">
      <Execution id="3237a73e-3514-4018-a34e-4cee4f8b688e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2f6638af-638b-157c-d110-94e98abdf32a">
      <Execution id="a9910230-43cf-43b2-ac77-20745ee9c5dd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3466562b-051e-5a6c-8f57-713af9bea0dc">
      <Execution id="427ada49-62af-4471-a068-092254258196" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="16018a80-3717-b374-a6f5-dc193d246435">
      <Execution id="22a24891-eb24-4feb-97b6-dc0f546b413d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5b82b4ff-b326-8dd3-15aa-f9ed0cb8567f">
      <Execution id="25e201c5-2913-421d-87fa-497b4d0581ea" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6befc529-ca26-b9b5-e5c8-a9820407398a">
      <Execution id="921a593a-e629-4781-b119-b4ac11dd60ff" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="759d27e1-6976-5322-46f1-4e5bfed94822">
      <Execution id="4cf59c20-d517-45a7-b78e-480f52d80cf2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e026e72f-4d88-b363-f894-324a08777650">
      <Execution id="339a0c33-5c63-45dc-95b7-2e2768b78b9c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="780d9a91-2047-aa32-c289-339d19d711a1">
      <Execution id="b97e8f66-ee56-4d82-bd3e-dbb8cc000b9b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e77a1b9a-b0f3-32dd-9c2f-3ca98bda9fb3">
      <Execution id="6d91853d-3fdb-413e-91ba-fff0b5c91e8d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3d2ba7f4-0a56-3cd4-649b-8b437defa9f5">
      <Execution id="a519619b-6548-4500-8932-5536f40aa22c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="71fa71cf-75c3-d0b7-b0d8-21091e60961e">
      <Execution id="b5033836-444f-4989-995c-12de954099d6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IIndexerInterface&gt;().Setup(x =&gt; x[0]);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9d0382bf-e9dc-2344-8769-35a8ba666be3">
      <Execution id="17fcf59e-cea9-434f-a1a3-fb69ae75cedd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cbf2ace6-2e4f-a569-e0f9-89873457659a">
      <Execution id="83b26a91-cc9c-4e70-a538-5421e29c4feb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5e5f14af-1695-94ca-eae8-8c16f5331b92">
      <Execution id="809d47a3-36ac-404c-ac8f-f23729e1925c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3f274b91-6c63-6b34-6c49-4d30619094eb">
      <Execution id="0d2a1856-9cc8-4bb9-8aed-051980b36cdd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="497cef6f-579c-1bf3-0fa5-d50bf3ca7e0c">
      <Execution id="6e6e02ba-30f8-46b5-b2bc-fcf0d37410e0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a56d1103-29ad-994d-0833-6475cbdb3d7e">
      <Execution id="ca8ce7c3-f667-4386-b928-66c561805eca" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc410954-6c77-3aec-8700-58d575c4473d">
      <Execution id="e79d4856-f408-4b52-84ee-34a3bc6ef732" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupRemove(x =&gt; x.TestEve&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6e189c17-77e7-fcf7-ee5d-bc133ae19b97">
      <Execution id="5d330e2d-4419-4b25-9b9e-3e7e15ea04ea" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_CallsEnumerableExtension" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bd4c8234-a00e-1673-e7af-5cfa37970a5b">
      <Execution id="12fad985-cf3c-4f20-a0b3-3aef55541869" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArray_CallsEnumerableExtension" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;OuterClass.NonSealedNested&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d622a621-682b-f9b1-0815-1efb9cf37394">
      <Execution id="a62fc394-ba85-4ada-95af-090fb0f53cb5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualPropertyVirtual(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyProperty { get; set; }&quot;, fixedCode: &quot;public virtual int MyProperty { get; set; }&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="04dd0945-e96e-e9c0-3739-1156dbcb8549">
      <Execution id="b1ea116a-5632-4271-8c04-e534cda13b98" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualPropertyVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="32fcf582-ebdf-c618-5ed1-cbd1e48622db">
      <Execution id="c1ef6fd5-c126-4cd7-9f4c-9ffc26cf97ce" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fd9eaf7b-a332-936f-8c03-a3143b66581f">
      <Execution id="f17e2690-db4c-4093-890a-78ce66c5b88a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="558daf05-e73f-48c2-bace-86b66219b81a">
      <Execution id="9afc4ff8-771b-4415-ba86-b5c8caab3fef" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="03f4b3c2-e04e-f0fd-bec7-9ac5649d0e29">
      <Execution id="1aefb286-5a23-4ffa-b8ba-b104d59d9d9c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6cb16d50-8458-d87e-f91b-ebc6c103b101">
      <Execution id="96d06470-3da5-462a-93e3-a103e3899ad0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;IFoo foo;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="315fa610-bc46-1f32-7d78-ceec1c67acd5">
      <Execution id="97f33ee6-e05b-49cb-82fb-212d75501f8a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fce80ac2-d844-dc5d-bd1e-812df08525c0">
      <Execution id="12d818cc-84bc-4019-887c-a1dbc045782b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dcea306f-cb59-43d5-ea22-c0cee42ec856">
      <Execution id="7bbef49f-929d-4f93-8e5c-0787a20025c1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6e84d580-92f7-3e9f-990e-d78eeac17fcc">
      <Execution id="e2f7a353-e399-4738-92fa-8fe7a6ef2295" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d9c6a304-3a03-ea6e-9174-9adcf72b6d34">
      <Execution id="880f8b59-6fa1-47af-bb84-eca87596d73a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1b11ad31-fde4-1222-2dc1-e2416a02527f">
      <Execution id="f2a4b8e4-bfdd-4dd2-8df6-a5d2ad5b2c93" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a3c3cc11-7430-6a79-d6f3-fbaadb544f4d">
      <Execution id="8f0d4e40-6760-4d57-a50e-9f0fc6d07332" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNonMockObjectCreation" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8065815c-88fa-48b3-e8e2-62a578142b66">
      <Execution id="db794928-7588-4cc8-abaa-b175efb0f95d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNonMockObjectCreation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="497c0baa-8082-fc86-06c1-ea3b85b951c8">
      <Execution id="bd305354-d7c2-4af3-9950-36ec9ab2ac26" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3075606a-2651-8a19-6c37-84b9048ca11b">
      <Execution id="8e1ad693-306c-4579-833a-050565898cda" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="14918b2a-aca0-607d-3179-d7917e078a1a">
      <Execution id="76838dac-b781-46df-a7cd-0df4c1e08878" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="49f7c3ed-476b-de5b-a567-a8490ef69160">
      <Execution id="340589a7-d8fb-4900-babc-bd5ad7f99609" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="47db66ac-428f-91ff-0471-2e7f85a848df">
      <Execution id="e8ed95e1-e63b-49d9-918c-ba9571787db9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="960a762f-66f6-dfb9-70a2-082d489ff7cc">
      <Execution id="9059f76e-f5bc-466b-9360-2146ee681183" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fbe61e14-6dfc-decb-68e0-f3b192f02ab7">
      <Execution id="4f122a26-7a4a-41ac-8b2c-781f6b99b033" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e76b3250-5961-6e43-c59b-57074f2ffb0a">
      <Execution id="99472725-b2b6-4356-ab7e-ae17efa4ed4e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1d7f85e0-6ead-53ce-12f9-82dbd5edd194">
      <Execution id="a1b845b9-30df-47d6-ad2e-c9d5fa2c63b4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ed980dc6-0394-d430-fea3-bcf91e9b80e6">
      <Execution id="330cf2b1-668a-4958-800b-7b8c94bcc5fe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="845d2943-50c7-1222-88fa-08d770bf7129">
      <Execution id="5f0f31d2-1b68-4349-bc41-6f4be037732f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="562a7f45-d480-b9b0-c13d-dd55f0799d1f">
      <Execution id="010641dc-3f58-4372-b39a-2368aace0198" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3206e19c-f5dd-90f6-b732-4a2155f79c90">
      <Execution id="7802ff7c-cbb1-4a06-b923-7386e17d0863" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd0cbef3-60f5-7467-9c5c-b2db3b410110">
      <Execution id="8377f5f5-a6d1-4180-8ef8-3a9ad766243c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2d984321-6e2b-fae6-a746-959bc2dd7d33">
      <Execution id="23803b28-5e9d-457b-b468-52fb0addf904" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(42)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9581bbef-78a6-0640-a2c7-1475f6a7a794">
      <Execution id="65f37a05-986f-4c20-92dc-0ba42529aebb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="83a1de75-ac25-d2e2-f696-c129dc3b533f">
      <Execution id="6d5918b9-0ac9-4349-88d5-57230f85329c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_IndexOutOfRange_ThrowsException" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="21931a12-7a0c-9c5c-2571-eb0ed2699943">
      <Execution id="09ee300d-c468-415b-93ff-65c26fbc4da2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.ArrayExtensionTests" name="RemoveAt_IndexOutOfRange_ThrowsException" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IAsyncMethods&gt;().Setup(x =&gt; x.GetBooleanA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="54bfa6a2-6f3d-3e09-b29d-fb612642abf8">
      <Execution id="e711efd3-1999-4065-98f6-41de9a68599d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a5a27d47-cab3-61b8-1917-30a3e7d3872f">
      <Execution id="87a9d789-21aa-446b-8f8a-ece9354cf0a7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="410ecc31-2824-271a-f647-9921ee42a7ef">
      <Execution id="0e417f8c-f4fa-4096-8db2-966197bd2868" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f6d67d9f-16d8-17f0-a24f-e6d93a14057a">
      <Execution id="2a38128e-b8aa-4b8e-818e-9f9d4e15a4dd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldNotProduceDiagnosticsWhenSuppressedViaPragma" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7611c84b-55c5-c369-e97b-99345d1f32f2">
      <Execution id="e64ad87e-41ac-4c8c-bbbd-b098fa6194c1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldNotProduceDiagnosticsWhenSuppressedViaPragma" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.PackageTests.Baseline" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="43f30db5-69ce-d3f2-2dc7-8aad3616194d">
      <Execution id="da6ca738-ab04-4cfc-8ece-4a455adf691e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.PackageTests" name="Baseline" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c0fd621c-4da8-4baf-dd99-1aea8a1398b3">
      <Execution id="3c372a30-9ae0-49dc-ae08-6e4f654efefb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cdf5daa4-2166-efff-8f4c-38e235c1e7d9">
      <Execution id="4f9a93b2-0066-4193-a8a4-297787fe268c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.TestProp&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="664b851f-009f-fda5-d4f6-9e2acd3460e0">
      <Execution id="c88748da-236e-426f-bc6d-cc8d4543e45c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cff87ce0-ac02-feeb-01c9-ccecd0d6feeb">
      <Execution id="49ad9184-8934-4951-b5d9-709b6d818047" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;{&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c6bdeeae-478f-56bb-3e2f-6931ff10fb54">
      <Execution id="d967f422-4726-4b06-9ab3-d4f2eef6464a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f90557c3-591e-a64e-85d0-a41008f26e8b">
      <Execution id="4db1c8ae-d7a2-4cde-aef1-d1618fcdd37c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="11882a2e-23e7-60fc-aa97-397997e04b25">
      <Execution id="9ee3c267-18c6-4a43-94f9-2e9cae87eaac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bc22d645-fc4d-65a9-5ca9-76f653186480">
      <Execution id="c54bea22-335b-4ee8-ae56-9fcbb79a29c9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="49fee0d3-3f47-4b49-760d-291fc3bbcf3c">
      <Execution id="3d5c0caf-c73e-4496-b794-cd8713fe7559" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;int&gt;()))&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ec80dd96-a1ed-8573-058a-c4413ffbf7a0">
      <Execution id="36a9728e-49ba-4301-9247-7fb1313350f6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="53a39c7a-445e-05f6-37d8-755e334b4603">
      <Execution id="407fe90b-eaa4-4e7a-99e7-e7f363c9c2e6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="889b0366-b4cb-d05e-789e-186a1da0ce38">
      <Execution id="5f994658-ad69-438e-a1fd-0483f5b88167" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new MockRepository(MockBehavior.Loose);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8119c33c-b292-27e3-424e-2ee04ff5f20f">
      <Execution id="296f4580-118a-4cde-b75e-478a61988382" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="919517a3-ee43-df33-14bc-fc439f5b5116">
      <Execution id="3ed85fc0-4241-43a6-9ae0-360d9a3db85a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="52365f11-aee8-65de-521b-619c832f24f1">
      <Execution id="a476bb4b-b7ea-4fa8-be18-d67ef7ba9fb7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3040cf7c-bb69-fd13-8105-bbc9f0f23c8b">
      <Execution id="bcb71ebd-9d48-4b47-8ddf-b396e720fc24" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="05679bb8-fac3-c62d-b0a7-68b65d4cad03">
      <Execution id="d325f5ff-fc97-4d98-82ec-ac53b038d392" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="be48ee49-5629-a22b-8f86-eddc1f2d7800">
      <Execution id="23a61c57-7b49-44ce-9bbe-ba38615b09e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9196b1fd-39c2-e39e-8fe5-f0a2bb6e6c75">
      <Execution id="cd8d353e-3f9e-4a26-b3ca-066867810db2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1fe8b1f6-c834-3bfb-130f-35b33ed96069">
      <Execution id="e5da4f44-2ab6-41d7-ab7a-0abed34df753" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2d76dcdb-9eb6-88c4-ee8a-2eb9f6e7a5a1">
      <Execution id="46f80acc-7337-4510-a52b-407a84d71968" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1c9d640e-add2-496b-4065-a3c823768c21">
      <Execution id="e7c20fb9-ed59-4218-9615-f129ff876311" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5424597c-7ec2-aaad-6f88-4b37ca5d175f">
      <Execution id="d05e1512-6043-4d77-955d-0f654f5f463f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="36f4dedc-629c-e2b0-d37c-bf5c5ccef2ab">
      <Execution id="886b65a2-b896-456a-b509-795ff55d05bf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="02319e59-5a71-f532-6c9e-ad32f367f6d0">
      <Execution id="e54a830a-9c58-4f53-8f9c-3900a4304765" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1e6977c5-6015-f38a-845f-ce6f0417f4e9">
      <Execution id="15f0b23b-4ec7-4b06-af4d-5409f29ee59d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b0ea241e-b30f-c096-d0f5-7afa8a27de6a">
      <Execution id="e5a39a10-880e-43f5-b028-aa91a369f687" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="818ddfea-b6fd-ae7e-49d8-717e8d7f1c25">
      <Execution id="993c0261-a592-4d94-aa83-991dce0c2143" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenEmpty" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f4d68c92-a3d1-1b3e-481e-3431dbf2a3ad">
      <Execution id="d6f0e919-c5dd-4c4f-acf9-06c46413a035" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenEmpty" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e46ae564-062e-58fc-bf93-4797f4242118">
      <Execution id="e6927b94-f15e-43f4-9a17-1eabe12a8c19" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="22c1ca95-7281-7892-4c74-f6a6e33bb828">
      <Execution id="8f3ad5c8-28a5-418c-8d84-28e66cb750e6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eb28d933-f13d-d4f7-d00b-566a1d5fc9b0">
      <Execution id="d69c0825-c01f-48fb-ba91-9f3e71796627" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b5e2d12e-b639-e948-c820-a1b85567db22">
      <Execution id="b15f2426-5eb7-4594-b3dc-bde020d30bf7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3fd8e3b2-9660-662b-ecbb-c22f45608ea3">
      <Execution id="78cf3c1f-ca36-4bd0-9dfe-248131447fa3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c2f950bf-491d-1704-b3bd-3c23488661c5">
      <Execution id="e58725cc-b761-40e0-bdfd-1430f7482a64" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cfc38294-35a4-4131-c56e-114bcb0a43e1">
      <Execution id="5674e499-4c69-4ae0-a685-46d5f6083d00" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new MockRepository(MockBehavior.Strict);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fb5e4b4c-b600-6a47-3fee-677fe3df8e3b">
      <Execution id="9ccba08f-8b56-426b-a5b1-f062f3a26e51" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="edeb4141-7d95-10f8-3fc9-a9a9bc9f466f">
      <Execution id="61ca1605-517b-4d5f-9a76-3e6ae1ca5a53" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8695e72e-08cd-7b05-5ad9-a993d5fb61d6">
      <Execution id="47213818-93da-472f-88ff-9174536f6948" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="215393d0-79a5-1468-c52e-f6e39820fec4">
      <Execution id="0e0115e6-68f8-47ba-a1ba-cecffb52adb0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="904e2066-1d2b-b1bb-a20d-0cfbeb0d9ec1">
      <Execution id="5c858c7d-9ed0-405f-94a5-df064f6a3b2f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9b602c84-6781-2c9a-c057-da49a13c681c">
      <Execution id="9b82acf3-2fc2-4bd1-987f-315ddeded89c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e0de6683-ea88-c688-a958-3a7680427192">
      <Execution id="f7144d0e-2e20-48a6-9cc0-1acf31e5b670" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.NoFixForSealedMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;, fixedCode: &quot;public sealed override string ToString() =&gt; \&quot;\&quot;;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="775e62d6-5a2b-6bbe-7bcb-d3cc4bcf342e">
      <Execution id="41a4b95f-00f8-4246-b21f-d402f61b4e2d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="NoFixForSealedMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="20b776ac-3ff6-e2bd-5fc7-a83bcd0d4ce3">
      <Execution id="6bd8769c-e0e5-434b-9c18-936ec94a33e1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1e93fb37-7346-9311-1398-846091f07a80">
      <Execution id="76a00c58-565d-4ec0-a5bc-ddb95cd68a4b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bf4628e9-f346-6bf3-5225-840720bbe699">
      <Execution id="7cd1cde9-f4d6-43cc-9cec-70009b233c36" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3d9fe3c5-5f16-de4e-4b4f-629823d3f7bd">
      <Execution id="adf7a294-9e5f-4e8c-98f7-17f701294cee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fd2d9d46-a5ea-96f9-1301-506ce9046dd5">
      <Execution id="920a5318-ed1b-4021-a4e4-8d29cececa26" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d3d4e8ae-8260-c72e-8825-1fc4b742c82c">
      <Execution id="9f86f203-0338-4a9a-a829-355797edc695" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledWithPragmaWarning" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d5c45084-ace7-5d46-b742-306047088c1d">
      <Execution id="875fa101-344e-4261-b15b-3049a4df1604" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0aac1784-6140-8d0d-572d-b46a5f0aef12">
      <Execution id="25ac6232-754b-4874-b556-675c7c46828f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupRemov&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4070278e-56ba-2c59-d557-71bbd7e9eb40">
      <Execution id="23d7f1dc-517d-4c3d-a07a-70f00722d191" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e3d09e92-247e-5bc4-4b49-18c7366a22d0">
      <Execution id="b13ad5c2-ba75-4cf9-95ad-ddd94497b565" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="82864c15-5505-7bce-e3e5-20b34a05e5ab">
      <Execution id="28c0ad16-3caa-4e7d-81c6-8184346921a7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3b12d6d1-d8af-12de-076d-70c1e48b3708">
      <Execution id="a3e73bcd-24a3-4c16-9942-18710873e8d1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fce1d262-0491-e21a-8bcf-34b8bf53021f">
      <Execution id="b92b0470-6469-4116-be11-25fee353abb5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="989ed284-ae58-8273-6075-856d45f9d69c">
      <Execution id="20d39f5b-623e-4d79-8077-525da86296a8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6d3bb3f5-96d6-3247-acc7-1676096b0e7e">
      <Execution id="c0843d2a-16eb-4f5e-9596-577981e2ad12" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IExplicitInterface&gt;().Setup(x =&gt; ((IExpli&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="aacff6c7-2fa6-09f6-e43b-a03e145b7a5f">
      <Execution id="0c830c34-f539-4259-b3ef-6f2e484d3b57" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e3588e43-360c-68cf-5f19-b06e3eabc28a">
      <Execution id="72b13b5a-51e9-456c-84be-86d22248ac2d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="aed32561-5f20-1bac-99fe-d0a7e89774eb">
      <Execution id="d2c877fb-c2e7-4baa-adfc-ead82f83c4f5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a473c7ef-9fe3-84a1-6a05-32c32190bf5e">
      <Execution id="1964a421-5e53-4827-9082-6bef80e6453d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="505bc260-c469-2a6e-c095-4d420025231f">
      <Execution id="41effe1b-b38e-41db-bb01-dfe8ba1c2463" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b523b50e-8698-5c12-b0c6-2cc0ef31be92">
      <Execution id="c026fa56-40b4-46b1-ba28-5bb3459ebbad" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="49aa63a4-01f5-1225-a31c-0199404cb376">
      <Execution id="3299be70-67f9-47d5-b015-97e08c97244b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b3a714bd-e8cd-ee9c-9774-197ad90df4e0">
      <Execution id="a68dfeef-807b-446d-bc39-cc80d8032ed7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0e6731c1-f755-0423-e726-6129aa898c9d">
      <Execution id="1d874d2f-e94d-40ef-8b7e-ce3cf00980eb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dc3a3424-8ced-16f6-3ceb-539b6b976e5d">
      <Execution id="d814d95a-fcae-4a43-91a4-e20c752710b2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="222062f1-b98a-6d67-5177-f3954ec794f6">
      <Execution id="e56fec67-2dfb-4f8f-bde6-f6170a7dc334" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e720221f-c049-bc6e-53ae-b34e8d0ae508">
      <Execution id="0059e1f1-a8a0-4d1f-84ab-7e3a5cf5162e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="99e9bd64-ce14-1d6b-ccd7-547118933850">
      <Execution id="60380ae4-175d-4159-881a-1c742e42c1a1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ec62c6da-bcdc-1a43-6e16-9da83f3e83de">
      <Execution id="52762029-98e3-4bd1-9b23-33f523515196" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d870c43f-5efb-5680-7ac1-06a3e4a199e1">
      <Execution id="6ac536b5-b59e-431f-a74c-27fcb185a280" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; {|Moq1101:x.Me&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f8781aea-4ac8-b7e6-aa07-a1b8e408050c">
      <Execution id="5b734d55-47f2-4cb5-a577-bf9cbd0e3cfd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="77ed5d95-e058-ad31-03b1-f136a6c88417">
      <Execution id="40c6b3f8-1112-4c78-bd82-a09a64cea5eb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="84859c60-ec70-eec2-e99f-67d391c6855f">
      <Execution id="bc077e64-336f-46bb-9f30-3e383809de11" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cce1209d-3f75-2835-b76c-ccd0a1b909e2">
      <Execution id="bd115a68-e635-4806-b599-0b65da2e6b31" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="90cfe239-73f1-f00a-fe24-1690903626bb">
      <Execution id="1b4d81f6-270b-49e3-b60a-8063abfe45cf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="23e08cf9-b55f-2415-7846-6bb4207843d4">
      <Execution id="a169c46d-de4b-4897-a47b-3e9545bcabb8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0260ce4e-caf6-be0c-a628-f9ad34ebfe59">
      <Execution id="0a77cb21-4cbe-4b97-8152-13ad78b2d9e8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bd543530-3c66-48da-0e4e-464142293968">
      <Execution id="20e40b0a-c9c9-4041-a33e-2407a6dcf241" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c9b7ae5d-6fdd-5595-bb78-e18939d81c9d">
      <Execution id="6001d685-16cc-4236-95ce-0d3a33c2a2b9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1fb5e3a9-3415-a192-b8b2-479c50f545e9">
      <Execution id="ee9f2e0b-58c5-4ca6-8bd7-eaeb2c953162" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(new CustomType(42&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f708a38b-ae92-cf34-8741-3e08188797d0">
      <Execution id="92a5cf7f-3f0f-450c-9d9d-8aba4314c8e2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="712cda48-f222-70d4-07d0-30d8d6dc0fb4">
      <Execution id="a5d494b2-8d03-4b66-b428-ba57d4669ad4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc02e2b5-ce12-acbc-ebb5-9b7c11fa7ead">
      <Execution id="17aca4ba-63b5-48ce-8d7b-74d47a649195" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new SealedClass();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e975ee0f-9b31-8151-0819-5610232890e1">
      <Execution id="431e18ea-570e-4b64-9fc5-b8835d8bda8d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ea22d617-b073-7138-f9e9-1623e26405fe">
      <Execution id="6ef23346-5579-43db-bb84-3b3b811163b0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="250312ba-45f3-f2a2-5f5b-f68f1de2d467">
      <Execution id="2abd3171-7f3a-4bbf-998d-fd40257423af" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.SimpleEvent += null);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d4c115b3-f852-b001-5373-e13d5cd038ad">
      <Execution id="2c397631-c0ff-49fe-ab13-f3b6eb348ff2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ac20cadf-ebae-bb3e-b742-1a375cd302b9">
      <Execution id="b2db0b55-2e13-43a4-b4f6-2dff5be36ef7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="373e5f57-3a6d-e220-bb6f-8c9c7f39375b">
      <Execution id="bffe45c7-47f4-40d5-bccc-a673e2c92231" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3c905a16-ae3f-9603-a68e-4f676ab21981">
      <Execution id="79cc50e8-8474-45dd-9960-bcef9918f5f7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7175c2fb-66be-cf87-906e-cf3edeb4343d">
      <Execution id="53511e2b-5a94-4f7e-ac02-d127b9c03679" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, \&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="988291f9-5719-8f5f-5fb3-40ee25afeb76">
      <Execution id="8ee3e70a-3a7e-4a30-b773-69451fd0915a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c77bb93c-885f-84ac-ca92-25010599909a">
      <Execution id="c9cea92c-2ac4-4133-aab8-8fea1a8e352c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.ProcessR&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e542a309-f317-a569-1cd9-cfc79ac2c64e">
      <Execution id="5a984d5f-95b0-401e-8fdd-76a2e7e4819d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fe99808d-55a0-15da-f6cb-a89579618d0d">
      <Execution id="21c79b59-0f8c-4032-8600-f1a0d3e6050b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="37793c20-d57c-8827-97ab-ac5ef0ef3b6f">
      <Execution id="0e077295-3cc5-4374-8f37-3731be1a79d2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c60678da-9285-ae5a-f3d4-0a9359153c71">
      <Execution id="ce17b404-dc99-4837-aee3-0d93c24f42b1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cbcba8bf-1ccc-76cb-86fd-588596f51f86">
      <Execution id="30dea194-9cd1-4a9c-89ae-ea81c51f718f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledViaConfiguration(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8ed8c19a-3679-16c4-bd73-78626a7450ee">
      <Execution id="e7d8940a-79f4-4214-8f3e-b5fd0bba16d7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledViaConfiguration" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c80b66e2-194e-cdaa-3345-cdcf3e669b38">
      <Execution id="982c7feb-4bc9-491f-ab87-9b075a692d41" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4041f6f9-4629-f6c1-d8fa-da9c5896b125">
      <Execution id="c14914b7-72b7-4273-b66c-95604cb4afde" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c24bf41d-9555-6a96-15fd-43fb65af5715">
      <Execution id="a76b0879-b3e8-463b-a4ad-340c41cb8dc2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c48481c9-9b00-fe71-05df-8da276d40ba5">
      <Execution id="6681045c-7743-4499-986a-d2a311ae3625" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(\&quot;1\&quot;, 3)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd4508a7-13eb-c4d2-afcc-466b81627086">
      <Execution id="9e374613-e821-473f-b816-3a9ab980a3e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dca52caf-f7af-cf9d-012d-d4287aeccac9">
      <Execution id="d0750c7b-79aa-4744-a618-999ab3ae9fe4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="86dd5656-1779-5c6e-8031-6bbe3d5fba49">
      <Execution id="097138aa-75a0-457b-a154-3bf703a504b2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().VerifyNoOtherCalls();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f4933e3d-e658-e8c4-5656-25bafef17bc5">
      <Execution id="7dbcafbc-f0b3-46e8-824a-6d76f6c1db3c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="024227c9-f923-22d9-ff3c-b67ce23baece">
      <Execution id="92c36b39-f24a-4dd6-bfe1-290f4e0799c0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9da22bbd-e742-bfbd-cd8a-0588570a56ad">
      <Execution id="8b8496b7-4df0-474d-a36c-2243ffbbb411" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;(MockBehavior.De&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dc4f7fe1-7511-b5a7-8aab-d50dc0370ad4">
      <Execution id="3c8b0389-4f3e-48cf-91bb-f8af339f67bd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;)|&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b236b3c4-c438-c97c-b559-709c9483e369">
      <Execution id="1693f286-ffd5-4221-9f03-49111432e527" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="01de2011-0c45-9452-f95c-14cce36e0b4e">
      <Execution id="15f85d81-7700-4ad5-ac8d-1b22c3315493" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomEvent += It.IsA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="040d93db-8cad-94da-f49b-ad5e5b88428d">
      <Execution id="574e2d86-5ee0-4eb0-8bfd-254c385e400b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;IFoo foo;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e2a6bf2a-94ec-7361-31c3-19851b12d1ca">
      <Execution id="d103fac7-9cd8-40ec-bf70-652fa0c25023" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="34961ea7-162c-5f1a-0422-c325d3516ddc">
      <Execution id="a5464380-1b8d-4c6b-a2ac-04ec6ca1a538" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass?|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ea7497a8-e682-019c-2264-80a65489c59b">
      <Execution id="05b1a204-79ba-4f1d-968e-8e1d4301e9e7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fe7fb41d-0ead-0f02-41e3-e3cfca24d4af">
      <Execution id="bc5dc1a1-472a-4fe5-b2d9-08b3eedfba6f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c0f0b713-73a9-6c8b-d763-d97f0f6e089f">
      <Execution id="23cb54db-acea-4d54-9d70-5d61c3a83301" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ae0fbced-2298-222c-b00d-1eb146d4516c">
      <Execution id="1ca3e33a-7d54-43fc-b8a0-3d3460463246" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d6264142-ed9e-0230-b0c2-c4d54c89f534">
      <Execution id="b54d8d8c-d98f-42f2-bb19-5f818bda6643" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="93542c40-37b4-8ad3-ab4c-7c60962b4b04">
      <Execution id="0df68097-aa02-452d-8427-2005f3257706" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;{|Moq1002:(MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="65b422a4-a0c7-462f-ca66-6345b1be0e82">
      <Execution id="8f82555d-516c-4f0d-84b0-36c40ef71a3a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3e297006-2438-761c-f854-2a1dd672959a">
      <Execution id="59c30c6a-ca63-432d-8131-411071772dbb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e51ee1df-bdd3-3c1e-8d52-c99803ceea24">
      <Execution id="ab6c7f2e-af8f-441b-9e8a-4ffd8bdabe96" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="51a412c0-5f46-9eb3-fa2f-2061ec4cdbae">
      <Execution id="3d39a08d-28c6-4851-aa3d-48ac2bb4178c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cddbddc5-bec0-946b-c711-0e3a131cf15a">
      <Execution id="08053ad2-77b5-4840-b61e-f0b0db7cc5aa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="816d92fd-2ac8-36cd-a0c6-6bea2f668719">
      <Execution id="7f8fbd70-d8c9-4e64-8312-809cd65bf92f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7fa7b917-9635-509d-ee53-facbe73572e9">
      <Execution id="e2b91309-cc09-4c11-ba34-c3f87bdf233b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNestedGenericTypes" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cb47c782-4614-6e61-857c-400687cb5aac">
      <Execution id="ee7a5691-e89f-44f9-9e1b-7ca18b95f53c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNestedGenericTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e2fb77fd-c040-1248-3eb0-28407cf45126">
      <Execution id="c15b0e03-b657-484a-9fc7-fbe48500eb07" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6f242f8c-2c9d-6f92-9208-bf7f36464284">
      <Execution id="698cf687-2a19-4ffa-897e-ff003f33103a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dee52652-f694-14f3-d87b-28914443db21">
      <Execution id="a42c0f46-d04b-4f9e-883d-776769a2ef08" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0c465004-23ec-bb83-00e1-406ea693bbd6">
      <Execution id="47a17a8c-953c-458c-b02d-322d37217d09" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="61732d76-971e-f3ae-cb56-2c520f1add44">
      <Execution id="56d223b0-11dc-42ef-8d91-53d93539cbf3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:null|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5cf69d1d-6b2d-7736-8e50-131649888972">
      <Execution id="dfba6b29-2bb4-44eb-bca5-4e212155c0dc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c1109307-4fc8-fe76-7e79-6ffef5d830f3">
      <Execution id="56105ec7-0c23-493e-9a95-5091de5d879b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMultipleConstructorOverloads" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c6880c13-bebe-7218-388a-676aa7c699b7">
      <Execution id="b0142416-7ef1-4243-954e-5d20edf3c70c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMultipleConstructorOverloads" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsElement_WhenSourceContainsSingleElement" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="125f5f59-beed-825c-9774-d3019824876b">
      <Execution id="5911e57c-32f2-4975-b8a4-38382978fd38" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ReturnsElement_WhenSourceContainsSingleElement" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0514debc-c616-2066-bb5e-66581f407587">
      <Execution id="6a0e0daa-f6e3-4a1d-b9da-df9fc27faa73" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1eebcde7-938a-d08f-ccd2-ac59dde74284">
      <Execution id="7a937272-8bb1-44cb-b6bd-ad2afbb7eac9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="931e394d-f30c-d46e-cd32-44de44d715b6">
      <Execution id="960789da-ef3e-46db-bb0a-c674d3a1eb83" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7bf36bf1-adce-1f61-9f13-39612921c26f">
      <Execution id="0345e2cb-7583-448d-8954-220557655c56" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c872a420-5917-534e-7061-800f623a734c">
      <Execution id="ea63d89a-4fdc-4fb9-900f-d8ddf9c79f63" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="aa13eaf6-b3d2-3c99-a791-206e2203137d">
      <Execution id="abedf0b4-8449-47ae-aa46-204558f2daee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="247cace2-2250-56d0-036c-e5ba16fac99f">
      <Execution id="a47f35ea-bc38-4bb0-847f-96e8122a9c91" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff98d5aa-43d1-be6d-3634-0981f89e52ef">
      <Execution id="0595a9b6-c3a9-4f38-9884-40a7c2d9bbdf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests" name="ShouldHandleAdvancedTypeMatchingPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c1cdd2bf-0204-c315-7de7-a755f815f9c3">
      <Execution id="454503ed-a309-4869-9350-fdfe19ad1bce" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:(MockBehavio&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a1f8c002-88b3-5f86-7a01-d60cd8de3d1a">
      <Execution id="c5d379a6-0288-4610-a19e-061766c8808a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ad2f12b0-adfc-9e54-6c19-965cb7813b78">
      <Execution id="7e941679-6dde-4452-a1d7-eaebe9f25ebe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new MockRepository(MockBehavior.Loose)|}&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5589b992-0f20-01f7-b368-8a893b2ed18f">
      <Execution id="09464458-550a-4d78-b60d-c483d616d789" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="808bbdfd-d61e-030d-5b04-dd27798bbaa5">
      <Execution id="49cac8af-9e8a-4e44-9fbe-8f104b792d6a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5027b8f0-3078-d394-0998-a0a7eaa40f62">
      <Execution id="58e18730-240d-4093-9cb9-1cbfdf308334" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a54d5e03-e9fc-367f-3019-7dd7504431df">
      <Execution id="0fb8950a-d27d-4c3a-95a0-c0f0d561fd50" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="187ad563-5bad-d3b3-afac-2ddbc36fb5e9">
      <Execution id="65ef0dc4-64f9-439e-9f6f-9b030baad782" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;(MockBehavior.Default);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="95dedf37-b449-7440-036f-feef4913bf3b">
      <Execution id="8e767a18-fe25-4b7d-ab54-63784f937098" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c2b7e3d2-2366-2478-0c3b-b9f03a61cbb8">
      <Execution id="2919aa46-08a1-47a7-ae7b-89ca26610b15" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldFailIsRealMoqIsUsedWithInvalidParameters(mock: &quot;var mock1 = new Moq.Mock&lt;IMyService&gt;{|Moq1001:(1, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ef71d298-26fd-5d0a-a981-7b1d1f2283e4">
      <Execution id="31fb0b30-553f-4031-b030-0c1f26fb010c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldFailIsRealMoqIsUsedWithInvalidParameters" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;System.Console.WriteLine(\&quot;test\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2e1051c1-9c4c-2067-a7c2-54cb9ce76371">
      <Execution id="0b223b0d-e32d-4a7c-8c8e-bc4d0941d33d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ce05186e-fee3-9111-d410-1f6ef219b626">
      <Execution id="eff86beb-af76-4136-81d1-52f3188dfe5f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock6 = new Mock&lt;MySealedService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ebaf7d3f-4c5c-80f3-2378-e249c404426d">
      <Execution id="5de6da15-a1e2-4092-9bee-55b72d04bf9a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0d443d03-f3e9-544d-e7ff-742d77f69748">
      <Execution id="ea1d3f54-3780-4819-ad4a-4e3d7af97585" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3665f86a-769e-2533-a14f-841ef38bfe38">
      <Execution id="7affac04-282a-426f-ab8c-308d1f01efab" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_IEnumerable_ReturnsNull_WhenMultipleMatches" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e60c9546-4b08-557a-7f8b-315299424fdf">
      <Execution id="543b5818-355e-400e-919b-fc42ace0e9e5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_IEnumerable_ReturnsNull_WhenMultipleMatches" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="97e33bdb-664e-3973-12fc-44e3769ceeb9">
      <Execution id="6fc83f52-d18f-4b46-a6ec-bb936814e07a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bc40d88b-dfd5-0701-7dc8-b811ad41dd36">
      <Execution id="db5dbf91-ff34-4d77-9366-5ec993a988d8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2f236870-3e46-5e00-1de8-d7f3d358f0ce">
      <Execution id="2980b4dd-4911-4547-b47d-3c207fa05e73" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.TaskAsync());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="11683885-c8d1-86e4-4271-3a874eed182a">
      <Execution id="2b7acffd-14d8-48c0-8e12-665cdab5366f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="14c44760-4e56-9d4d-b09d-9ff5f8b888fb">
      <Execution id="2fa943fb-d4d0-4f11-b72e-8232d612708f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(MockBe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="35602ef6-e4d0-391d-8aa4-fbb44b3b8639">
      <Execution id="3a2901d7-b0d0-457d-9743-cbe3e003c597" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f37721cf-0139-76dd-8f3a-ee43609c9bf3">
      <Execution id="a834ca93-2371-40a7-897a-335075995b6d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="74029020-936a-421b-05d8-a9ab4650f8fb">
      <Execution id="1fc12e57-7b3c-4d9b-9c24-538d0ee72fa2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="94ab8bca-607c-17fa-a5d7-20b6b82da8cf">
      <Execution id="23ef715f-8dfd-4c5d-91d8-d78df88fba78" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="85d26a70-67a8-c9b3-a3c1-b0cb8b77ff44">
      <Execution id="6ab49963-a66c-4b8a-bb29-c0f6a50dfac6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="70a86064-2cfc-9bc3-71a7-ce8a1d2afcd1">
      <Execution id="cfbd617c-8a27-48f9-8144-1dfccb6cee4a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4463e7c1-ae74-f38e-8e47-ff7d1b082a16">
      <Execution id="80db9bdb-bbcf-4387-8ab5-968c6a9df7b6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(\&quot;42\&quot;, DateTime.Now, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bff89dd8-97ef-eb10-bc88-ca68a1640b67">
      <Execution id="f062eaad-6d49-4f76-a292-5c02586181a6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6dbb92f9-cc1e-2f28-f914-5989efe552e0">
      <Execution id="801687d9-2f19-40fc-964c-0e6782153254" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClassWithNonVirtualIndexe&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2cbb2b59-e4c1-830c-c81b-a13a1d3ab21f">
      <Execution id="33b58fb2-4ca8-4642-bac6-861686463e1a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3d082234-34d3-7aa8-55d7-95a514257496">
      <Execution id="bcef83d4-a164-4b41-929d-f1455b759e76" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.GetStrin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="337001e7-7cf8-13cb-a2ef-22a93b02ab66">
      <Execution id="920ec162-2023-4aa9-881f-240344d2d360" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8ef3957b-abc9-1099-3ea1-845e371ff51f">
      <Execution id="b264ac3a-90a3-4327-ad4d-31e761559c8b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="447c9d9d-04ad-b43e-2339-91aebc980b80">
      <Execution id="cfd383ed-49c5-4a76-8467-f762b226a2e8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0237648c-8aff-cb22-c0bc-326f372b1479">
      <Execution id="f03dd441-aad5-4d96-973a-4dd881385201" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledGlobally(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="65383359-1398-8e84-011b-4be6651a9c1f">
      <Execution id="25794f01-0f7a-4310-9067-340cf9b4b825" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledGlobally" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1200:new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="17ab6ef3-409a-8d1c-29c3-f369ada273cb">
      <Execution id="b4800219-d61b-4bab-900a-7bc4f2c3c5e4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="db15e8e1-f53d-cb27-99c3-739abdffb1ce">
      <Execution id="7ebf28f7-a6c4-46bc-884e-5362cbce0a91" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nv&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1201572e-ade3-125a-549e-97ed61b623ce">
      <Execution id="6851e905-6f00-4e08-a056-a3cd8373e699" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x.Calculate&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1c2ea3aa-92f7-670a-c279-640437104291">
      <Execution id="68605e09-ad19-4a8e-8c6f-1bca3553aa34" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dd95884d-554e-cdf1-41c8-ccd0810572d1">
      <Execution id="31c3de8e-39d8-41ce-8511-58c68d30166b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomEvent += It.IsA&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8b692484-1227-b348-95bd-e59796d9e7eb">
      <Execution id="f7f15015-e4f5-47e0-9ae3-9727a9695273" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e6b0ecef-21fe-6463-9b4d-b9161063ea40">
      <Execution id="ea576596-6e11-4162-bb70-11825a3b3e60" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(21);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="413854af-fe3b-9cf0-1d28-96941551c7b4">
      <Execution id="1a60c61e-4a32-4306-9795-52e8c1bc85ec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int&gt;|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c1967d96-584a-f346-0029-ce4150b669dd">
      <Execution id="cf6cf39c-5c9f-465e-a9bf-28cc73f587bf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(new List&lt;string&gt;(), \&quot;7\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c552a047-c4bc-9a51-d335-4a335218b2f7">
      <Execution id="e08d8537-5169-4db4-8be2-9c13dc6a9cec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true, M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dc5c02ee-9c3e-feb9-4a04-0ec7d4037890">
      <Execution id="c5c6ff10-7119-4c79-9189-6ad2fd2afae5" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4a0de354-8867-0982-ba36-ec5aef98e532">
      <Execution id="60650067-a94b-4893-b198-187df622256b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="885155de-7d80-adfd-3ef0-d475318a68d7">
      <Execution id="077bb019-0510-4663-8c58-6e95db009aa4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cfddaee7-c7bc-f787-3555-eace198d730c">
      <Execution id="0635214d-3e57-4b22-b811-7b599163b61a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupGet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="44400f38-a2cc-1589-1518-806a85a87731">
      <Execution id="52caa2d7-f91d-4d06-a27d-9b0092f0a43d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5927cb7a-0333-198c-38f1-1cc0d7f90f3a">
      <Execution id="cc914c22-355c-465a-95a7-9c099b8b6d45" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(\&quot;42\&quot;, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b5c71270-fc4f-d076-831e-f732c4a47222">
      <Execution id="806d2d00-299f-4c91-99d9-07fccab2fa53" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fa7a80fd-a4c9-4b4d-10c4-cca9bd8d4ae5">
      <Execution id="d33933d8-435d-4fef-8e7a-e9db779b818a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new MockRepository(MockBehavior.Loose);&quot;, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a650ac64-f726-b56c-026c-2d977dc44645">
      <Execution id="8d00aa5d-3d8f-46a0-a0b6-48ab50bf4afc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, brokenCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, fixedCode: &quot;/// &lt;summary&gt;Some documentation.&lt;/summary&gt;\n[Obsol&quot;···, invocation: &quot;MyProperty&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="210ff133-d9cc-0e93-fb06-886f5f977654">
      <Execution id="0f88e85a-d861-48de-8548-51353fd10cea" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:string|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f367105d-4fbb-1326-b9f3-8af335965f94">
      <Execution id="4a0ed9e7-00a2-43ff-b0c9-e01984b7b437" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="267a53be-79ea-b7af-00b5-30631ccf5aac">
      <Execution id="f2c6b03c-fc77-4963-9faa-5ca55809dd79" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8f0c2dec-dea2-a0b9-3270-2764e2950034">
      <Execution id="244b8434-1282-407a-ad6a-8fdbb3e8b721" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new SealedClass();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ca1e4578-312c-50dd-a774-caee50afbfec">
      <Execution id="aa6e412c-3ad1-4987-9206-4c2b980f3af1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8c3bd743-6c3b-2348-a9c9-538f2fb75f25">
      <Execution id="4760f419-939a-4189-956b-8617bd70018d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Method());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f402aa54-18ee-edcc-a856-487808d1da85">
      <Execution id="e1119162-7dda-4c59-84bf-0fa004924021" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cee37f97-bb50-240f-7737-e77559985153">
      <Execution id="51cd516b-ca74-4d1e-95fb-cddb2138a377" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d903eb4a-efed-e801-a971-e1d2446a5d24">
      <Execution id="1e739da3-5652-456a-9274-b08d2d5a6940" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="54d6e4a3-138c-eb3b-3f35-dd9b40bb5f06">
      <Execution id="a7905b03-287c-4e5d-931c-fd842e0a2e3b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c20982a2-a31a-ca6e-aa9f-262244a2292f">
      <Execution id="c5d13c4b-399d-4309-b75a-04dd7493686e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3aa47f83-56cb-cdbb-ca49-1d01eab95eda">
      <Execution id="5fb50567-87c1-4e67-aa2f-d12c1dbac6d1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dfb72d58-f99d-0c39-ad55-e4d9110d6363">
      <Execution id="997e6c06-f35c-4531-9d21-8f0a0ebfdcdb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d4ab68b4-f595-9b30-4644-cabe72a3b81f">
      <Execution id="61c3f9ae-911d-42f4-a828-e9aa9ce43200" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c8fe4ad8-5f09-feb8-397a-460ee1c0ab56">
      <Execution id="1ec80867-1c98-4003-8ffe-4111e6bce26c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Loose)|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="34ff3004-ac12-2f3b-52da-13995ef4b4d3">
      <Execution id="83100013-c66e-44b1-b31a-21130c397eac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8eb5a606-b7d3-4c20-4e7e-c419bb67667c">
      <Execution id="b8fc3b4c-bb21-4f4b-b335-cf19a88b6f4f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2bd0ae2e-db62-f369-96c2-9578d90b0eb9">
      <Execution id="5db02632-1b64-4772-a115-c915184300be" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9920fee9-1e37-8e33-52bd-86415158ba28">
      <Execution id="3188bdd0-a0d7-4982-9181-f66082974fc0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:Mock.Of&lt;ISample&gt;(MockBehavior.Default)|}&quot;···, quickFix: &quot;Mock.Of&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="04f49772-32a1-488e-69c6-a255cc955d76">
      <Execution id="dd4c2ece-6f47-4767-ac1c-1af27ffc3add" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0eaced66-8011-c03c-b6f0-aec042fb1578">
      <Execution id="2458fff7-31e7-4bb7-a960-7ec06a1e1c0a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f918bfc7-11b6-163b-1685-4dc3bc3b669a">
      <Execution id="a2f90c0f-2c83-4adc-90bd-655ba1765006" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="57e60872-aa5b-2fa8-9bc3-6324a9ff6ab6">
      <Execution id="c0218446-e1b0-480f-9e2b-5d43587c93fa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="58db66fa-ba47-0932-fe1b-8886624fbb36">
      <Execution id="d9282cf1-088b-4f70-9377-6ef65d320055" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eb44f292-5787-9552-1e2b-12e154c08460">
      <Execution id="a3146c99-0eb1-4617-a17d-4cc166b95195" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="deb2b0c4-b96d-d563-daed-a2980220493b">
      <Execution id="e324fe8e-b918-4c63-8ffe-256c8e52fe34" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d091611e-e5a8-e030-98e6-ba24fa9b1cf5">
      <Execution id="0af28189-aa5d-4df1-b9fb-96ad7a7ef9e1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedClass|}&gt;(MockBehavior.Str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9f2734ae-1576-987c-d71a-5235b2f99444">
      <Execution id="3c408cdd-78ca-418a-8b6e-bd6aed156eb2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b19d8299-9083-8a39-38b0-aa008a8ced53">
      <Execution id="2caa2989-37f0-4025-86b6-0a314afa8bb9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="14fee0a2-07f0-bc1a-a1e3-5bf881fadb6b">
      <Execution id="0975bdd0-295a-4fe2-8a68-d54b15743912" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="78eb4e5c-eeb5-e3fd-fbf1-28e9bb6eb9a4">
      <Execution id="44894748-d4fb-4d37-bbf6-dffc0be82a21" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0384bf74-fb70-1a04-825c-8ada86fe45c0">
      <Execution id="8c2c2a67-47c2-4273-96b8-39efccd10e29" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e710482c-2a87-3819-9c22-bd8c01da4af0">
      <Execution id="e79a3c36-a1f2-40bb-8cba-7854b2f03c6d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f9baad39-ed40-1c95-664b-b42af8b4953b">
      <Execution id="1be383d3-02f7-4de4-8d46-3e1adacb55f4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bd20a732-3bae-ac36-388b-99311791e790">
      <Execution id="be620083-3ee7-402b-a793-1489e26479c9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c06e12ab-6e5c-1105-d97b-4a96cc9b10c7">
      <Execution id="8f5ee89a-3be3-40ed-8490-ac2613ff4e67" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f40faa33-4f1c-999e-1669-fecd9e09aecf">
      <Execution id="ba815c04-75c8-48b9-a60d-0f75e5c2a5d4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mock = new Mock&lt;NonSealedClass&gt;(); mock.Object&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fc9d3af8-2908-f74c-7f6d-8cc9bc3b5985">
      <Execution id="4df03416-e8dd-4f46-ad34-dd8fb1ea0e02" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="147cd71f-78bb-606a-8591-71dbfcfd57f6">
      <Execution id="447bf74f-cf6a-4473-a780-3a49bed1a92d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ee0f9233-92a2-e055-1512-08d4ca5197b9">
      <Execution id="cc623c90-d63f-413c-a0c3-d62166f78ee2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledWithPragmaWarning" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="559ae0c2-2866-688f-a4ff-d1d1bf6d7f22">
      <Execution id="0292a0e0-010b-4574-b7da-ab98c81ddd42" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dc4fc128-8931-b024-d815-bf9ea257740e">
      <Execution id="6a05c38d-32b8-49ce-9cc8-4c598bed1e4f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3b353857-5478-4e57-d2e1-522e54038d67">
      <Execution id="4436e3a5-38be-4bc1-8ca8-103303fd1cd8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="00f0223c-e7dc-cb22-ce1e-ef70a485e10b">
      <Execution id="4c132bfb-aa54-49e8-b87c-591dbefbc91e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoSomething(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3bf1fb73-95c1-ef7a-dbda-ac329b313cb3">
      <Execution id="d02c3cc6-a37b-4a72-b87c-a238b1d5a438" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff653a13-4c4d-1e09-9276-a3c393d461ea">
      <Execution id="fbcf588d-a109-42ff-8ed1-6ac3781598b3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a6e808aa-ba20-35e9-6cee-6ecb784fdc12">
      <Execution id="1f9d3fbe-8a8a-472c-9427-82ef40d1763a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldHandleEventHandlerPattern(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mock.Raise(n =&gt; n.CustomEvent += null, new CustomE&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="367e9d53-b1f2-7191-ec48-4448aa95cb33">
      <Execution id="e127e35d-da25-4a9f-a7b9-8ff1e8bf9044" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldHandleEventHandlerPattern" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7074496e-77ea-c202-e27e-7d6694e6cb91">
      <Execution id="0f72cd89-7deb-48ba-9558-bbaccc59d440" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="815c3bc6-ac0b-ed1e-e8c3-6c3cdbfe91ae">
      <Execution id="7529d7b6-9b93-48da-92d7-25808fe46b34" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="447c0cdb-b8ac-e10a-234f-e40236523e72">
      <Execution id="4a356fee-6692-4adc-bfd8-462cd5883d1e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="648d8e17-b4c1-2838-47af-2f90467efb06">
      <Execution id="6ea94625-b988-4d66-a512-85d275988ac9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock4 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a3a67ade-d1b0-ea1e-d585-ca0adad6eb30">
      <Execution id="0e8e8818-5106-484f-97e0-7e91bac0c809" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict) { D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7efa1121-70c3-5747-2a41-66c2ad8ebaec">
      <Execution id="6abcbdec-f028-4808-97cd-2af8ffbe55a8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.DefaultValueProviderPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidDefaultValueProviderPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.ProcessData(\&quot;test\&quot;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dbd95e85-25ac-2cc6-dc53-f91afc9e624c">
      <Execution id="1e0b7b43-4bf6-48d3-91a0-2d64958722b3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="afdb48fb-3fea-4c74-c764-e1845b9b7633">
      <Execution id="12c13bac-384e-4003-9c2a-4c204d25c19e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8f972a51-db87-1893-cb3d-87479f4e07f3">
      <Execution id="f9c5b8aa-c4a1-42e9-be29-cbf82b863470" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;IFoo foo;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6ea5300a-4156-6fef-dfc8-63fed6467f4a">
      <Execution id="0c8ad374-10b2-45df-9a98-464fb3b858b8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.StringOptionsChanged += &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="68754f32-e623-3220-d135-c04ea4b0e9e6">
      <Execution id="a3c538c0-a06c-4f43-a4f6-3936fadfddd2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5271f309-01fa-634b-903f-aec0bc3b5e99">
      <Execution id="5a786031-6e92-4c55-a996-1abb0f32cc73" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f479a5b0-4402-43b8-0ee6-39d5578e86eb">
      <Execution id="5e0006fc-fd69-4cbd-9197-5e782789d79f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="45d658bd-f3ef-758f-ccea-de7d58e6ad58">
      <Execution id="c746be7e-a6dc-41a0-b719-125d160749c7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock3 = new Mock&lt;IMyService&gt;(5, true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2c011c37-750e-02ce-6ed2-ed3915452d36">
      <Execution id="69bfc4f2-5dbd-44c1-bfc9-b1548cd49617" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.DoVoidMethod());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="81756723-a83b-6e1c-1e5f-bc7e8d6cfd12">
      <Execution id="88b15b35-7cb3-4a22-bff6-721ebb07041c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_RemovesElementAtIndex" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1754211e-6071-fd9a-f5a1-578cf7ab8cee">
      <Execution id="99125a88-e1ae-4923-9d7d-92d5b199a840" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.ArrayExtensionTests" name="RemoveAt_RemovesElementAtIndex" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ccd8c7cf-7fcd-45bf-5025-254761c9bebd">
      <Execution id="e08ec6ce-e8ed-419f-ab75-c9e22ea47717" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dfa12b1d-7789-34a7-a62f-c0acdd02b1d7">
      <Execution id="8ea2d2cf-4f3a-4978-b5e1-c5f44e55e77d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="42d36bf5-4d15-8675-d808-68fa800b87bc">
      <Execution id="b6fc24a1-236f-4d89-9257-d2cce2a6cf96" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.DoubleChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4df72243-87d1-263e-20f3-bd5c315bc93e">
      <Execution id="27298cd3-37a3-426a-b600-c9c25d00c464" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock5 = new Mock&lt;IMyService&gt;(MockBehavior.Stri&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3fc29aac-2d64-232e-236b-ae0adc0fd56e">
      <Execution id="ff5d4227-be4a-4c5b-9835-6987f83f3d63" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotReportSealedClassDiagnosticsWhenDisabledWithPragmaWarning(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2a6e5096-eb3e-e88c-c25b-4b74a56f6acc">
      <Execution id="651b676d-f9df-4972-9f4a-29681df76b96" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldNotReportSealedClassDiagnosticsWhenDisabledWithPragmaWarning" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop1 = \&quot;1\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ef400665-66d4-f249-bbb0-23a205302735">
      <Execution id="7c191b51-2f91-45d1-a688-a7d450ef6b79" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8bafc3a3-fa8e-8479-cb4f-7d0d2b50763d">
      <Execution id="a845ee2c-20d5-46c3-9d41-04408beba5bc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a5aee99b-a815-a85b-9132-0e6659aaf330">
      <Execution id="ffc780b4-b744-4eae-bb15-020162380bda" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleMockConstructorVariations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var type = typeof(Mock&lt;&gt;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b77ced1f-6288-4e98-dfbf-04b1d0bd2e81">
      <Execution id="76e76b4c-9070-45df-ace8-d730ab10d9f9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleMockConstructorVariations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="230078b2-43f6-3c9f-fcac-c42b7a1b7aec">
      <Execution id="5aac3be7-9d8a-404c-9dc7-d7dceb0ec4da" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="26038d57-9521-14e0-ebcf-97dd2aab2171">
      <Execution id="3a6174a1-5206-481b-9d7d-ea9416b85bf9" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bd569cf0-fc44-80ac-d268-06d64d833448">
      <Execution id="0d3298c9-b403-4abd-9da5-51fc9b971381" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4f1ce5a5-2cde-ed7c-9e82-5c71b386a093">
      <Execution id="94192087-20ba-4ad7-b53a-c88225c51a03" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="68db5aeb-2825-697e-952a-09eb4429543e">
      <Execution id="0549d688-c972-461c-9df3-fc17b5a35842" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9be5b8ae-83c5-0e0f-bd0c-8fe99d8c2867">
      <Execution id="fcb4790e-1927-4309-a72c-42c627299b54" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="64446e51-c162-6cff-522c-b8d7df1029f9">
      <Execution id="465df792-4a2c-4c08-a617-3288787e5493" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4913dce8-931e-9b0c-7020-279815c21ff9">
      <Execution id="1f189142-1b40-42bb-ba12-ed7094a0b844" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a7a64878-ae82-820e-78fb-33d1db187fa5">
      <Execution id="3373a7f6-14fb-47b6-9a12-74b620a11c38" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new List&lt;int&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c3875559-ba6c-d8ca-1153-59b82a603528">
      <Execution id="8195bcca-5e6e-4d38-8f1f-d8b743e566c2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="dc08abf5-2534-c408-1e7f-8412f44e2aa5">
      <Execution id="bdac2c9a-de10-4b5b-bcb0-92d6d9463b9e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7a5c79bd-8bb2-bd7b-59e6-009860cf60df">
      <Execution id="2de6a6e2-79ca-4b31-aac3-5e44f61bc7ac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenMultipleMatches" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1a7a3934-8583-8718-cb4b-cb078fd2b2f8">
      <Execution id="6ed822e7-d9e6-41ab-84aa-221ba83e1dac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ImmutableArray_ReturnsNull_WhenMultipleMatches" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.MakesNonVirtualMethodVirtual(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;public int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;public virtual int MyMethod() =&gt; 0;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4c164048-b2c2-047c-2865-01b3b2d926be">
      <Execution id="51d2f45a-74d2-4f05-b4bd-805f11d0c605" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="MakesNonVirtualMethodVirtual" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().VerifyGet(x =&gt; x.Test&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ab326a52-971c-78b7-895d-a95c1592ee81">
      <Execution id="e0600774-a207-4540-939a-d3bad7feef79" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e72f4a40-11e0-3856-6f27-9e62d9bf28d8">
      <Execution id="3409b579-d2bf-4946-bc9e-03653c1bcb69" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(1, 2)).Ret&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="74aab28f-9f7c-46c7-87ed-fa6a7f36642a">
      <Execution id="0984e81c-81e3-4ef7-a557-4cd8bec00040" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="060891f8-85fe-6c11-4a73-fb35cb109d02">
      <Execution id="02cea13d-ca16-48bc-92a0-5a36db97b428" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f4158d98-2984-c2bb-766f-527772ea0a24">
      <Execution id="d0d1cea2-7b5e-4d7d-a321-ee81a6d8cb1b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7cf592df-293f-42c5-93a4-cee84f8ec705">
      <Execution id="8c68acb0-832f-4a26-85a0-3ca43d4e0cc8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0f5397e0-47d5-3d17-5348-df08e189acbf">
      <Execution id="79e559f3-08c8-4859-b5d2-18aec605fffc" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCases(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="14bd3c72-e5fc-2f8c-7d5a-2b3635605709">
      <Execution id="ab977550-7a4c-4a43-82e8-93a541637aa6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCases" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="96a328c5-6282-d0c0-3358-2259dd9644cd">
      <Execution id="7bef2f90-caa9-4830-b089-98c70ddcea77" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop2);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fd522f2e-0bc7-5c1e-5748-4501860d7f93">
      <Execution id="0b28d7e2-a1c3-415a-a920-1d5ec87909bd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2c26811b-3009-2a2a-9d58-4483777b94c2">
      <Execution id="6630be3d-a6fb-4062-9cee-77309772e303" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.Ca&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3b4613be-1c29-e1b3-9335-2da174c05a72">
      <Execution id="62106046-15d8-4aa7-8954-fa265674e354" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2fa0664c-72aa-3768-312d-27aafd3319dd">
      <Execution id="94b8257e-ae51-4a4f-92d8-b02c82b8ef26" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldProduceDiagnosticsWhenNotSuppressed" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="606aca6b-78f2-520e-9cbc-fb1f7c2f6b27">
      <Execution id="abb141a8-7277-4bc9-a4a0-ce78bc4b84ea" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldProduceDiagnosticsWhenNotSuppressed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NoConstructorClass&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d0844210-d4c3-ea02-0ed7-748396c083bc">
      <Execution id="0facf587-929a-4891-9369-d12abd8a40f3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="817201d5-538d-c277-4d81-8f1fdc4ae401">
      <Execution id="0972a8b4-1c72-4097-96d7-976bc0e2fb20" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, \&quot;2\&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d354d7f0-ad7f-bd86-fd42-3ec5722402fd">
      <Execution id="05bb5dbf-7a91-4358-9580-29453510f8aa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;var mock = new Mock&lt;ISampleInterface&gt;(); Mock.Get(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="70609528-b21b-f912-b1b0-55b4725d4b2b">
      <Execution id="2043bbe8-332a-4e94-9c0c-c5ad6371c843" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;{|Moq1410:new Mock&lt;ISample&gt;(MockBehavior.Default)|&quot;···, quickFix: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c35b6a80-5b79-3795-55d8-38760e60134b">
      <Execution id="47a84580-6b5d-4d10-8e87-2ba5128a4992" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="39de103f-22dc-576e-a56e-d5c015c4d0fe">
      <Execution id="dd8c96c4-6a94-45a2-a4f5-ff0588467590" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="16958f2f-df54-f2e9-7500-3c37668c49a7">
      <Execution id="e8f4440c-0fbd-4934-9016-117b643dd2bd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1200:new Mock&lt;BaseSampleClass&gt;().Setup(x =&gt; x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3d770abc-1d13-2067-42ad-f78ca16b8497">
      <Execution id="427b60cd-dfa1-4d8d-979f-fce675cd578e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="34992958-035d-0d80-fa63-3ffcb7541fcf">
      <Execution id="521cbdf9-1bd9-4541-8e66-56ae0bf4c589" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c6477aec-6b3f-97d1-4f9c-b6878ea976f2">
      <Execution id="1b6b47a7-b08d-404b-aa33-57c284b37a2d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="49344f75-33a2-4e3a-af92-4d6b06050707">
      <Execution id="b8410ed4-fcd7-4f0c-934c-8e403e76e5c8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="631c2140-4303-6071-b086-1aab976e7e0c">
      <Execution id="bef7c669-c6fb-45e9-ad1d-c455f3d8136e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b90b552e-26fd-1e35-f96c-d7f905cb8a53">
      <Execution id="e71c1dfe-2705-45ba-96d7-9f14637821b1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsNullAndPredicateIsNotNull" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="89d8160b-8267-60e2-bcd3-00a79fa80f22">
      <Execution id="bf1c4323-2852-4c90-a722-0576decdb6ef" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ReturnsNull_WhenSourceIsNullAndPredicateIsNotNull" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8522f4ee-1988-581c-78ab-c78f68ff62f0">
      <Execution id="e10359ea-2387-45d5-8d04-f004291ecacf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var empty = string.Empty;&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b0cd9556-4025-93d1-a19c-7805f9c5be2a">
      <Execution id="683c57f3-a882-4d79-8841-b4ff9cde867c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="81e0c18e-4772-6fa1-d47f-787fdf9bb13c">
      <Execution id="21732380-b04b-4b82-b9a7-198cf1bacd79" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;object?&gt;&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7390f7b8-d477-bf52-2ded-5dcba132951f">
      <Execution id="66af2787-182a-4166-b886-2c2f30c2f284" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1400:new MockRepository(MockBehavior.Default)&quot;···, quickFix: &quot;new MockRepository(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="07409993-2127-76d8-31f1-28d42bdd87d1">
      <Execution id="a430ad9a-f635-439f-b182-eca644b0a38f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; x.Prop3 = \&quot;2\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f1cf13a1-ae98-b65a-d9a8-765a84782843">
      <Execution id="f17e6150-a400-46bb-a6f3-38b7a08d762b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="84b3a9f0-9236-3451-e4b3-f22664b2fd3f">
      <Execution id="a8f3f4c5-a175-4af4-95aa-888c3691e537" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldNotAnalyzeWhenMoqNotReferenced" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a3ddecae-919e-aa4d-afca-85a53850dee2">
      <Execution id="f5ff3c4e-e229-4a7f-b69b-d3820008fe88" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldNotAnalyzeWhenMoqNotReferenced" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(MockBehavior.Default, Da&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="733d5aee-e5e0-2236-47f9-958f554d3f33">
      <Execution id="5ed262d8-1d2e-4e2f-b6aa-76d626968c58" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleNullableAndArrayTypes(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedClass[]&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0e51c77f-5082-7ed7-d2a1-ab8f2290fb20">
      <Execution id="01984fe3-41de-45e1-ad60-9bae342d461d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleNullableAndArrayTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2466ecf9-8a91-44db-ca41-1904b7852a0d">
      <Execution id="e06f52fb-c5c7-4882-be26-696ed987c059" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="518e298e-2f3b-953e-8194-f9e2796cb5fa">
      <Execution id="d2c1c920-10b1-437f-919e-788720d2ffd6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(42)).Returns((Cus&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="160cec22-bcbc-e36f-6662-f4b2b718f138">
      <Execution id="8b8c4c84-923e-4a3b-9f96-144d272aa3aa" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fbdd4432-a0a4-9fbd-69ef-ea8091f13b7a">
      <Execution id="7cb38ebf-1b03-47ce-bc1a-2a61871cede6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(MockBehavior.Defau&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="66e63ca8-5252-053b-8302-ccce87fd75dd">
      <Execution id="2cd95623-f35e-4934-9b42-49465cad873c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cd1510dd-8416-2029-508f-cc9097a6f7e0">
      <Execution id="20e78a82-f0a7-413f-a221-bf248d521116" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0062f649-97e5-818b-179f-2265ea6a4f9d">
      <Execution id="08afc108-db5c-4c86-950e-82b44eb000b7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;SampleClass&gt;().VerifySet(x =&gt; {&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="93bf0a08-10eb-ab8d-ecf0-787e7d6afb59">
      <Execution id="963f34ae-4bb2-4d3b-ac70-550fe98db32a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b5ce423e-745c-f906-eb0c-b427a00322c7">
      <Execution id="e4a7d820-80e0-4f2a-952a-45cfeb9efb2e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((lon&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6747d5f2-c4db-bf89-281d-e801c4b8fed1">
      <Execution id="a7e10903-69df-4b89-a80a-14ae8238b3da" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Setup(x =&gt; x.Calculate(It.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="150a65c2-00b8-87ed-7d73-69e2b3dc2efc">
      <Execution id="7f0ddfab-ca66-44d2-80e6-80f6eed70b01" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessN&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c5e69ade-cbfc-7520-1a1d-3870e2da5cbf">
      <Execution id="84398b32-4fdb-4b5d-af81-196ab23ccaac" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassDefaultCtor&lt;object&gt;&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="188095da-1c05-9c9b-bb19-a755210a1209">
      <Execution id="d77d10d1-866f-4da3-8571-262642294868" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="34518a7a-1cd9-d74b-3938-aabd99247f20">
      <Execution id="0f64ab5c-818a-4941-9816-ddbd3a765f92" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="697d094b-7974-45c3-a631-a7b586f9a1dd">
      <Execution id="5eb9c8b1-90f8-4c7d-9c1d-08317fbf8d9f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a33bf16d-3acf-1fd2-48a7-d0e981840f13">
      <Execution id="1a244a52-cc63-4c07-b3b1-7f77ab3b425a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="54a7163b-30ef-430d-29ff-6a98f8904b7e">
      <Execution id="8b8f5fbc-e976-4a4a-8aeb-a41604ce22cd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Loose);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="96626b2c-b322-f72d-8351-42b78f38ad94">
      <Execution id="01d8f99a-023b-432f-92d4-eacfc6785d05" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, true, 1);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="75f93c4a-de08-ef70-93f2-7332046188a9">
      <Execution id="801ee7b0-f55f-42b2-a2ff-4c033a7942bb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(false, 0);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fd09cb2d-5fc8-0054-5f8e-49a22f7275d5">
      <Execution id="058a2daf-bb28-4828-8a5c-5f8e414afb9e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexGenericScenarios" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="12721ea3-8ebe-e8b0-4eaa-c7aaee8faad2">
      <Execution id="01bc6f19-165f-4999-898c-44ac74a73c46" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexGenericScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e61ed3e0-4274-df45-2ca9-2540936d6d6f">
      <Execution id="417f5cd8-f34e-414a-a8a5-6c2e10f2fe0a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;typeof(Mock).GetMethod(\&quot;Of\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e24a7b26-0ace-c455-f0c6-478137288d66">
      <Execution id="a6436c73-e6e9-4268-8be7-7f3b44930d68" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="17c2a940-7aaf-3c95-f2ab-507c4ff9d7ea">
      <Execution id="7a05e78c-ee83-4bc3-b873-1a89a72739ff" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldNotReportSetupDiagnosticsWhenDisabledWithSuppressMessage(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7fad766e-3e0f-d167-d85b-8a4507176670">
      <Execution id="697e39ff-0a0f-45fe-b393-ba2057ed711d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldNotReportSetupDiagnosticsWhenDisabledWithSuppressMessage" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldProvideAccurateDiagnosticLocations(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:System.String|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="af83e308-fee5-ce92-e01f-957aff26e23f">
      <Execution id="7f7bf15c-5f0d-4d1f-8742-d4f4c904bbaf" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldProvideAccurateDiagnosticLocations" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((int&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9b3e756d-f874-e5b2-3a94-363ffa3ec292">
      <Execution id="ff0927e1-adc3-4dd9-8624-378182935320" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().Verify(x =&gt; x.DoSth());&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f2ec93e9-2da2-4fa0-bfe7-1b41e9e050aa">
      <Execution id="c798ce96-e0f5-4c30-a653-f3d0f65e45ce" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;BaseSampl&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b40cc9e2-a2ee-98d8-d3d5-d1354af96000">
      <Execution id="42ce3540-a12e-460f-92e7-25edb20dbb6e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a96c3e30-6c25-ee48-b724-ee63d6381533">
      <Execution id="f319e597-c49f-40e9-ba12-b02e2b7ad24a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="baa3becb-7672-6248-cea4-41f450c631bb">
      <Execution id="cd5c6bef-4b18-4911-bafd-03844f30afe1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Calculate(1, 2&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3639ade3-815f-f61c-2017-a23d58f6d9d6">
      <Execution id="8f147dc7-a2b5-441b-8c2b-19cc6b3adc7e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;{|Moq1000:SealedClass|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a5a95e33-dbe8-6202-c6f0-a56f5419f704">
      <Execution id="38a0f16b-3392-4d6d-b1c9-d45cc364b215" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7078d1f2-a0c0-a2e9-8204-26e07496e15d">
      <Execution id="275317fe-c7ec-4c64-a8df-719e515c958f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.OptionsChanged += null, &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fa3456ff-71a1-75ae-acd4-91b534380251">
      <Execution id="01b8885f-9019-454c-bb57-5bdf4bf61348" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8754ba35-c888-46be-6e6d-ecfd0b9884af">
      <Execution id="7f64e3f0-20f8-407f-af4c-dab0be1bd3f0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f2f8b766-e5bb-791e-f943-b352efa53cd9">
      <Execution id="66ca733d-e2fa-4eb8-8013-25153576c478" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.GetValue()).Returns(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1603bd7b-a340-8d92-43dd-0ab95232aca1">
      <Execution id="802eb2d7-648f-4178-a00b-bfa7f704332a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeVerifyForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1210:new Mock&lt;BaseSampleClass&gt;().Verify(x =&gt; &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a25fe87c-52fa-1e10-48c6-8da95661c8df">
      <Execution id="a2ecd00a-a90c-454d-926a-5e42db173f13" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeVerifyForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(42)).Returns((obj&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bf36c91e-e6d7-e9de-8182-0e0bded6e071">
      <Execution id="e7a2c7f4-ffd1-4f69-b016-bc8c4304a8e6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="80418597-4e81-60bd-4646-4a9b7643c63f">
      <Execution id="0e0b9e92-88d0-41c2-8dff-24b181a1140f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; c.GenericTaskAs&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="04baf1e4-f02b-ac52-f21f-4f95c4501a8a">
      <Execution id="ee8aeea2-d72e-4b49-ad2a-540d97f7d664" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithoutParam&gt;{|Moq1002:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="49a2db0c-2000-b336-6b8d-4c1068b334ba">
      <Execution id="e80bf378-0c99-42af-8f69-7468e065614c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:(MockBeha&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="2cec5191-2f53-9d65-b339-02e794bb814e">
      <Execution id="74b709b4-494e-4f98-921a-315c111eabf8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;BaseSampleClass&gt;().{|Moq1300:As&lt;SampleCla&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f7e26112-1445-780d-977e-4db3fb622f73">
      <Execution id="3dcfec1b-fb45-48c4-aaa2-4124b7831006" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nI&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="33c00f43-3262-2298-a2e1-2c7504613afd">
      <Execution id="96241cb8-61cc-4ac3-bfe3-2da048fd27a7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true, M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="33513528-6bdb-f9eb-62fa-871637ab4407">
      <Execution id="eebb59e2-185e-438a-951c-313d1b0fc68b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:()|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e306c60f-2833-eb1c-01f1-6e6ad79b936c">
      <Execution id="2ddae27c-eedc-4e55-b854-febe4c62342e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6a680012-9b4b-42a8-eba3-b7ac3ca8ed3b">
      <Execution id="8109df10-4336-42e6-9d0b-8aa9486b1eec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupSet(x =&gt; {|Moq1101:x.Method(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="392e7459-7348-c714-fcd1-e0dda0a8e259">
      <Execution id="2c79e5a0-476a-4060-b98e-d85d734982e6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9804433f-d6ca-065f-ed44-a5e3561903cb">
      <Execution id="2ee5534e-deee-44bc-80fb-7c2efeb53958" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests.ShouldHandleAdvancedTypeMatchingPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IGenericInterface&gt;().Setup(m =&gt; m.Process&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="38f13c2a-e4a2-8c72-6bdd-315d00112cba">
      <Execution id="e921f26c-08fc-4ab4-954a-51e5395b60ee" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AdvancedArgumentMatcherPatternsTests" name="ShouldHandleAdvancedTypeMatchingPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;(42, \&quot;42\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c5ad02cf-276f-a66c-47f6-ca3585e38aef">
      <Execution id="e8690a24-4e69-4f47-9944-78b4a172c61e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f0e0acb2-12d4-14a7-4c51-4e445dfbaa37">
      <Execution id="7053705b-a97e-4862-a0f5-dfdf5af20c00" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests.ShouldAnalyzePropertySetup(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().SetupProperty(x =&gt; x.Prop1, \&quot;def&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8e6ec516-2c67-deda-43bb-0b0c7f8b171e">
      <Execution id="723378e6-497b-47fa-b693-796350998b1d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoMethodsInPropertySetupAnalyzerTests" name="ShouldAnalyzePropertySetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Name);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7c78c171-21fb-ada0-f5c0-13b32a33905c">
      <Execution id="d946c6dc-5153-4351-a6ec-1b008f62ecda" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;mockProvider.Raise(p =&gt; p.NumberChanged += null, 4&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="b1c1741b-9959-0b02-6ead-bb9a6ba96dcd">
      <Execution id="ee7e17e1-9318-4c55-a707-725bd35e5a86" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="eb5c705e-276a-b57b-9ec1-e3888dd98af6">
      <Execution id="1bde3cfb-a956-4def-88f6-6cf553ac44bd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="da35511f-e41f-285e-31d2-5f5ac07766d4">
      <Execution id="3e195468-9b5a-46c5-ab66-fb3402302b02" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldAllowSealedDelegates(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SealedDelegate&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="45df0e7f-c33f-1313-c316-5120c953ba74">
      <Execution id="0ab68356-be82-45e8-abc1-36ceef2c1b4d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldAllowSealedDelegates" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="812240f4-e092-2057-ec20-a37ad736875a">
      <Execution id="a7cdc179-44ac-4032-997c-745d5283f1bd" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;List&lt;str&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d7b34ec8-45c1-3086-2522-8e05df1fb973">
      <Execution id="97ae2ba5-7da5-4cef-b3e9-61c921ddac02" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;{|Moq1002:Mock.Of&lt;NoConstructorClass&gt;(m =&gt; true)|}&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="66cc7fdd-3411-a566-73b4-70262ac55b45">
      <Execution id="65d32a24-7433-4601-bd69-351b211cab0d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ed5441a3-2b44-6172-6cc4-b41691196e64">
      <Execution id="707b1bad-90d0-4950-a484-adf3beedce6c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultParamCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="512ff198-4421-dfa6-6484-dd58ceb28dde">
      <Execution id="47bcfe0a-5452-46f3-b505-b33c09e91197" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultParamCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock1 = new Mock&lt;IMyService&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c4e836a5-165e-318a-02b6-be8df818f474">
      <Execution id="4b76583a-5604-4085-8289-30f8e1bf5d53" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().SetupRemove(x =&gt; x.TestEve&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="46296023-0852-5426-aef8-97e05a13defc">
      <Execution id="ac4cdf92-3d81-4915-948c-e55154266b4c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 4, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="78234765-2208-fc90-af7c-2fec17072779">
      <Execution id="dd79563a-ab39-4e4a-b773-dc2d1127be20" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;SampleClassWithVirtualEvent&gt;().SetupAdd(x&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="6d1acd69-14d4-3261-4d51-5ff1fdbba306">
      <Execution id="805107c6-e83b-40d0-a9c3-1fb4012e6164" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.ArrayExtensionTests.RemoveAt_LastElement_RemovesCorrectly" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9637a5ff-5e5b-22e2-e219-4ed6b142cb0e">
      <Execution id="287d33e3-68b0-40b3-8a39-496f02563a53" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.ArrayExtensionTests" name="RemoveAt_LastElement_RemovesCorrectly" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldAnalyzeSetupForAsyncResult(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AsyncClient&gt;().Setup(c =&gt; {|Moq1201:c.Gen&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c24c56ff-17e4-db06-4d7b-8410ee4a29a7">
      <Execution id="aaa06042-e49c-4128-9e34-1dddd81d513c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldAnalyzeSetupForAsyncResult" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do(It.IsAny&lt;CustomTy&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0df20694-0b53-e534-cea1-17f10af0cfcb">
      <Execution id="b93dbdf7-1b18-4372-802b-124446c09925" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;int&gt;(), &quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c595018e-f6ce-a265-1602-8256b4a792ef">
      <Execution id="4b6cdde9-3f29-4a4d-b133-70f09ac63e9d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="24e82897-7471-acd7-1fe4-95f5e00133bf">
      <Execution id="2b7d8066-4598-4330-bc44-8c1ca2a585d3" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractGenericClassWithCtor&lt;object&gt;&gt;{|Mo&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="05de673f-2a6c-1d8c-aab9-b38f4f71e81c">
      <Execution id="80107751-6880-45fd-8217-85f013f75c4e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="42f415c2-fb88-e0b2-a114-dc50695b4b3d">
      <Execution id="ac1c3aad-d49c-4000-9cdd-38a5272e24f4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().As&lt;IMyService&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ae91daf1-32ce-a234-2301-7d14080d20e4">
      <Execution id="b0aa2562-a0e0-49cd-97f0-3f20c3457615" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(MockBehavior.Default, 2, t&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4ef72ed1-c31a-e243-67c9-e43375b6340e">
      <Execution id="a511c940-da13-461f-a3a6-785e3ef114f4" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="57395e97-2b3e-5551-1bcd-c454b28a8436">
      <Execution id="8d3537e0-1dfc-4395-aedd-f8fcf74371d7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="07bbd722-0772-ca21-49c0-970e2badb486">
      <Execution id="e9aaec6c-3d2c-4f66-93de-2b590e729016" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests.ShouldAnalyzeMethodSetupReturnValue(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1203:new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Calculate(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4c024474-4833-b78f-f0a1-611d0597d295">
      <Execution id="d7faabc0-b09d-4eca-a16e-da0cac438d7c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MethodSetupShouldSpecifyReturnValueAnalyzerTests" name="ShouldAnalyzeMethodSetupReturnValue" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests.ShouldAnalyzeMocksWithoutExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, original: &quot;{|Moq1410:new Mock&lt;Calculator&gt;(() =&gt; new Calculato&quot;···, quickFix: &quot;new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), MockB&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ca131384-82f6-83e4-2d9f-80361024a31e">
      <Execution id="e8cc8005-e919-46ad-a23e-0fb9dc6e6ed1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorCodeFixTests" name="ShouldAnalyzeMocksWithoutExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do(It.IsAny&lt;string&gt;(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="0bbd89e4-3a5b-dc97-977e-06217f4102b5">
      <Execution id="d5c55b1f-3ebe-4e29-b185-8ae0f9614dfe" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldAnalyzeAs(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;SampleClass&gt;().As&lt;ISampleInterface&gt;().Set&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="de64c332-bc71-9d34-4186-84fd6e761f17">
      <Execution id="9b2b5d8a-5de1-4ea3-8572-b0823773f000" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldAnalyzeAs" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests.ShouldNotReportDiagnosticsForValidMiscellaneousPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, testCode: &quot;var mock = new Mock&lt;IFoo&gt;(MockBehavior.Strict);\nm&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d5c079cf-8e5e-3c57-648d-56ac74f7510d">
      <Execution id="30c6288a-cda1-4e18-b0fd-5d5ce820206a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MiscellaneousPatternsAnalyzerTests" name="ShouldNotReportDiagnosticsForValidMiscellaneousPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:SealedGeneric&lt;int, string&gt;|}&gt;()&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="d8333fed-84ca-d5a2-bc34-5cfe5d9480c6">
      <Execution id="bf1092e4-e56e-4d26-870d-3f4cfc2106ec" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4497132e-df18-a2e8-e05f-0a6d822b697f">
      <Execution id="a4a065d0-8ea1-4329-bee1-0f2eb7d9aa18" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldNotIncludeAsyncResultAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mock: &quot;var mock1 = new Mock&lt;IMyService&gt;(\&quot;4\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1a2a372d-1e4e-5c9f-4553-477b72cddfe1">
      <Execution id="b716a89b-0b09-47e8-8a77-34a4c1e87de0" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock2 = new Mock&lt;IMyService&gt;(\&quot;param\&quot;);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="692fe558-2ca8-0879-02b1-56fb3585a329">
      <Execution id="691e286f-cd55-44f7-81ed-83ecb79004f8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldAnalyzeStrictMockBehavior(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;{|Moq1410:new Mock&lt;ISample&gt;()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="658933ec-f275-97b7-4599-cc8e60bbc74d">
      <Execution id="99e99709-06cd-45c3-8182-20a9249b8e30" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldAnalyzeStrictMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupSet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="c0a320d4-669f-b5ab-19f0-d64a51f682f2">
      <Execution id="f521923f-c1ed-4d2e-9ee1-fb893b45f480" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;_ = new Mock&lt;Calculator&gt;(() =&gt; new Calculator(), M&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="bab83788-1aad-4bdc-c752-354bb3b7846c">
      <Execution id="1f4d9195-a1a4-435f-876d-e6493278b124" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldPassIfExpressionWithDefaultCtorIsUsedWithMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeDelegate(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;DelegateWithParam&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="242f48c6-1a5f-dda6-4eef-44ddf68ee2a0">
      <Execution id="04105fc1-d5d8-43fe-8c09-50772693d6a6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeDelegate" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;(m =&gt; true);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a9919e51-800f-ec19-c41f-34f6587b8c4b">
      <Execution id="ff1157a2-930e-41eb-80ca-e4d6d1a536fb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5eebf41a-5069-0435-ceaf-9f5504d707b4">
      <Execution id="574556ba-3308-4979-ae9b-bd89c292ee49" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldDetectVariousCreationPatterns(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="831b930a-bc9a-73d0-2e8b-c8dd2cda553b">
      <Execution id="d46a39ef-4a00-424a-a948-439e8a1dab98" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldDetectVariousCreationPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CustomMatcherPatternsTests.ShouldHandleCustomMatcherPatterns(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ISimpleInterface&gt;().Setup(x =&gt; x.ProcessS&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4aab73c7-c72a-9808-aa8a-8e0a40a8259a">
      <Execution id="8e36d78b-4ef1-4b7c-ad5d-e837f32279ba" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CustomMatcherPatternsTests" name="ShouldHandleCustomMatcherPatterns" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;Foo&gt;(MockBehavior.Default, new List&lt;strin&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="db3e82e4-45bf-6ad0-0612-5944b09fca12">
      <Execution id="1463962f-b3b6-47ad-b52f-dffab5a7f780" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldNotReportDiagnosticForValidEventSetup(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, setupCall: &quot;mockProvider.SetupAdd(x =&gt; x.CustomDelegate += It.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="796860d2-6009-f817-20bc-a605880d865a">
      <Execution id="942cdf25-c14e-4e11-a15b-7612f472c9eb" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldNotReportDiagnosticForValidEventSetup" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShoulAnalyzeSealedClassMocks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;{|Moq1000:FooSealed|}&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="5ccfa7ad-6283-f63a-8d2f-bee38d894688">
      <Execution id="53b1c6b9-b564-4718-bec2-4630cac15d26" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShoulAnalyzeSealedClassMocks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldNotReportDiagnosticForValidRaisesArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, raisesCall: &quot;mockProvider.Setup(x =&gt; x.Submit()).Raises(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="39fd0507-c746-df7c-78eb-33264ba539a9">
      <Execution id="bc5aa36e-5f82-403b-bb82-f78cf3cd2e12" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaisesEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldNotReportDiagnosticForValidRaisesArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Cal&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3a6e8518-17bc-6ae8-120a-cecfd0376ff9">
      <Execution id="8865b3dd-884e-4711-bcbf-ef791c9af18c" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.EventSetupHandlerShouldMatchEventTypeAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ConversionTests(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(x =&gt; x.Do((int)42L)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="46dac1b1-26aa-f344-9429-03033a1e5592">
      <Execution id="45b6ed05-7b20-4172-9909-384cb7ad1001" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ConversionTests" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ITestInterface&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="7f711b18-b6b1-4833-3ef9-805c26688df2">
      <Execution id="14718b6b-d515-4c7f-b410-a98979b9e511" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(42)|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="db216584-ee9f-3d6f-5eed-f30ebcf2c868">
      <Execution id="2da5dd97-fc10-452a-b1dc-9d42c68ddc9f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithRequiredParamCtor&gt;{|Moq1002:(Moc&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="98a98465-2e2a-4289-12f2-17a4cc649802">
      <Execution id="86c01c17-c215-49a7-8142-0c27a669e1c6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests.ShouldAnalyzeSetupForOverridableMembers(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISampleInterface&gt;().Setup(x =&gt; x.Calculat&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="cc308633-3d62-d14c-1ee4-654f05b9dba8">
      <Execution id="d12ea6f2-2a2b-4f07-b9c8-5d5ef2cf97a7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetupShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="ShouldAnalyzeSetupForOverridableMembers" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;var mock = new Mock&lt;IMyService&gt;().SetupGet(x =&gt; x.&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8182a0a9-43ea-20ff-a4f9-380b8bdefbb6">
      <Execution id="8943a51d-14c2-400d-98b0-a131fbe2d2de" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.AsAcceptOnlyInterfaceAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleVariousBuiltInSealedTypes" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="610374ef-1122-fcaf-70f5-1794f8e8353e">
      <Execution id="3394fb38-34c4-441e-b866-30f0fb0d4691" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleVariousBuiltInSealedTypes" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;Mock.Of&lt;ClassWithDefaultParamCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="02e99185-227d-462e-8aac-1229e6a642b8">
      <Execution id="b6b9f857-038b-469a-95a0-bdac2e90ebc8" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;var behavior = MockBehavior.Default; var mock = ne&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ae7d6803-11e1-0081-ce63-78bec00670a7">
      <Execution id="23afa485-39a7-4063-b891-4a9f4b76ea4d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;ClassWithParams&gt;(DateTime.Now, DateTime.N&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="376ee951-053d-13de-9e15-70c7b500bfe0">
      <Execution id="1a75b4bb-3056-46f6-8087-eeaae83c7c7e" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mockCode: &quot;Mock.Get&lt;string&gt;({|Moq1301:\&quot;literal string\&quot;|});&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="f43e6809-eb14-3b12-a789-e94127015d35">
      <Execution id="4bbe8220-2e36-48c2-8509-471b0b0b245d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests.PreservesModifiersAttributesAndDocumentation(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, brokenCode: &quot;[Obsolete]\npublic int MyMethod() =&gt; 0;&quot;, fixedCode: &quot;[Obsolete]\npublic virtual int MyMethod() =&gt; 0;&quot;, invocation: &quot;MyMethod()&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="88b5cbc4-8fe5-08f7-7ce9-297f40b5cb60">
      <Execution id="afeeeb2c-f742-4151-a322-aec3743ca770" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.VerifyShouldBeUsedOnlyForOverridableMembersAnalyzerTests" name="PreservesModifiersAttributesAndDocumentation" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests.ShouldAnalyzeExplicitMockBehavior(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;ISample&gt;(MockBehavior.Strict);&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="4d082c57-7250-986c-b28f-267288bcf6d6">
      <Execution id="8bb37a6a-3e59-46fb-a252-54d906da1ec2" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetExplicitMockBehaviorAnalyzerTests" name="ShouldAnalyzeExplicitMockBehavior" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="aa8d8c79-8ba8-903f-8b9e-16718a9150f6">
      <Execution id="de44fc3e-4442-4e06-baa9-ea2a7961840d" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests.ShouldSuggestQuickFixWhenIncorrectCallbacks(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, original: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···, quickFix: &quot;new Mock&lt;IFoo&gt;().Setup(m =&gt; m.Do((long)42)).Return&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="a019126c-f5d4-536a-2f4c-0a668bd0c076">
      <Execution id="f83c2433-9835-4cf0-8de9-6b16a8d7b14f" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.CallbackSignatureShouldMatchMockedMethodCodeFixTests" name="ShouldSuggestQuickFixWhenIncorrectCallbacks" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;AbstractClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="154b074a-bba6-ad40-3c74-d79e0a8da8d4">
      <Execution id="bbaeaaaa-d4d6-4596-80fe-92640b102895" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;new Mock&lt;Foo&gt;{|Moq1002:(new int[] { 1, 2, 3 })|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="380d2d8a-9dc3-48d7-d960-d918f94e2286">
      <Execution id="bf7d827f-54a6-4cd6-80e7-ed31e6f63206" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithNoCtors(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var repository = new MockRepository(MockBehavior.D&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e11ad657-1d9e-f2b8-d4ff-d360443f60a0">
      <Execution id="716adb43-2b7f-48c2-9510-5d9464945686" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithNoCtors" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests.ShouldAnalyzeMockGet(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mockCode: &quot;Mock.Get&lt;ISampleInterface&gt;({|Moq1301:default(ISamp&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="e2391ef7-c0d1-0db9-bdd4-ef2c1c91aa1e">
      <Execution id="fdf59976-21c1-473f-a811-76e03b97951b" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.MockGetShouldNotTakeLiteralsAnalyzerTests" name="ShouldAnalyzeMockGet" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleEdgeCaseMethodCalls(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;var mockInstance = new Mock&lt;NonSealedClass&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="59878915-f70b-9901-834c-54c0c28aee51">
      <Execution id="d4e39f43-b0e3-4dc4-902b-327150e995d7" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleEdgeCaseMethodCalls" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.Common.EnumerableExtensionsTests.DefaultIfNotSingle_ReturnsNull_WhenSourceIsNullAndPredicateIsNull" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="fcf34d21-95d8-5bc8-1727-c3e33bc18148">
      <Execution id="f85887fa-c24a-41fc-b4be-5cc63d63d406" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.Common.EnumerableExtensionsTests" name="DefaultIfNotSingle_ReturnsNull_WhenSourceIsNullAndPredicateIsNull" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeClassWithDefaultCtor(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;&quot;, mock: &quot;Mock.Of&lt;ClassDefaultCtor&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="3571e194-5a11-a702-1187-42be1d4cf4b9">
      <Execution id="08684fd5-22dd-4d98-83c7-282a177e050a" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeClassWithDefaultCtor" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithCtor&gt;{|Moq1002:()|};&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="757f98f1-6b15-febe-4c27-feb2a5242929">
      <Execution id="e6847b8d-b6a7-40a9-8451-ce36d61aff59" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests.ShouldHandleComplexScenarios(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;NonSealedGeneric&lt;int, string&gt;&gt;();&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ff90c02b-a0a7-7a7f-ccac-06eb6c6eea6a">
      <Execution id="3c0f28e6-a745-4cd2-9e8b-9ded50af3310" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.NoSealedClassMocksAnalyzerTests" name="ShouldHandleComplexScenarios" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeConstructorArguments(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;AbstractClassWithDefaultParamCtor&gt;{|Moq10&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="8cf13320-6d6d-9d1b-ca67-369bde33cd8e">
      <Execution id="dfe95d20-a594-45e1-8ccb-17206aa6fc78" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeConstructorArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests.ShouldAnalyzeInterface(referenceAssemblyGroup: &quot;Net80WithNewMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, mock: &quot;new Mock&lt;IFoo&gt;{|Moq1001:(MockBehavior.Default, 42)&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="ef271cf1-b26e-fce0-565c-0fbac50cfb9f">
      <Execution id="a90d4fc0-55a7-4a85-88fa-d009ec74e5c6" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.ConstructorArgumentsShouldMatchAnalyzerTests" name="ShouldAnalyzeInterface" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests.ShouldReportDiagnosticForInvalidRaiseArguments(referenceAssemblyGroup: &quot;Net80WithOldMoq&quot;, namespace: &quot;namespace MyNamespace;&quot;, raiseCall: &quot;{|Moq1202:mockProvider.Raise(p =&gt; p.StringOptionsC&quot;···)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="1d8de6c3-a4a1-02a8-4ccf-b1865a6a0863">
      <Execution id="7d4ebfc5-865e-4be0-b050-4a6000097de1" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.RaiseEventArgumentsShouldMatchEventSignatureAnalyzerTests" name="ShouldReportDiagnosticForInvalidRaiseArguments" />
    </UnitTest>
    <UnitTest name="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests.ShouldPassIfCustomMockClassIsUsed(mockCode: &quot;new Mock&lt;IMyService&gt;().Setup(x =&gt; x.Do(\&quot;test\&quot;));&quot;)" storage="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/moq.analyzers.test/debug/moq.analyzers.test.dll" id="9a665167-a7ba-6003-5af0-e7318f8ddd7a">
      <Execution id="0afad8d3-981e-4e30-b8d4-803b76604964" />
      <TestMethod codeBase="/home/runner/work/moq.analyzers/moq.analyzers/artifacts/bin/Moq.Analyzers.Test/debug/Moq.Analyzers.Test.dll" adapterTypeName="executor://xunit/VsTestRunner3/netcore/" className="Moq.Analyzers.Test.SetStrictMockBehaviorAnalyzerTests" name="ShouldPassIfCustomMockClassIsUsed" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="c8bce6de-69a0-d3ef-583c-aee1c6e23564" executionId="0fe04644-1ae0-4514-afa6-c1a99a23b6d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3207fedd-90a4-cd88-425b-109a5ca51fab" executionId="81abee48-9efe-4f01-b8e8-7a5e80cda96f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3875559-ba6c-d8ca-1153-59b82a603528" executionId="8195bcca-5e6e-4d38-8f1f-d8b743e566c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="222062f1-b98a-6d67-5177-f3954ec794f6" executionId="e56fec67-2dfb-4f8f-bde6-f6170a7dc334" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="65ec4905-d3ba-4b45-9387-b7cd5e05e6b3" executionId="7fc88adc-a289-4803-a79f-d9067235b1ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af83e308-fee5-ce92-e01f-957aff26e23f" executionId="7f7bf15c-5f0d-4d1f-8742-d4f4c904bbaf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="495f0522-c9a7-b1e6-2d9c-1f59f26089ed" executionId="2869457e-d483-46f8-825e-5291ac6c2b90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2391ef7-c0d1-0db9-bdd4-ef2c1c91aa1e" executionId="fdf59976-21c1-473f-a811-76e03b97951b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a899a9ac-d8ea-b440-f174-6dea5d42448b" executionId="dedce4af-bd17-4deb-acf0-5f7d38a3294e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34518a7a-1cd9-d74b-3938-aabd99247f20" executionId="0f64ab5c-818a-4941-9816-ddbd3a765f92" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df8d35b2-59ee-479c-1f46-6fab45d2c7b0" executionId="6702b59b-ff7e-456a-a27a-76d417d31ef5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf8e3931-af37-2b1e-2602-85f7f872e277" executionId="128e259e-d552-4bb7-87fa-af3208292666" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0435a85c-5725-2ad5-34d3-c5bc557cbdba" executionId="27148e31-7aca-44d8-8662-0bd8bfb8ce19" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0795ba85-ce1d-73eb-4b58-a8665266cd8b" executionId="42dadc7b-df53-4cb0-8bde-088b9eab87a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd2d9d46-a5ea-96f9-1301-506ce9046dd5" executionId="920a5318-ed1b-4021-a4e4-8d29cececa26" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80ce2de6-bcd5-2ea5-e710-7a2854074a19" executionId="c74fe798-159d-4ae9-8aa7-ef4efe4d53cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="feb836c1-b7dc-030d-9724-d1e765d27e98" executionId="0bfa793f-edff-4d38-beb1-4bfc8948dcbc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fdfbd869-baaa-2aa2-9650-f88e92e18cee" executionId="e24a20e1-1991-402c-bd83-cbd78f244514" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="215393d0-79a5-1468-c52e-f6e39820fec4" executionId="0e0115e6-68f8-47ba-a1ba-cecffb52adb0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="453ee420-0b7b-27c4-aef3-03698ce46a66" executionId="14231bb3-6440-4bdf-9e18-c0de990b58d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34df28b6-89bc-581f-3ae9-0331896f7b76" executionId="cd87314c-a553-47b4-ae16-195de6f31eb0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7cad1de-0cf4-e0f0-de34-0549ffe07d6a" executionId="882f93b6-6315-4f91-91c1-2349deac9582" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e9f1f437-597a-3172-349d-8e27eda6f83e" executionId="f5ddb297-9063-4c4b-9e2e-cbec90a24087" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3a4261e-92ac-644f-d1da-7742eb54c855" executionId="b8426158-5160-4f8e-af93-62d24c2149fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="307430d6-addc-611e-b95a-7924122b9d9e" executionId="a9cdb98c-cbbc-4098-acd7-151e2dfcb992" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a986896-84dd-38c7-3f2f-1056e939f372" executionId="f0d3417c-1a27-4ed6-a6dc-7edb1867b10c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b353857-5478-4e57-d2e1-522e54038d67" executionId="4436e3a5-38be-4bc1-8ca8-103303fd1cd8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e60c9546-4b08-557a-7f8b-315299424fdf" executionId="543b5818-355e-400e-919b-fc42ace0e9e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c013d0c7-26ac-c939-2ea3-38bec193f1f4" executionId="de22bb7a-e919-49e9-a422-b7472b34aa86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6ad22b3-3797-657d-5dc3-fa2762249d95" executionId="eb03a9c0-6449-4ea9-8691-00973833ff8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0ae0ffa-b00b-cf15-e137-d044388a5bc4" executionId="0fa815ed-1942-4d2e-a3e5-15394033a52a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9b7ae5d-6fdd-5595-bb78-e18939d81c9d" executionId="6001d685-16cc-4236-95ce-0d3a33c2a2b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c164048-b2c2-047c-2865-01b3b2d926be" executionId="51d2f45a-74d2-4f05-b4bd-805f11d0c605" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18a7724e-1d27-ff07-fe96-877f46b00d6b" executionId="b56f2d12-7170-457f-8cb5-6fd198d6507f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b82b4ff-b326-8dd3-15aa-f9ed0cb8567f" executionId="25e201c5-2913-421d-87fa-497b4d0581ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="267a53be-79ea-b7af-00b5-30631ccf5aac" executionId="f2c6b03c-fc77-4963-9faa-5ca55809dd79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96c1198b-4b2c-7824-8f08-59e24623e3bb" executionId="f8eee4a4-f6bf-49ee-b5d4-f6a20ece9771" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="447c0cdb-b8ac-e10a-234f-e40236523e72" executionId="4a356fee-6692-4adc-bfd8-462cd5883d1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14bd3c72-e5fc-2f8c-7d5a-2b3635605709" executionId="ab977550-7a4c-4a43-82e8-93a541637aa6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e72f4a40-11e0-3856-6f27-9e62d9bf28d8" executionId="3409b579-d2bf-4946-bc9e-03653c1bcb69" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28cb3145-b2fc-c564-91de-5cb0cfd0b9de" executionId="20bb08c9-b1e6-4909-81ba-58f22ff2a014" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4f4118a-4e5b-a60c-768e-fefaf93cc854" executionId="c7465ff7-dc98-461e-a889-e5c81223e3d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d3324c82-ef5a-5fdb-6786-34dee5cc16b5" executionId="acdb8802-3db2-4e2a-a781-e7f39e3fab82" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff67983f-a08d-8ae6-30f8-797fe5ebc29b" executionId="ddbe9f39-765b-4ff2-b4eb-82937ad6d2ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b30bd7c0-056b-404c-ca86-6df314217d41" executionId="0d6cdff2-a89b-442b-8422-ac603726e689" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0de6683-ea88-c688-a958-3a7680427192" executionId="f7144d0e-2e20-48a6-9cc0-1acf31e5b670" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cfddaee7-c7bc-f787-3555-eace198d730c" executionId="0635214d-3e57-4b22-b811-7b599163b61a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6e808aa-ba20-35e9-6cee-6ecb784fdc12" executionId="1f9d3fbe-8a8a-472c-9427-82ef40d1763a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14f7ee72-36f2-1b05-ad35-0fa12232daaa" executionId="017539b2-d8dd-47f7-88d7-130bbc4f0d8e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8a756cd-a0d2-097e-b24d-f2afca7f0464" executionId="e9d41399-9b13-4da7-a0bd-bcd85963693b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="38c8274b-5b3d-ca62-31af-dd8e70824ff5" executionId="85c438bf-a69d-4960-958a-fea8b2dedf0b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49344f75-33a2-4e3a-af92-4d6b06050707" executionId="b8410ed4-fcd7-4f0c-934c-8e403e76e5c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="931e394d-f30c-d46e-cd32-44de44d715b6" executionId="960789da-ef3e-46db-bb0a-c674d3a1eb83" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75f93c4a-de08-ef70-93f2-7332046188a9" executionId="801ee7b0-f55f-42b2-a2ff-4c033a7942bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54d4b074-d83b-d0e3-5b1b-590faf970865" executionId="b47aa8a6-d6c5-4989-b5ea-729a0da4558f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e171d48d-ebfc-79d6-4dab-e109afd22556" executionId="aa17d9d3-68eb-4d4b-9454-74d8b6ca2510" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a2a372d-1e4e-5c9f-4553-477b72cddfe1" executionId="b716a89b-0b09-47e8-8a77-34a4c1e87de0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27df31b8-deb1-dc6f-0c1e-cd7d663b4d7c" executionId="f5298100-cd0a-40b1-97cb-4863c1c7488b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="369301a2-fea9-725a-75d0-5d43f7e31964" executionId="8c6c2f46-be8f-47fe-9af5-34748bc69790" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="44770953-fdc8-b029-e601-0c880a375c3a" executionId="7b7f05c6-0f79-419a-b344-d21761d24bd9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e51ee1df-bdd3-3c1e-8d52-c99803ceea24" executionId="ab6c7f2e-af8f-441b-9e8a-4ffd8bdabe96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60c76dc5-4c4e-b32f-b77c-7d308c2dfc19" executionId="27e7c5d3-f63c-4431-9a19-c6c98bd44e81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f236870-3e46-5e00-1de8-d7f3d358f0ce" executionId="2980b4dd-4911-4547-b47d-3c207fa05e73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae0fbced-2298-222c-b00d-1eb146d4516c" executionId="1ca3e33a-7d54-43fc-b8a0-3d3460463246" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54bfa6a2-6f3d-3e09-b29d-fb612642abf8" executionId="e711efd3-1999-4065-98f6-41de9a68599d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b0cd8a3-e242-d4f2-01dd-506b84c1c3d0" executionId="586252c6-eb10-4d1c-a1ce-282a78f54133" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91ee4c58-379e-4809-0012-5d644f69ae03" executionId="39b3604a-0795-412c-8182-16ebde8e7b6b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="989ed284-ae58-8273-6075-856d45f9d69c" executionId="20d39f5b-623e-4d79-8077-525da86296a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="916bd290-0ab9-fe4e-b092-45bd9cd2ed00" executionId="2ed457c5-8fce-4586-a8ad-bb26b5518d1c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed980dc6-0394-d430-fea3-bcf91e9b80e6" executionId="330cf2b1-668a-4958-800b-7b8c94bcc5fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c595018e-f6ce-a265-1602-8256b4a792ef" executionId="4b6cdde9-3f29-4a4d-b133-70f09ac63e9d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="635aaa3a-d93f-fa5b-1fe8-c6cf66c7eb93" executionId="3eae7340-b47a-42e6-b06c-0e017dc74be2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25440e48-7e58-8e1a-ca5a-0980f370ec08" executionId="76bd1e2c-de34-4a7b-b7de-5f3bd6f9d7a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40a59b2d-37fc-050a-c610-545d3a6b187a" executionId="acc1034d-1edb-4687-b708-34da5535373f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="519e8547-e292-17a6-820b-656a609a3aee" executionId="be0a5b85-7c5b-4e37-807e-248320a24d51" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d98f073a-7ce5-6eb5-1be5-e8ea3ab7064b" executionId="b7268402-cead-42d5-a4f4-e7773f4a7c55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7078d1f2-a0c0-a2e9-8204-26e07496e15d" executionId="275317fe-c7ec-4c64-a8df-719e515c958f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70a86064-2cfc-9bc3-71a7-ce8a1d2afcd1" executionId="cfbd617c-8a27-48f9-8144-1dfccb6cee4a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94d077aa-42a9-02df-cedb-9f6304760e13" executionId="0bc5c7d8-10ac-411b-bce0-454aa26c1145" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b43bb6e2-2962-f083-9d22-1cdeacc8fc35" executionId="b08fd592-2e69-43d2-9f71-9b2329132ed6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a7b1ff9-dcc6-0df1-bbae-11939eee6684" executionId="1ce067db-62e2-43ee-b58a-4661469a7e4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="447d92ff-a11c-8677-f5e5-e66a62b7db44" executionId="876ea201-7ba7-442e-b169-116619931b8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="845d2943-50c7-1222-88fa-08d770bf7129" executionId="5f0f31d2-1b68-4349-bc41-6f4be037732f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8eb5a606-b7d3-4c20-4e7e-c419bb67667c" executionId="b8fc3b4c-bb21-4f4b-b335-cf19a88b6f4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4933e3d-e658-e8c4-5656-25bafef17bc5" executionId="7dbcafbc-f0b3-46e8-824a-6d76f6c1db3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d082c57-7250-986c-b28f-267288bcf6d6" executionId="8bb37a6a-3e59-46fb-a252-54d906da1ec2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea7497a8-e682-019c-2264-80a65489c59b" executionId="05b1a204-79ba-4f1d-968e-8e1d4301e9e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd20a732-3bae-ac36-388b-99311791e790" executionId="be620083-3ee7-402b-a793-1489e26479c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="db3e82e4-45bf-6ad0-0612-5944b09fca12" executionId="1463962f-b3b6-47ad-b52f-dffab5a7f780" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff5e99fb-4a04-235c-d50d-9679c70b0b05" executionId="91591662-2abf-42e6-8ba2-7f19ab94477c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e189c17-77e7-fcf7-ee5d-bc133ae19b97" executionId="5d330e2d-4419-4b25-9b9e-3e7e15ea04ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ec73178-8587-635f-a9a8-1aebd2dcc81e" executionId="a25bd8cb-698b-4c0a-ba2d-b0af996e40e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab326a52-971c-78b7-895d-a95c1592ee81" executionId="e0600774-a207-4540-939a-d3bad7feef79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2fb77fd-c040-1248-3eb0-28407cf45126" executionId="c15b0e03-b657-484a-9fc7-fbe48500eb07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0537bda-04f5-08c9-c19d-dd3495d5f478" executionId="db9120a3-42d3-4b8f-b926-7e0c5e87696e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa76dbb3-9096-0d0a-f3e3-d2314e84ea11" executionId="4ae6a182-98f9-4c43-ac30-2f4b26f92e18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a96c3e30-6c25-ee48-b724-ee63d6381533" executionId="f319e597-c49f-40e9-ba12-b02e2b7ad24a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac20cadf-ebae-bb3e-b742-1a375cd302b9" executionId="b2db0b55-2e13-43a4-b4f6-2dff5be36ef7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d091611e-e5a8-e030-98e6-ba24fa9b1cf5" executionId="0af28189-aa5d-4df1-b9fb-96ad7a7ef9e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="627a1a20-1cfe-bf9b-e958-d12fc7f814fd" executionId="33a101c1-0f72-4f0b-8632-7356ee9bb7f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d807e89b-ed9e-f280-c741-aff0f94d4b01" executionId="fc34a8e4-21ee-4c1b-8fd1-87103cb1674e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fce1d262-0491-e21a-8bcf-34b8bf53021f" executionId="b92b0470-6469-4116-be11-25fee353abb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="383c0209-3a8c-6c13-1ad2-1a4e0e7f0d0d" executionId="cf6e10d8-c00c-4765-85d0-688964005b9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c67ac09-995f-a8f8-1586-40323c310ad0" executionId="56b415ca-4570-4661-b66f-f509b7e9aeed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1374a7ae-ee43-4141-716a-e6c49614136c" executionId="e12443db-0a68-4b91-9015-c87d9f2fdf22" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02501572-be45-5f55-62eb-e470d85df547" executionId="0acb5423-8974-47aa-b7fe-b15ff794ab63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b83f25a-bcd7-2ee6-3c77-1c52235b6b7b" executionId="4de697a1-e7ed-4c57-befd-4ba3fefa5af6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a7a3934-8583-8718-cb4b-cb078fd2b2f8" executionId="6ed822e7-d9e6-41ab-84aa-221ba83e1dac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24e82897-7471-acd7-1fe4-95f5e00133bf" executionId="2b7d8066-4598-4330-bc44-8c1ca2a585d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83a1de75-ac25-d2e2-f696-c129dc3b533f" executionId="6d5918b9-0ac9-4349-88d5-57230f85329c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f96f86f-05a1-4871-bad8-bfef2eb50f7c" executionId="34a5ffc4-b1a6-4c35-a659-d76646173910" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee2fce53-6fac-96c2-0c79-595291907672" executionId="c9e10a44-259b-42df-90e2-6e378575f88c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd385045-d4c8-916f-20c0-3c491744135d" executionId="12f91524-dcab-41cd-9b8e-271599b263ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6bfca6e9-be8b-df0d-b566-5225ea1e6c64" executionId="0708c702-b4e4-48f7-9554-1e81b0da9423" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c5ad02cf-276f-a66c-47f6-ca3585e38aef" executionId="e8690a24-4e69-4f47-9944-78b4a172c61e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="413854af-fe3b-9cf0-1d28-96941551c7b4" executionId="1a60c61e-4a32-4306-9795-52e8c1bc85ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e306c60f-2833-eb1c-01f1-6e6ad79b936c" executionId="2ddae27c-eedc-4e55-b854-febe4c62342e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87806d17-b69c-e960-cfda-1a55d4fc7f2b" executionId="70553cee-dea6-4314-af7d-bcba9da8139a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f139f5ac-f240-83d8-f623-c1567622a139" executionId="1d85fc02-3eb8-4fc1-8b4f-e46261812f58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05b7ddbc-4e92-0a6c-b7a0-005564b78e17" executionId="c448d8c1-5dc1-49cd-9d0a-0c3b92f9b4e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f3c99b1-36a5-f753-0fc3-0786370c60e3" executionId="15ac03b3-b199-4687-8080-43af0264e8c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7fad766e-3e0f-d167-d85b-8a4507176670" executionId="697e39ff-0a0f-45fe-b393-ba2057ed711d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88b0edc6-bd51-7d04-1f6c-ab4fc7940b6c" executionId="d3964596-4f3b-4d52-a148-bb6c2b21e449" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78826fd7-3ad2-e401-6c6a-b38f3eec38bb" executionId="8d7c3e32-b644-4d1b-b31e-cfb4c2939d34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af0465d9-15ea-2855-23c1-d25706ddfb4a" executionId="66412100-c2c0-4bca-b755-18f97bc8316f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb28d933-f13d-d4f7-d00b-566a1d5fc9b0" executionId="d69c0825-c01f-48fb-ba91-9f3e71796627" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31b9211e-5e4c-1b32-1f26-b112038cb1da" executionId="925f1e2e-caa3-4c5e-bc23-57d9b37030c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc2a7fb0-b711-a032-e42d-9e4dfd6251f2" executionId="55915d00-c651-423c-a4df-8d3da7689690" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a83f806-8f22-ae83-a082-590827d93218" executionId="4806c07c-7683-40a4-b100-6a38cac9c9b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c08961be-429c-46f9-1bd6-33b22621c518" executionId="d2fa4acf-45e7-4d97-9ccd-7696e63cf323" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1967d96-584a-f346-0029-ce4150b669dd" executionId="cf6cf39c-5c9f-465e-a9bf-28cc73f587bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="373e5f57-3a6d-e220-bb6f-8c9c7f39375b" executionId="bffe45c7-47f4-40d5-bccc-a673e2c92231" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c9c7536-30aa-8708-79c3-4cbd914c2af7" executionId="569ffbd4-f89e-499a-999c-e180d6ffa3d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb549ae8-934a-3af1-8595-d1df222bbb27" executionId="b3cd98bf-0d3d-4313-8f6f-096fbd610ae2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c0aa406-9cd5-6402-3a10-c892c26c5eb3" executionId="5346752d-0b98-4a00-8c86-e918a757fa73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1f8c002-88b3-5f86-7a01-d60cd8de3d1a" executionId="c5d379a6-0288-4610-a19e-061766c8808a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cdf9022-17b5-2b3b-6e4c-ee305ef50b8d" executionId="c7345760-4d76-409e-b8a3-9f5f93143fc9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc82fd6b-5128-0bab-b357-91f15f7a8200" executionId="4d356001-baa1-4b3c-afe7-adc49e01b6dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f2ec93e9-2da2-4fa0-bfe7-1b41e9e050aa" executionId="c798ce96-e0f5-4c30-a653-f3d0f65e45ce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edeb4141-7d95-10f8-3fc9-a9a9bc9f466f" executionId="61ca1605-517b-4d5f-9a76-3e6ae1ca5a53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25448c90-3b22-e733-c608-a5e672c5398e" executionId="5af0a0af-a53b-4675-84ce-f465a801c29e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e717a128-aad5-94ff-a038-5bedf19449ea" executionId="ba93f763-a6ca-4b83-accc-f4e04c61a9b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c0f8c1e-c5e8-5cc4-0233-51e9e8f0a968" executionId="79fff83f-cc00-4087-b7ea-6e8f96e385c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0e0acb2-12d4-14a7-4c51-4e445dfbaa37" executionId="7053705b-a97e-4862-a0f5-dfdf5af20c00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9c6a304-3a03-ea6e-9174-9adcf72b6d34" executionId="880f8b59-6fa1-47af-bb84-eca87596d73a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cab8858d-bd81-ddea-54ca-bdc820201dbf" executionId="d8dffdb2-bd8d-4070-8b24-18923e44598a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d354d7f0-ad7f-bd86-fd42-3ec5722402fd" executionId="05bb5dbf-7a91-4358-9580-29453510f8aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d0382bf-e9dc-2344-8769-35a8ba666be3" executionId="17fcf59e-cea9-434f-a1a3-fb69ae75cedd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b1fb93a-347e-43ca-1df2-4b4f1e6902b4" executionId="f5efcaeb-2919-4ce9-9c2c-836925d2eca3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f1fded68-0c10-6600-47db-05f80f0574b3" executionId="ebb40c91-8e66-4109-9ebe-1564882365f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d78dd45c-bc4a-8547-4b4a-4932b20af1cf" executionId="7f2c82f3-6dc3-4ad0-b3aa-f74362d114ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cdc305de-fec6-9776-d90b-9c9814e25391" executionId="d45bfd9d-d2da-4833-b7eb-00ba65a9afd0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b408f8c0-2d97-8ee6-6a5e-e64080c32baa" executionId="67d0e1d6-7f43-46ac-956b-55259e81724d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d8b4867-4123-c157-202c-3288288231d8" executionId="2559c841-9b3e-40c8-b8c3-722c98670b1c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e026e72f-4d88-b363-f894-324a08777650" executionId="339a0c33-5c63-45dc-95b7-2e2768b78b9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbe8a229-a133-c2ec-df45-1e4d4e3d009b" executionId="71ee01f2-d1fc-4903-8cd5-07277dfb82ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf5377ba-e86a-2980-2249-3dfac08904d0" executionId="6de96658-d164-4b54-84c4-bc1382614a85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42b06cc7-95be-f03b-5c7f-ff36df7b8df6" executionId="3d41412c-44cb-4d21-8081-9850b4a64aed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f07c33e-257a-9e46-9882-c25bb3ce55e2" executionId="35499401-cdd6-4b1a-a2b3-fab80e335057" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c069d1a-d6ee-6bd0-25bd-e8e5c6b5fb57" executionId="dbcd649e-4c48-4371-8fab-71b23ecf2854" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76e5f031-4b4b-9cb0-c707-a9001c7b50ef" executionId="48510f2d-cedf-4e0d-adbc-920aa0cc674d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="380d2d8a-9dc3-48d7-d960-d918f94e2286" executionId="bf7d827f-54a6-4cd6-80e7-ed31e6f63206" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a2be3ce0-e168-1783-dcbc-21b691453dcb" executionId="4875dac3-a984-4ab6-8d09-3535091c4420" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42cd8ef0-523b-1dc0-f5d2-bd8126fbc0e3" executionId="8f08bebf-a88b-4425-a830-28486cc466b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f3942e4-ae3d-5f54-a6c8-4b9521f839bb" executionId="bb05f265-84b3-4dd3-8ee4-3da5a8d7cbc7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f836cea3-54d1-7216-3ab5-2afed32c432a" executionId="c1bc51a4-db95-4156-a0a2-0bc2b1e23c2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8689325-bb18-af36-7ff9-d55d0b31d69b" executionId="c0c5ba63-6d8e-4470-aa16-e4cd0ad1b45e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20195953-6929-4a6c-e5be-58d5c94d2e00" executionId="e1942575-9070-48c5-8d3e-1e8f3c183485" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d168e6d-3806-48eb-826b-5022f52a6376" executionId="b7937ab7-6ff1-44e5-90f6-fb03494acb33" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c18c425-de15-3c20-9b48-26da9261b623" executionId="9c251135-df80-4bc1-a4bc-e9cc0ba92a94" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="702dd27f-170e-20e3-4df5-e3dfaf479bc9" executionId="cdfad0d2-583c-4241-ac74-ebfb66e107c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="765d9c59-0796-beb6-082d-70599b9ef0b5" executionId="0957ac9a-9b62-4886-a2ad-496c906f0a38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a6f65da-3ffd-4b9d-8485-0ed56964c473" executionId="b8ff1014-aecd-43bd-bbf9-4938d3a0569f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b148d2b-baad-a66c-4364-9c93c8a4f81b" executionId="e9ad5a6d-00cc-46dd-ab8c-6cb62837d9b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05733545-ef12-a259-6f38-d98c4b065ae2" executionId="9250907e-df15-4e86-b6c4-4f2358bd7478" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be6abb17-51df-dd40-2ca5-2b4b9d90c2a8" executionId="21b22cb6-5bdc-4636-bbe2-e24514ec02cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2edd9c1-f96e-115a-c464-98fa8ca8e6e3" executionId="a2e1c130-97a0-46d5-be6f-b5c9c2ac09a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e11ad657-1d9e-f2b8-d4ff-d360443f60a0" executionId="716adb43-2b7f-48c2-9510-5d9464945686" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25915602-30a1-11c3-1441-58ce4ebf36c9" executionId="8a23c992-fb8c-4863-859e-b3fca70e32b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="151e6b6d-d9ed-0790-78c3-14eff8d77f56" executionId="78c777e3-6fbc-4af4-87d8-899e8b1fe1e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f1cf13a1-ae98-b65a-d9a8-765a84782843" executionId="f17e6150-a400-46bb-a6f3-38b7a08d762b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a56d1103-29ad-994d-0833-6475cbdb3d7e" executionId="ca8ce7c3-f667-4386-b928-66c561805eca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93e483d1-0d13-c3ee-52d7-ac1ddcc4beb8" executionId="59c03f61-f5b7-4903-a642-9510a2550ed6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0371dd69-06df-7998-a7ca-5b07d5ce10d8" executionId="40bd4071-f761-4669-af1c-e8766c11975d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58db66fa-ba47-0932-fe1b-8886624fbb36" executionId="d9282cf1-088b-4f70-9377-6ef65d320055" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff90c02b-a0a7-7a7f-ccac-06eb6c6eea6a" executionId="3c0f28e6-a745-4cd2-9e8b-9ded50af3310" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15749751-a3d3-2955-f2ea-d4f0baa46657" executionId="781ee039-d396-4b41-b7f1-f8e94bc52880" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5c079cf-8e5e-3c57-648d-56ac74f7510d" executionId="30c6288a-cda1-4e18-b0fd-5d5ce820206a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6dfa87eb-9b4b-a97b-31e0-f41d0f1148e4" executionId="559d9be6-e164-4a05-a7ed-5b6c92e5f4db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1e1ab32f-a463-3c8a-9040-abe7355c6f4c" executionId="ad02ac4d-d6e4-47fd-a6ef-b70d150f02e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="612ad57f-7b3f-4988-a801-3bc0d08b608d" executionId="b680f2ec-2e9b-454e-bea7-cbde45507643" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6058ca6e-038e-3995-3d5c-5996434ef0f3" executionId="fa139d05-e600-4a24-8612-f4cf6d0ca0c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20e6e9ba-e717-a238-e38e-363903d2b78d" executionId="f79bd80f-a83a-4629-a33d-52913f302c8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9bcc0fc-ff6c-e48b-fd4d-2c27d60b6764" executionId="343b7b03-9ae6-444d-b79c-74805419f438" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f38e032-92c7-fde0-2083-513b829d65db" executionId="3835ef12-3c7a-4f89-a0ee-c8905726a427" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="392e7459-7348-c714-fcd1-e0dda0a8e259" executionId="2c79e5a0-476a-4060-b98e-d85d734982e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb5c705e-276a-b57b-9ec1-e3888dd98af6" executionId="1bde3cfb-a956-4def-88f6-6cf553ac44bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7144b69-c307-d44d-89d6-98eba81b79ff" executionId="93d53313-b5a1-41cc-bb7c-a07d8e9ce6a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aed32561-5f20-1bac-99fe-d0a7e89774eb" executionId="d2c877fb-c2e7-4baa-adfc-ead82f83c4f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0ea241e-b30f-c096-d0f5-7afa8a27de6a" executionId="e5a39a10-880e-43f5-b028-aa91a369f687" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4158d98-2984-c2bb-766f-527772ea0a24" executionId="d0d1cea2-7b5e-4d7d-a321-ee81a6d8cb1b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86ba5fec-af48-033a-e445-2a1330408bbe" executionId="8dfb9e32-6f3d-4025-bca7-31d808936871" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c12a9084-2213-5ca5-3946-6d22675684c8" executionId="2b3233b6-0fc9-4c89-a141-bfbd1b83d18d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd522f2e-0bc7-5c1e-5748-4501860d7f93" executionId="0b28d7e2-a1c3-415a-a920-1d5ec87909bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8bd649f-26b2-55e7-50e4-0b6b4c66ddf9" executionId="166c904b-b67c-423e-9f85-fdbc2967c28a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eeebf50b-5feb-d90e-ff6a-d27ddb55002c" executionId="daab238c-3f3e-42c2-a4bd-06c79bc04a7c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89f326d5-f978-fdf7-31d7-bf5e211e7882" executionId="93894ba2-fcbf-4e91-87dc-c6413f9f7b5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="712cda48-f222-70d4-07d0-30d8d6dc0fb4" executionId="a5d494b2-8d03-4b66-b428-ba57d4669ad4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd57cf90-a388-8ada-ff2a-1a5e336dede0" executionId="09b846fd-111b-4330-a6e2-a59b6221c030" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4ae82ef2-44a5-d65e-0037-5bd79cc4a8db" executionId="718e5cd3-a56b-4c01-8b62-98e8a521ba23" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e7729c5-617e-0f4f-f7ab-81a3ffcef53e" executionId="cb1c7e96-2c2d-46f7-9c6d-8f33efeebd56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66e63ca8-5252-053b-8302-ccce87fd75dd" executionId="2cd95623-f35e-4934-9b42-49465cad873c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="65dbd63c-5fcb-1226-a31b-58934c0375ad" executionId="cc1232f9-7de3-4d95-8fbf-7c9252700774" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4fcda4d-bb7a-ca45-f419-893fcadcf06f" executionId="784f919d-8e93-4690-bf02-cb7e6d1e2acc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa8d8c79-8ba8-903f-8b9e-16718a9150f6" executionId="de44fc3e-4442-4e06-baa9-ea2a7961840d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="55628be9-b819-2110-dc20-1379da13b1fd" executionId="1eadb1ae-9f53-4981-aba4-fe53554ecb74" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="692fe558-2ca8-0879-02b1-56fb3585a329" executionId="691e286f-cd55-44f7-81ed-83ecb79004f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c78c171-21fb-ada0-f5c0-13b32a33905c" executionId="d946c6dc-5153-4351-a6ec-1b008f62ecda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6477aec-6b3f-97d1-4f9c-b6878ea976f2" executionId="1b6b47a7-b08d-404b-aa33-57c284b37a2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c9d640e-add2-496b-4065-a3c823768c21" executionId="e7c20fb9-ed59-4218-9615-f129ff876311" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3565819-d11f-1fe7-68fe-ecc4ed90d30d" executionId="5c42ec2c-7d46-4a35-aeaa-41d32ab2c0f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c552a047-c4bc-9a51-d335-4a335218b2f7" executionId="e08d8537-5169-4db4-8be2-9c13dc6a9cec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="691cb344-acf8-07d9-149f-4d10c8531e03" executionId="e4957808-b830-4860-8ee9-0dfde887c8ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f27c765-73d7-716a-2d8a-746509fd951e" executionId="3853af2f-b3eb-4b33-9921-29cdac11ef27" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14c44760-4e56-9d4d-b09d-9ff5f8b888fb" executionId="2fa943fb-d4d0-4f11-b72e-8232d612708f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29649cfc-fc7d-6637-fc22-f97955b1613b" executionId="a8ce41df-a070-48e0-be03-92c07c47bbe3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b2013e3-d413-69f9-02f4-a7e4ab508dfe" executionId="5b70fd96-8331-4473-98d6-514f2461fc83" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="db216584-ee9f-3d6f-5eed-f30ebcf2c868" executionId="2da5dd97-fc10-452a-b1dc-9d42c68ddc9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4304a90-2046-7e2e-0654-fdc0fc4059f1" executionId="f3094ee0-e106-49d1-89dd-e48d6134b9ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc3a3424-8ced-16f6-3ceb-539b6b976e5d" executionId="d814d95a-fcae-4a43-91a4-e20c752710b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="468bfca5-300a-87c2-f7eb-1ac41c0960ac" executionId="d8f7c1e0-0ac2-45a3-a374-5455b53d02c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a717009-b496-f4e8-292c-a005fb572692" executionId="22933c48-a3d6-4837-bc92-e42f7ce6dc89" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17c2a940-7aaf-3c95-f2ab-507c4ff9d7ea" executionId="7a05e78c-ee83-4bc3-b873-1a89a72739ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="59878915-f70b-9901-834c-54c0c28aee51" executionId="d4e39f43-b0e3-4dc4-902b-327150e995d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c5f3d0b0-1290-9e1f-a687-de94f70c7ef7" executionId="571750f5-58f0-4d58-9e15-3581eb2804d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c1b107c-f1e4-7e98-09b5-bce23c52b356" executionId="53ff8785-03e3-403d-8bc3-5f3b84652c58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c600abf1-7803-e257-d0d2-0fe4da95b3c1" executionId="5c1b2dd0-b038-453b-9de5-6bdf31ee53b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ef3957b-abc9-1099-3ea1-845e371ff51f" executionId="b264ac3a-90a3-4327-ad4d-31e761559c8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9587797b-f9f3-c372-c160-ee39e3f5c56f" executionId="4536b236-1140-4203-b1a5-12fc362aa80c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1872df90-8cb5-7d4c-ba09-e35e00359994" executionId="f9f96744-4dad-47c2-bed3-3d8ef7052a53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc02e2b5-ce12-acbc-ebb5-9b7c11fa7ead" executionId="17aca4ba-63b5-48ce-8d7b-74d47a649195" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8695e72e-08cd-7b05-5ad9-a993d5fb61d6" executionId="47213818-93da-472f-88ff-9174536f6948" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e5f14af-1695-94ca-eae8-8c16f5331b92" executionId="809d47a3-36ac-404c-ac8f-f23729e1925c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="831b930a-bc9a-73d0-2e8b-c8dd2cda553b" executionId="d46a39ef-4a00-424a-a948-439e8a1dab98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78b5492f-26c1-6f2f-5a04-36ccf021b50c" executionId="708cdf41-cb17-4096-9af7-7838bacca4cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a39c0351-7c2d-5b35-756f-0821070b3e4c" executionId="779ffa43-0e6f-4449-b36a-d3549dc12480" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd543530-3c66-48da-0e4e-464142293968" executionId="20e40b0a-c9c9-4041-a33e-2407a6dcf241" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c27f7b37-1dab-8f2a-0a25-cfb18618bdf3" executionId="30dcc374-0ad8-46c2-bf39-b537d44907d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50770159-1f0a-0314-79b9-6013e27ddffe" executionId="c70275c6-2ad1-4800-b4cb-a932957e1800" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="537eb5d2-a824-975a-0613-0c1354039157" executionId="de28c771-cb69-4db0-9b0f-63f4a8130bb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="548873da-aaf9-3cdb-51eb-a84966fca79b" executionId="48cef4fe-6f90-4a73-bdc2-2f2e4d435322" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="999e4374-aebe-5684-3171-b323d5c5e9b1" executionId="4fe4befb-78b7-4e8e-b87d-eac6f2a5782c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ccc639c-11db-1192-d7fc-e993da646164" executionId="a1568ee2-22d1-42c3-ae66-4d26ab70c349" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d23e30b4-11eb-4064-0f9d-744a894ce55f" executionId="0eca480c-29f8-4d2a-9e84-5fad89cc8385" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34ff3004-ac12-2f3b-52da-13995ef4b4d3" executionId="83100013-c66e-44b1-b31a-21130c397eac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="890b2ac1-fe82-8019-0c0b-54bb6eca93f8" executionId="0a080eae-d0c5-43dd-a1af-38fd35f6eecd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc1d9eb4-7516-3caa-e2b5-c889b4b7c1f2" executionId="8e0d4855-1bab-49bb-aef5-3f44125fb39a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08ff69e3-980a-fe77-4d59-3b0688d78c0a" executionId="0ade3d2f-7e32-41e7-8b8c-cb25836323c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79e826a7-e525-1553-5277-c140737937c2" executionId="02598f82-8911-46b1-a4ae-09daef6f69b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cce9ab88-2092-a6b7-1940-cae712184a14" executionId="686205bf-e381-4881-a769-ae87a7bee179" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64446e51-c162-6cff-522c-b8d7df1029f9" executionId="465df792-4a2c-4c08-a617-3288787e5493" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7fa7b917-9635-509d-ee53-facbe73572e9" executionId="e2b91309-cc09-4c11-ba34-c3f87bdf233b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f274b91-6c63-6b34-6c49-4d30619094eb" executionId="0d2a1856-9cc8-4bb9-8aed-051980b36cdd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8580ded-7e39-20ef-08bc-47cfb1e5e703" executionId="94a63ade-81fd-49c3-af97-1f309a1d5905" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07bbd722-0772-ca21-49c0-970e2badb486" executionId="e9aaec6c-3d2c-4f66-93de-2b590e729016" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f0c2dec-dea2-a0b9-3270-2764e2950034" executionId="244b8434-1282-407a-ad6a-8fdbb3e8b721" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc308633-3d62-d14c-1ee4-654f05b9dba8" executionId="d12ea6f2-2a2b-4f07-b9c8-5d5ef2cf97a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b66b14f-6aa4-5a79-9057-28c9d23d95af" executionId="431f14e0-c667-49c6-8e88-a5b89e9647c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="655ca05a-8ae4-dfb2-3707-ed2692a54d75" executionId="0f34149a-8624-44a0-8bcb-0e09b1272ff3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68d8efc3-b3d3-bfa0-7251-de5b2f6725e3" executionId="34c992e0-7b09-43c0-941c-51a647c29db4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="194992c2-87c4-a802-1d25-3745046efc62" executionId="7e02e0e3-f39e-4d70-8267-acc30bccc1d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1862c672-8f91-7e4d-b935-4969b7f31831" executionId="1632a4bd-7e58-412a-916a-98088500dc56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60fff66a-937d-c28b-19eb-e144f4c964b9" executionId="363dfd0a-190a-4018-a4df-daa6049476d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c208df3c-a06c-d3a8-3763-093f565d69c3" executionId="197f6165-1f32-4b4e-bfa2-65c1f6560fab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1878a49-0be7-d056-2556-a53e6ed0c5cb" executionId="1126fdf8-2e66-4242-91b5-7b4e110c2f8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7975642-cea0-bf2a-d0d9-d2b4c7142bdc" executionId="4db96de5-d679-4757-bf38-be3e5c5c1f99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="606aca6b-78f2-520e-9cbc-fb1f7c2f6b27" executionId="abb141a8-7277-4bc9-a4a0-ce78bc4b84ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13ec5b1c-c5c6-3f0c-5569-76e0ec61674e" executionId="7957f1a3-0619-4e53-b98e-08275dae23dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a84a7e1c-3df3-0faf-6518-d4df30ea888f" executionId="74011d32-975a-4cbd-9aec-88da4e0f783b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f75df37b-431e-5ae9-1643-dd2e056de097" executionId="bc711550-7d1a-4857-ad45-c093d7a9a012" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92d2c55c-198d-0d74-5c9b-dde45de3c1a0" executionId="d8419c3d-9cae-4dec-8d96-df74ff7f7118" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab1072a1-b0ea-1679-9e3f-0b1dbda50c52" executionId="956d78ea-7105-4340-8aec-35572febfe5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17ab6ef3-409a-8d1c-29c3-f369ada273cb" executionId="b4800219-d61b-4bab-900a-7bc4f2c3c5e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2331914b-afe4-d381-35da-c0138ba1ac3b" executionId="8c02b249-6846-4667-91e4-b13be3a91daf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5cf69d1d-6b2d-7736-8e50-131649888972" executionId="dfba6b29-2bb4-44eb-bca5-4e212155c0dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8501d3ec-4167-5b8e-8549-0547e4e4afcc" executionId="3c1a24be-0a3a-497b-99b9-accf164e9032" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0f96a12-5525-0627-48c0-da5aa4fa9858" executionId="89a09d91-3897-4a3b-81da-4f674b5b42e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aacff6c7-2fa6-09f6-e43b-a03e145b7a5f" executionId="0c830c34-f539-4259-b3ef-6f2e484d3b57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a650ac64-f726-b56c-026c-2d977dc44645" executionId="8d00aa5d-3d8f-46a0-a0b6-48ab50bf4afc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b444ba7-807d-10f9-3507-0f392580a248" executionId="6369f834-b692-432c-b5c7-6323a4686074" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f1ce5a5-2cde-ed7c-9e82-5c71b386a093" executionId="94192087-20ba-4ad7-b53a-c88225c51a03" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22b19898-b21d-6105-6c06-a5b6ec0065e1" executionId="5af6d489-b38f-434f-b8ff-9f06bef9a76f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0514debc-c616-2066-bb5e-66581f407587" executionId="6a0e0daa-f6e3-4a1d-b9da-df9fc27faa73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd9eaf7b-a332-936f-8c03-a3143b66581f" executionId="f17e2690-db4c-4093-890a-78ce66c5b88a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4fe9fa88-94b3-1c3a-b35a-946b92e4f5c2" executionId="8fc9f78f-2877-462e-8a01-ea7151135cbc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5927cb7a-0333-198c-38f1-1cc0d7f90f3a" executionId="cc914c22-355c-465a-95a7-9c099b8b6d45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91906b72-9217-f3d2-9c30-6dc33b380aff" executionId="c22da795-f50a-413e-99d0-735393911d59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="afdb48fb-3fea-4c74-c764-e1845b9b7633" executionId="12c13bac-384e-4003-9c2a-4c204d25c19e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="16018a80-3717-b374-a6f5-dc193d246435" executionId="22a24891-eb24-4feb-97b6-dc0f546b413d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="812240f4-e092-2057-ec20-a37ad736875a" executionId="a7cdc179-44ac-4032-997c-745d5283f1bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4e836a5-165e-318a-02b6-be8df818f474" executionId="4b76583a-5604-4085-8289-30f8e1bf5d53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f988ad87-4917-3edd-0322-741dfa68adbf" executionId="4afdeb86-3434-4b11-8e44-dbc678734914" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36c76ccf-4e1a-b24d-5b6c-fdf93c19d34f" executionId="0a635913-123d-4d71-8f2a-b11a283a9972" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84b3a9f0-9236-3451-e4b3-f22664b2fd3f" executionId="a8f3f4c5-a175-4af4-95aa-888c3691e537" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df508473-adda-9053-f311-ac9fb8171143" executionId="a06dfcea-7197-42f0-a19b-d6a7014a191f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0533875d-6218-8dde-0fb3-b39e309c901d" executionId="bf2d8d22-fb17-4dda-98d9-c27aeb1884f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd50e690-44ad-3311-b768-8963d681486c" executionId="a749451d-8c13-4ad8-8954-f39f7d75b11b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fae4574-2457-172c-4718-c6a6b185459c" executionId="a91f8647-5728-4d01-8a6a-4258a26625cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a4739c5-c17e-59fe-7366-e8e222a26964" executionId="af9e9b60-2bba-4bc8-bf8d-36bcb257fdcd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0eb0072-d1a8-c1c0-40ad-fa4d8b4ee66e" executionId="50c09de3-03b0-4540-a93c-7c69d5a5cd0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17e4de40-597c-33e9-9d20-0cbf3384a751" executionId="a6c711ec-fbec-4a57-9840-911557351467" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="242f48c6-1a5f-dda6-4eef-44ddf68ee2a0" executionId="04105fc1-d5d8-43fe-8c09-50772693d6a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c77bb93c-885f-84ac-ca92-25010599909a" executionId="c9cea92c-2ac4-4133-aab8-8fea1a8e352c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="82f31cb3-17dd-0086-da80-1486ad49d487" executionId="8ba96d4f-ce91-4cc5-9074-fdc3c8ae3fe4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="521c0c90-839b-7300-1957-c8c11f94eed6" executionId="c5e7bd67-1869-4f81-9c9e-c13905682d18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="063fe473-ef17-c7cd-292e-473793547c66" executionId="75627977-041d-435a-9b8e-7d1a0b9237ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dfa12b1d-7789-34a7-a62f-c0acdd02b1d7" executionId="8ea2d2cf-4f3a-4978-b5e1-c5f44e55e77d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0a320d4-669f-b5ab-19f0-d64a51f682f2" executionId="f521923f-c1ed-4d2e-9ee1-fb893b45f480" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c17d2ae2-01c0-322e-f39b-5687ad1e5caf" executionId="fec40ae5-d9a5-4c44-a6c3-446778f1898e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="150a65c2-00b8-87ed-7d73-69e2b3dc2efc" executionId="7f0ddfab-ca66-44d2-80e6-80f6eed70b01" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8f78510-6137-dbec-5401-2aa19e507437" executionId="717664bc-2563-4880-b193-2825298b3241" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7478ed45-5a19-6ec5-7735-8eb45c89609b" executionId="dde7eb3a-05f0-4223-b49e-04e6b74f8324" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a40d5647-4b85-37bc-638a-207cdaeb69d0" executionId="65a6919b-885e-476a-8b06-e6e1938bb5c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="899dd003-1bfd-e224-24be-d7c2bda94f91" executionId="62f64e79-6d2f-4ba3-8725-48764364afd2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="759d27e1-6976-5322-46f1-4e5bfed94822" executionId="4cf59c20-d517-45a7-b78e-480f52d80cf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96117b32-0bb5-be5a-143f-a15e67526e66" executionId="69243563-92c8-4e45-bf4d-bcf2add89e69" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7918fed1-bdaf-4489-95cd-1e2b7c6c4c09" executionId="b395d7c7-7c01-4300-b2f0-6529e1fc4242" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6963eea4-85ab-6cec-88cf-c082afb527d6" executionId="d3bb4b2b-4737-4373-a591-b3ee8e703628" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="87a7e748-94b1-4e9b-a97d-b58bd567453b" executionId="202ce493-5ab1-458f-8b44-9bee4f947e5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b19d8299-9083-8a39-38b0-aa008a8ced53" executionId="2caa2989-37f0-4025-86b6-0a314afa8bb9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c99f5a6f-9bde-c6e3-1894-b9ae5f230d49" executionId="a8010073-872b-44d0-ba33-1d6a8b82d33d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5cdd042-12ac-a14c-1162-7183fd8d28f3" executionId="b29b7749-7115-493b-b330-4a1907b79984" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8983fb77-9f55-d809-4155-a3082b59f7bd" executionId="3cfe7ed1-3808-45d5-a0d6-8ecc532ca996" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="610374ef-1122-fcaf-70f5-1794f8e8353e" executionId="3394fb38-34c4-441e-b866-30f0fb0d4691" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c2a1615-3cc8-1dac-031b-add21eac4860" executionId="d932d383-a973-4d95-ba9a-a90f39dd8cfc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fdcece57-9003-68ef-f695-6e9ee17f585b" executionId="ee583331-977d-4f9e-b6eb-358b477d78b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15600f89-daa0-8169-3c9a-b66c0bbba3b2" executionId="5dfaba9f-23f9-4086-a769-be43a224215d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a25fe87c-52fa-1e10-48c6-8da95661c8df" executionId="a2ecd00a-a90c-454d-926a-5e42db173f13" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="98a98465-2e2a-4289-12f2-17a4cc649802" executionId="86c01c17-c215-49a7-8142-0c27a669e1c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29b9f04c-3d2c-e7d2-c6bf-8dd894da511f" executionId="7334f84e-8164-4c26-8186-5aecbd9fd2eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5a27d47-cab3-61b8-1917-30a3e7d3872f" executionId="87a9d789-21aa-446b-8f8a-ece9354cf0a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bb13dbc0-9768-938d-14e5-b7f42db24959" executionId="798e6f08-9765-446d-ac66-0a792436a9b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83847d44-2753-ea3d-f588-b3f956aa037b" executionId="86639ec3-db2c-4933-99a1-635901732beb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9baad39-ed40-1c95-664b-b42af8b4953b" executionId="1be383d3-02f7-4de4-8d46-3e1adacb55f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="733cb1c0-533d-b31f-6978-668ef23d2200" executionId="347af8f9-f264-49a1-9bb7-37f1c4aa1731" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6e78a98-7cf9-b095-5c8a-928122eb287f" executionId="ef08d277-9884-42f3-b0ab-0d030694b66a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b541a45d-9cb1-5094-2d7d-88af65564e59" executionId="2723723d-9b7d-4096-bf6b-73c89f81f5a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a2cc97f-c20d-d4a3-580b-34db605a5e07" executionId="44edf9c3-85f8-4f8e-93ab-c459513e6956" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72668e72-fc62-2889-87a9-6c5783426c9a" executionId="d2d2c5a2-f700-4349-8ee5-4c217d81f726" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6d1acd69-14d4-3261-4d51-5ff1fdbba306" executionId="805107c6-e83b-40d0-a9c3-1fb4012e6164" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6f9a63a-1e58-1b4a-20cd-7f6856c737dc" executionId="da08f9df-78af-47a4-bda7-afa7c341e0aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5869bef-9331-1494-60f7-6c8301bac361" executionId="af2c663d-e97f-4f49-9135-b234411ba27f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa13eaf6-b3d2-3c99-a791-206e2203137d" executionId="abedf0b4-8449-47ae-aa46-204558f2daee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a6e8518-17bc-6ae8-120a-cecfd0376ff9" executionId="8865b3dd-884e-4711-bcbf-ef791c9af18c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec062dfc-321d-6497-b076-8d80b2d217e7" executionId="903098cd-1535-44ad-a496-0c34cf12e2fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15e4a081-0194-297f-f267-cd79b5327388" executionId="b8ca546e-d7f3-427c-b5d8-aa5714ce0ddc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b6aa232-0b8b-5cbb-0191-0cf613d6bd08" executionId="460cd7d5-32e5-4766-adbf-1a0db6218ad0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a2aa2a6-6829-4e84-817f-455d337a4b67" executionId="34eaa64b-09e1-4e52-9cde-af3aa65b5053" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da468cfe-4e8b-e49d-3ff3-dffe77f73f3b" executionId="7abd64db-5dc9-41b6-aae1-95afdbf23d34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="512ff198-4421-dfa6-6484-dd58ceb28dde" executionId="47bcfe0a-5452-46f3-b505-b33c09e91197" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7bf36bf1-adce-1f61-9f13-39612921c26f" executionId="0345e2cb-7583-448d-8954-220557655c56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af814600-d603-4f5d-41ed-02c12a0801a6" executionId="852dbc11-5bb9-41ca-aa89-fcab68d0f1da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e4863fe-9252-0cf0-55e9-20754ffe72a8" executionId="acb07154-a7cc-441a-84d5-971e6c2c6af4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="044335f7-ccf6-4dbe-e4c9-dd5cee98e87d" executionId="73f25764-918c-4651-8c41-45843885cd79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c20982a2-a31a-ca6e-aa9f-262244a2292f" executionId="c5d13c4b-399d-4309-b75a-04dd7493686e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4070278e-56ba-2c59-d557-71bbd7e9eb40" executionId="23d7f1dc-517d-4c3d-a07a-70f00722d191" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="996bbd72-2fc2-c5c4-baa7-a248176bcb3b" executionId="bb67cbd4-0f57-4852-91dd-cc0049a838a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fc29aac-2d64-232e-236b-ae0adc0fd56e" executionId="ff5d4227-be4a-4c5b-9835-6987f83f3d63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed5441a3-2b44-6172-6cc4-b41691196e64" executionId="707b1bad-90d0-4950-a484-adf3beedce6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="934805b1-b38d-1073-4ab2-dfb73ae589c4" executionId="59fb4833-9802-4406-a800-e6e6096d6bac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7067aaa8-d6f8-45b0-0ab0-39fb4ba424a5" executionId="025de8e6-7a6e-45b1-8b51-69a0ef05a5c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d4d824c-5ea9-f09d-78c9-c31df08da8bc" executionId="708577c8-15e3-4ecb-99c2-ef20464b412f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b12d6d1-d8af-12de-076d-70c1e48b3708" executionId="a3e73bcd-24a3-4c16-9942-18710873e8d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc5c02ee-9c3e-feb9-4a04-0ec7d4037890" executionId="c5c6ff10-7119-4c79-9189-6ad2fd2afae5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3fa71d1-fe2b-2b3e-8951-e72720da868a" executionId="e342e88e-57b9-418a-9902-f99ab8fe888b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="61732d76-971e-f3ae-cb56-2c520f1add44" executionId="56d223b0-11dc-42ef-8d91-53d93539cbf3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47131d00-d047-d99e-b755-9c87e2486502" executionId="3d7ad835-5e8d-4f44-9feb-6ab90677e4aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="243530d0-146c-c89f-0fd0-612f6c13a9cc" executionId="7a519d32-605f-4686-ac62-7cd320bb432d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eaf13974-cd79-25d1-0272-3c52d906a5a5" executionId="2246f57a-1705-4948-897a-6852d2fd5145" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3995284d-076a-a673-1f54-7b50e8f2b53e" executionId="8ab98a12-60d7-4e25-993d-38e3a0b1d0f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="797719d9-06fa-fe2a-13d2-71efcf28e428" executionId="9d998b48-7015-41ca-8993-947582bf4057" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94a2244e-0d93-7a16-40c4-6c97edda2257" executionId="bd2b5433-43bf-4121-9bee-e33cdebefce8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15dd13fb-232d-11e4-b4c8-b1997b13a31e" executionId="a80a0557-f927-49d3-8f73-514997a1b3fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08a7c46d-156f-d5ba-aadc-e8633cc4cda4" executionId="959ea0c0-c1aa-4020-96d9-58e80d9bb2c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5c71270-fc4f-d076-831e-f732c4a47222" executionId="806d2d00-299f-4c91-99d9-07fccab2fa53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4a20c47-8115-5cd8-7dc1-5493456a14f7" executionId="0c68e9e2-0926-44a4-9988-11056d2cd659" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8979d306-8d3a-1ea3-9f81-bb2c3b0ede3b" executionId="5889bbb8-18eb-449d-a9f6-e409c4d9002b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbf2ace6-2e4f-a569-e0f9-89873457659a" executionId="83b26a91-cc9c-4e70-a538-5421e29c4feb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ec50f6b-d832-169e-e9e9-d1443900b6f3" executionId="94562fdb-a97e-4e97-9176-bb63b89d5e24" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66027c81-a5a9-3cd3-8e98-bd24862efd4a" executionId="f8d143c9-9b51-482a-b202-5b2b66817c98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eedba9d4-13c8-dcd6-e7ec-d14516b826d8" executionId="9bccd81b-f2db-40e5-b71c-d0e0c79a967c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28d6222e-a603-7aa4-36a1-971f5ff1229b" executionId="df2bab4c-40c4-4b07-bbe9-04b2b585b0a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50526835-f3af-7d07-e0c3-0e3124fb33b4" executionId="48fa3aed-ebba-4f80-8d2e-a6ed722ea983" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee66e994-88c8-1cd1-588c-e26b99d70fa7" executionId="ea059da7-314d-4aee-a06d-2c3e6ca67d54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c4f3764-f1f2-2068-908a-5d7f98b28c8b" executionId="480698ca-2287-4d37-b2e5-190a03e99b1a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24733208-9b4e-71b8-2dce-918de84e5d92" executionId="a48fbf66-29db-446f-8527-4384583dc116" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9637a5ff-5e5b-22e2-e219-4ed6b142cb0e" executionId="287d33e3-68b0-40b3-8a39-496f02563a53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="44400f38-a2cc-1589-1518-806a85a87731" executionId="52caa2d7-f91d-4d06-a27d-9b0092f0a43d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21f40236-8846-0651-f72a-53dbdb3e6157" executionId="6938b243-c5be-49f5-b0ea-9e3075ad1c28" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08102230-f5d9-dd0f-1c6c-c5fc88e60157" executionId="28ce74a3-fb57-4b61-b45e-bab5c31944ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ccfa7ad-6283-f63a-8d2f-bee38d894688" executionId="53b1c6b9-b564-4718-bec2-4630cac15d26" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86e608cc-05c7-e7f5-6a44-fba699d72b14" executionId="7c63d152-2502-4a9a-9c58-1acb5639b8d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49aa63a4-01f5-1225-a31c-0199404cb376" executionId="3299be70-67f9-47d5-b015-97e08c97244b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040d93db-8cad-94da-f49b-ad5e5b88428d" executionId="574e2d86-5ee0-4eb0-8bfd-254c385e400b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="036ccef3-040e-eef8-14e5-37e9e043c709" executionId="1e4d9781-e3e1-4f25-83bd-f8786b1697e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae3f61b9-7466-23e1-34d3-fcdc76d9d293" executionId="0ae108a3-71bf-4175-bb0a-06b3e38a4e50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a47c7930-40af-b73a-7353-569682b70ec7" executionId="67f8b02a-ae78-460d-92b0-60f5cc26eebe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68ee19e7-b45c-e5d9-3a61-3a23dfdc2902" executionId="c58ba8da-f463-4b4e-9869-b89e6a660de6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a3e159f-fbd3-7c7a-7995-3562f823fe92" executionId="a96c59be-4d55-4297-a273-ece74f17399e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="81e563b9-9021-e8f1-1496-4e34becc5ac4" executionId="471da1e9-3890-477b-ba05-b5b93bff0937" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32a22e65-aea9-01f0-9ca6-56f0a14c4c3f" executionId="ad8ee0d4-709e-40c2-b0c6-3dc17a3a252b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b40cc9e2-a2ee-98d8-d3d5-d1354af96000" executionId="42ce3540-a12e-460f-92e7-25edb20dbb6e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c67a6e74-296d-29ee-0dca-b48efd4c2222" executionId="cda4e615-b1d6-46bd-b6b2-1b9a590c86c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7fd7b8e-8898-53be-4e7d-f03d0583e142" executionId="bafe8054-61ae-4967-8b4f-c2c8faa6d186" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46d4dfff-9f57-563f-bbf2-8653800d4bdf" executionId="f4ebff6b-fd5a-43a8-b3a7-19b1b2c46efa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fce80ac2-d844-dc5d-bd1e-812df08525c0" executionId="12d818cc-84bc-4019-887c-a1dbc045782b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1000a059-d92a-607d-e7d0-1a682556e8ed" executionId="97e59bda-703c-46be-b669-f5950e8b8b59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7cee6fe2-75f9-808e-7d16-39f7c1bf580e" executionId="1564a715-e064-47a7-8907-86378b7b499d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d3d4e8ae-8260-c72e-8825-1fc4b742c82c" executionId="9f86f203-0338-4a9a-a829-355797edc695" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4995f7b-2251-2083-a3a1-fb61eaf02590" executionId="d4d98bce-2478-42a9-a5a1-98d560939783" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="618df55a-34e0-e72d-09c7-3904ac675830" executionId="bbaa2504-cc82-41b3-885e-9722b12d2243" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa2d1a39-7bc5-69c3-03dd-bc258810475a" executionId="5cf5051c-0663-45cb-b6b0-2c2e0725c69a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="82aca4de-db00-0f05-0677-f236c2fbf3a9" executionId="16824a43-3918-412f-9ebe-444b6ff3730c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e56e7bb-c7f7-557a-4af5-065d6d406887" executionId="621813a1-2ac2-40b9-b18a-96e2b1e299b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe51042f-4b4d-ec97-b4f4-ea15d7c335c4" executionId="37ec29e6-00d3-48f4-bddf-76e7201f631e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d4c1da7-034e-ee03-c92b-6ae640ef8c7e" executionId="2c8791c7-e776-4cc8-af71-ff6fbcddc571" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="497c0baa-8082-fc86-06c1-ea3b85b951c8" executionId="bd305354-d7c2-4af3-9950-36ec9ab2ac26" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94ab8bca-607c-17fa-a5d7-20b6b82da8cf" executionId="23ef715f-8dfd-4c5d-91d8-d78df88fba78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5c01d17-e31a-08cf-332e-d2093756a879" executionId="e264bea3-0204-47d0-b803-474571533a45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="775e62d6-5a2b-6bbe-7bcb-d3cc4bcf342e" executionId="41a4b95f-00f8-4246-b21f-d402f61b4e2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c465004-23ec-bb83-00e1-406ea693bbd6" executionId="47a17a8c-953c-458c-b02d-322d37217d09" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="930013f6-6feb-ee30-c736-6987277d9cd3" executionId="41dc391e-41df-4c55-ba2a-9b37a8a966ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80418597-4e81-60bd-4646-4a9b7643c63f" executionId="0e0b9e92-88d0-41c2-8dff-24b181a1140f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9d4b76b-7d45-81a3-f33c-91314ba6e7d7" executionId="18a6a5f4-c82b-4e06-9d8a-13201b4c9c24" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84f97ef6-79f1-faad-7862-98990e4f9b3e" executionId="831ceb4a-22a1-4539-b18e-355fa584f7b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d13a68da-ee97-e194-e8f8-9d3029c353be" executionId="1bcab23a-4666-4d89-8ae5-acc7a5061315" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ed8c19a-3679-16c4-bd73-78626a7450ee" executionId="e7d8940a-79f4-4214-8f3e-b5fd0bba16d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb5a5f4c-445f-9046-1e69-13d7573f665f" executionId="9051c0ed-13ab-4f15-bdda-4d79a04b1d49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0148e2db-f8d0-3cb6-5dec-d71f688dabd8" executionId="d11bf5e0-0a8f-4af6-92e1-82a1a4d63641" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d9d7863-0731-411a-6d5c-6f0cec225a9d" executionId="abfe4650-1982-498b-862b-65ecdcb4fe96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8004cce-f5de-b34c-61cc-9028bc60c32b" executionId="869d9192-04a1-45a6-98f7-3103f83aee8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2be8f8f7-8957-784b-18fb-ee11f5ee0395" executionId="b0de3870-219c-4319-9ba4-f9c5698181c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="deda012f-6b0e-0756-54d2-3a60970e92bd" executionId="a36b90fc-0a26-42a4-ae3d-e7a7fefcf3a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79f3e3ed-759b-1209-1d85-02c4f6548606" executionId="a6fe7974-effb-4a69-a24f-877e39510089" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2cafd04-dbbb-aa4b-16d8-599f3cd6c2ab" executionId="48c64972-82fb-4fff-8705-d8d2bcdeb7e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b154159-e5b9-06e6-f7e9-33b39bf21bd0" executionId="087222a9-76a1-42ea-9ac8-bc58bd2a2868" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7db2dbb-4f46-ad50-1386-97abb1f1d487" executionId="9c910f79-0129-4660-bc4a-373af4510ebf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="413e882f-5f73-1a57-373e-d30702772893" executionId="7eccb73d-0245-40fc-b459-57e80882889d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10613081-8054-ecae-ed47-83cf6ed30748" executionId="fde84581-1223-433b-8bd2-c0d6de1e997a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28dfcfc5-71e4-5551-866d-bd727a2fb916" executionId="02414d43-b40a-421d-ad7a-c1726b732102" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f59bc880-ba88-5ccd-d6bd-69f5d95d2c9b" executionId="40ffe6e0-4bc5-4ff9-83d6-88f0cc69f200" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5aee99b-a815-a85b-9132-0e6659aaf330" executionId="ffc780b4-b744-4eae-bb15-020162380bda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d95a7f2-d688-fce8-7691-cd001ee7bfe4" executionId="0c28034d-b2db-434c-9fae-d914e9d0d0f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4a73ec4-8248-27e5-3b81-c661badd3661" executionId="e0189798-257f-4647-8893-4d4b5a1abad2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8adfbe7e-4cfd-75c1-f96d-49441b95985c" executionId="271308df-d562-4ccb-b6cc-3ba5a28e3b48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab9e7e6e-6d2f-931c-55d3-aa811c4391b5" executionId="19675bdb-a1e8-4586-80d9-21559effb8ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91b24974-a164-a7d8-1d37-c0089c06d9b1" executionId="f07a42c7-1937-4092-be3b-f666326392f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d576fd12-dec0-2a83-0c7b-cf68127141a9" executionId="e44b6523-b5f9-4b64-a1c0-98a0c9cd13ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4ac8330-f886-4290-e73d-138db862a486" executionId="e0e8a62f-331f-4f2e-b4ba-568bd6194de6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d4ab1bf-cb73-9c16-9550-622b2abef17d" executionId="5b7db3ad-606a-4ea7-85f0-2574f05416b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3faf4abb-5d4f-28d3-227e-0c526e53f977" executionId="87b4a13d-60bc-4a5f-8ce7-13f6bd63a284" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a17e300-168b-d101-1a2e-de6c626fe847" executionId="15808004-3393-410f-8124-954df160a175" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cff87ce0-ac02-feeb-01c9-ccecd0d6feeb" executionId="49ad9184-8934-4951-b5d9-709b6d818047" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc410954-6c77-3aec-8700-58d575c4473d" executionId="e79d4856-f408-4b52-84ee-34a3bc6ef732" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa7a80fd-a4c9-4b4d-10c4-cca9bd8d4ae5" executionId="d33933d8-435d-4fef-8e7a-e9db779b818a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="204c66c9-c5f4-97b4-2d24-46bb9392add7" executionId="58a9ca81-28a6-4746-930e-cac54fc766aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e1051c1-9c4c-2067-a7c2-54cb9ce76371" executionId="0b223b0d-e32d-4a7c-8c8e-bc4d0941d33d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f33813cc-d371-e2f2-a61f-d3aa7054e9d1" executionId="a42f60cc-d4fa-4222-8283-df4fb9e08da4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02e99185-227d-462e-8aac-1229e6a642b8" executionId="b6b9f857-038b-469a-95a0-bdac2e90ebc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="125f5f59-beed-825c-9774-d3019824876b" executionId="5911e57c-32f2-4975-b8a4-38382978fd38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d8de6c3-a4a1-02a8-4ccf-b1865a6a0863" executionId="7d4ebfc5-865e-4be0-b050-4a6000097de1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86490483-c0d7-77ee-fc2e-d47db6335368" executionId="45c21b57-b16d-4833-9e9f-e13d997598b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8333fed-84ca-d5a2-bc34-5cfe5d9480c6" executionId="bf1092e4-e56e-4d26-870d-3f4cfc2106ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6bf33806-4140-93ed-2eee-60288d8a0b65" executionId="0aeed2d5-9c79-450c-a875-f131f8bb8c02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8383dbb-e46e-baed-720b-b98cb8845b3d" executionId="ae2033ca-35c2-4f95-87bf-7ab701f68307" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d93fd39-d9af-0e56-4bc7-f51b250e0307" executionId="2a2a8941-b0a9-4f41-a56d-be59c73c83cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76c7c833-e888-90e8-f7e0-15d4a8e6ab68" executionId="8a5e04db-d700-49c1-9714-1c9bac3d7cac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14918b2a-aca0-607d-3179-d7917e078a1a" executionId="76838dac-b781-46df-a7cd-0df4c1e08878" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a898cd21-2dd3-aa11-f5ad-98d4ce3d63c9" executionId="1047b073-232d-4c43-ac2c-651d87d5d545" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92bd9671-8e37-a07f-23a5-76e9d08b4229" executionId="d99d404b-6e7d-4ac2-9866-5a05b84f82a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6d67d9f-16d8-17f0-a24f-e6d93a14057a" executionId="2a38128e-b8aa-4b8e-818e-9f9d4e15a4dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e61ed3e0-4274-df45-2ca9-2540936d6d6f" executionId="417f5cd8-f34e-414a-a8a5-6c2e10f2fe0a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f96dba91-df78-49a7-f741-7f6aaf00b872" executionId="4eeb5ef1-63f4-4b72-80e9-019bdfbdfb66" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="247cace2-2250-56d0-036c-e5ba16fac99f" executionId="a47f35ea-bc38-4bb0-847f-96e8122a9c91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="15a065bf-6844-92a4-a2ae-1bdcc6c9f747" executionId="62588550-3998-430f-8ced-c2dc45cb85d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68d39d5f-5e26-6b1e-7704-2d52b2eaad56" executionId="41955feb-7905-446c-8d07-073fabf2f7af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63a8f3c7-d15e-a139-a333-09366207a0a7" executionId="84532757-c264-413a-84bf-bfc7be464455" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d6e4ebd-9b86-8325-016f-25e77d3b534c" executionId="bdf93e85-6b8d-4209-98c5-6e1d1eef7766" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51341829-e88b-399b-3a4a-a99227f2de56" executionId="0234f224-d5c2-45d6-b8e6-ddbf18d66d6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4e44a8d-8d37-624c-9f54-73da1df2c81a" executionId="d9f49f02-9d9b-4c35-b575-dd84ef492e5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4041f6f9-4629-f6c1-d8fa-da9c5896b125" executionId="c14914b7-72b7-4273-b66c-95604cb4afde" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f708a38b-ae92-cf34-8741-3e08188797d0" executionId="92a5cf7f-3f0f-450c-9d9d-8aba4314c8e2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="187ad563-5bad-d3b3-afac-2ddbc36fb5e9" executionId="65ef0dc4-64f9-439e-9f6f-9b030baad782" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f0cd1c3-c108-7969-43ed-bdb5373559f1" executionId="1f8b0cd9-e5e1-4cf1-baf0-bfecc4bca855" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36144847-de01-fe86-9acd-4f60bdf76449" executionId="6ef88122-a713-4e9c-8f0f-629d1b829196" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="deb05467-e0f5-6998-bc66-831a8929abb8" executionId="e8b2e5c4-1224-46d9-a2dc-21be9ad572fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e21d77b-ca59-9c81-5d8b-4b63cc11cb88" executionId="8fe1b6d9-91ed-4fdf-8b97-b06c3a935ac4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5fe44ca4-a628-dd46-1d43-c0811753df46" executionId="45f813b9-4c3c-4365-998b-41d61493bb8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa718ec2-8e4a-721b-ecac-e40f6594d885" executionId="b32aad2a-005f-422a-8201-f9c3cf9903a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b03df8a0-c18d-3b80-0fee-91e020f92e19" executionId="6b20baa7-3067-4646-b087-a6de8a34c935" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ecf321dc-fd20-aa30-d5c5-dcb9fede659a" executionId="c2515558-fc02-49f9-bb5f-64fa8aa41588" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7cf592df-293f-42c5-93a4-cee84f8ec705" executionId="8c68acb0-832f-4a26-85a0-3ca43d4e0cc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="020dd076-763d-898b-ac51-63a0c1561c0e" executionId="1d8e0358-2d8d-4c7d-a039-834c254ec609" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14fee0a2-07f0-bc1a-a1e3-5bf881fadb6b" executionId="0975bdd0-295a-4fe2-8a68-d54b15743912" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="757f98f1-6b15-febe-4c27-feb2a5242929" executionId="e6847b8d-b6a7-40a9-8451-ce36d61aff59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b63aa8f-9f86-158f-600a-85e113f587d1" executionId="4c976885-d54e-420c-b668-6cfdd7aea12e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d6264142-ed9e-0230-b0c2-c4d54c89f534" executionId="b54d8d8c-d98f-42f2-bb19-5f818bda6643" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0881dba9-4980-6975-5649-21e5613317c7" executionId="010cd5ea-9bd0-4973-a274-83872db00c6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a9b431dc-fcb8-667a-a2b2-1332f8570507" executionId="5f4e2db1-ad8d-4b9a-85d4-15ecd8a56066" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="775a6f83-2593-6301-1bbb-351ddd620d4a" executionId="062f7033-686c-4678-9751-7a6a1b93d5a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29c3f391-2a52-0477-1eac-9f7a3fe85ff8" executionId="2016ca71-31c2-4883-b155-25b875ce2ebc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8336c08a-3c00-8d52-e909-5b407bd6b011" executionId="b48ccf18-9945-488a-b28a-6572b4862622" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6aab743f-6931-4fdb-0013-cd4ee4922c3c" executionId="3804d840-6e63-4233-9bd4-f1286871794b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cdce5b04-c693-0dbc-f98b-8f3d658b45bc" executionId="6f352f08-3703-4e14-8549-81f4f035a2f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="951d6230-bd65-8702-b149-1adec8fbf533" executionId="fae02d6f-4cb2-4f5f-8ba6-3d9574ea1834" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c842967e-f057-70fe-949b-010be537e625" executionId="3cc2f3e7-6364-48a9-9d7e-3850e2fdccd7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba55abe9-72ff-14b0-bf44-3ae01d3fcc30" executionId="646d8fad-155d-42ad-aa46-6fe3e8c27252" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7bc50878-a03f-67ee-ce3e-d0ee490643ae" executionId="e670ca9a-31bf-426f-bc8e-91ca68ea2182" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dd0a504-9a82-e63f-2edd-c4aa80bef3cb" executionId="0122f058-0830-456c-9a46-b40ed6e48029" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11882a2e-23e7-60fc-aa97-397997e04b25" executionId="9ee3c267-18c6-4a43-94f9-2e9cae87eaac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2b7e3d2-2366-2478-0c3b-b9f03a61cbb8" executionId="2919aa46-08a1-47a7-ae7b-89ca26610b15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d750f795-0da2-bb17-8107-8dd8f9053231" executionId="3a377152-3818-4b6d-b4df-a8f13dfca4e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="376ee951-053d-13de-9e15-70c7b500bfe0" executionId="1a75b4bb-3056-46f6-8087-eeaae83c7c7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e89e369b-6136-c4a0-4e31-b68c970692c0" executionId="a9087fc2-1e49-4949-85bf-0e3fcdef3724" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ac75799-5490-9ceb-b321-0523c127bb97" executionId="fbb79d05-c55a-461a-9958-3ccdca345d02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="505bc260-c469-2a6e-c095-4d420025231f" executionId="41effe1b-b38e-41db-bb01-dfe8ba1c2463" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c14417a8-d833-78d5-0427-85f81afa0b82" executionId="324d832b-9f5c-4a8d-821b-efb87ba299bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef08cb55-e83f-1917-bacc-6b6746703c6f" executionId="ccccb33b-1a33-4866-b400-fbbbc10a4bc9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4ef72ed1-c31a-e243-67c9-e43375b6340e" executionId="a511c940-da13-461f-a3a6-785e3ef114f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="db15e8e1-f53d-cb27-99c3-739abdffb1ce" executionId="7ebf28f7-a6c4-46bc-884e-5362cbce0a91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0662c63-adde-4702-9dd5-70b6afbe8996" executionId="7d1e5e02-45f6-4d03-afc8-2e7351fe168a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92b4cf56-0e75-818f-1b86-bd5a2e1613c9" executionId="47ae3d9b-ca1c-4814-82a5-53d299e7bd11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea22b0e8-67d7-fa78-f883-820a22f6f302" executionId="bc8e0e0e-ece1-45a6-8617-091f204def9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0608f51b-eecc-4e8f-f8e6-4d630ce983f6" executionId="ac34173f-a7a1-40c8-be34-8dbee7f983a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="212dd999-4cf7-b083-bd80-135c06132a06" executionId="26a8d78c-be70-4e39-a6e6-65824e39e91b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="367e9d53-b1f2-7191-ec48-4448aa95cb33" executionId="e127e35d-da25-4a9f-a7b9-8ff1e8bf9044" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a770df7-2b79-2e3a-c985-0bd6d970c754" executionId="0cd163ed-81d8-4843-acbc-d796ee4c9dfc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="65b422a4-a0c7-462f-ca66-6345b1be0e82" executionId="8f82555d-516c-4f0d-84b0-36c40ef71a3a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ea1574a-0d47-3be6-ec8a-ba9673a21164" executionId="9f27923a-c471-4ac8-8280-40421261b18d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b72fbdb-745d-5e94-0dcc-1004b291f6fb" executionId="e82c8c16-13ec-4a35-82d7-2ccf9af523cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08e16d68-c179-252b-4d7d-c464f7e1d901" executionId="9f74048d-5739-4b24-8930-2cec38cda80f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec80dd96-a1ed-8573-058a-c4413ffbf7a0" executionId="36a9728e-49ba-4301-9247-7fb1313350f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="627f9952-2edb-5341-7841-201150eba998" executionId="23927ce3-3660-4438-ba30-439e2056f725" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cceab81a-506d-6c31-c036-06d3243c9960" executionId="cef4ae7c-cff2-48ec-8cad-22023ee9d147" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="846a45b1-d7f5-1c39-3c0c-a4c23c94133c" executionId="826b15dd-38c9-41c3-b0f9-d8ea0d44dce8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0eaced66-8011-c03c-b6f0-aec042fb1578" executionId="2458fff7-31e7-4bb7-a960-7ec06a1e1c0a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae7d6803-11e1-0081-ce63-78bec00670a7" executionId="23afa485-39a7-4063-b891-4a9f4b76ea4d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f3814de-7df6-32a2-b09f-3f28f231eed5" executionId="d285daec-9b83-49c8-b9b3-eff1fb9c0cfb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3494b454-f14e-f23a-226c-c60b125760ec" executionId="be2df73c-0bbd-4e8c-8e20-60defe1b86be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb5e4b4c-b600-6a47-3fee-677fe3df8e3b" executionId="9ccba08f-8b56-426b-a5b1-f062f3a26e51" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b750fb3-57bc-8cc7-7834-5adc48d2a347" executionId="d0c5f443-0c65-4960-bc76-b8c35ce1b247" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2bf9a495-9b89-5d86-4f7d-fd6ac58f767f" executionId="cb327515-786b-46a3-afe4-e12e150cb069" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e695683-2469-5cda-a5a6-c08b18f33756" executionId="cb1a47de-5c1d-4af0-bb63-923431d6aa81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f972a51-db87-1893-cb3d-87479f4e07f3" executionId="f9c5b8aa-c4a1-42e9-be29-cbf82b863470" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6d3bb3f5-96d6-3247-acc7-1676096b0e7e" executionId="c0843d2a-16eb-4f5e-9596-577981e2ad12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b3e5b9ac-858b-a8df-0d80-880ecc9808d9" executionId="fd109abd-0e9a-4540-9d65-e7827ef53fb1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae7d63b6-aeec-239f-8fec-a205376b3c82" executionId="5d915e4a-7c4f-4247-80b9-7112e94d9535" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2581c941-3c68-b8e5-8bee-18c1c6d657ee" executionId="3e30073b-3bef-4d3d-a74b-b9916d526d48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8d02d40-d394-a52c-b088-4c44a55e1e0f" executionId="05b4d789-c06b-4e42-ac1a-889157532a23" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a358ccd7-1df7-8395-0955-c52355645e80" executionId="cc575479-4d50-4bf2-bbc4-30cae43a067b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b85c1ceb-d1a3-5562-cb6b-187c2a702691" executionId="15fa243f-9564-4d24-9b24-f209911379a5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3672eb82-1d35-d44b-2738-825c275b220a" executionId="2e5b5e8e-0c56-426e-8f42-62628b06feb2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7039b170-2191-0406-0300-d7750e9c4590" executionId="1b2df612-6dd6-49a5-87f5-9da60b881469" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="238a34b9-ca85-a62e-3c1b-8b7555a106a7" executionId="1167980b-cf54-4f72-b38b-ee780be0701a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f2f8b766-e5bb-791e-f943-b352efa53cd9" executionId="66ca733d-e2fa-4eb8-8013-25153576c478" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b37c3bc1-14e0-1fd6-6603-145e64db0863" executionId="8c6d631a-ca9d-4a98-9423-57ed8f178b36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="188095da-1c05-9c9b-bb19-a755210a1209" executionId="d77d10d1-866f-4da3-8571-262642294868" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f5397e0-47d5-3d17-5348-df08e189acbf" executionId="79e559f3-08c8-4859-b5d2-18aec605fffc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1e6977c5-6015-f38a-845f-ce6f0417f4e9" executionId="15f0b23b-4ec7-4b06-af4d-5409f29ee59d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b0db6f4-72e7-8cf4-fa32-70d2e9331a98" executionId="f49fbbe3-d418-4656-a96d-aaf5d90ed04f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bff89dd8-97ef-eb10-bc88-ca68a1640b67" executionId="f062eaad-6d49-4f76-a292-5c02586181a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71fa71cf-75c3-d0b7-b0d8-21091e60961e" executionId="b5033836-444f-4989-995c-12de954099d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="081ed490-34c1-0646-5886-3cbc33372286" executionId="3208b462-39d0-4dd5-869e-c5c42c0fe488" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b6fb377-0429-3912-ea82-b753fe67fff0" executionId="39dbda33-9f70-4af6-ab5b-c3363b23f284" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47254a96-69b8-e4bb-5991-8daffa3df47d" executionId="7e3b1c9f-4c0f-4ef2-80d5-a4b4f5deab96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99e9bd64-ce14-1d6b-ccd7-547118933850" executionId="60380ae4-175d-4159-881a-1c742e42c1a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dfb72d58-f99d-0c39-ad55-e4d9110d6363" executionId="997e6c06-f35c-4531-9d21-8f0a0ebfdcdb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1e34a92-c989-1a14-a54a-907fe734d090" executionId="2cbd828c-bf2a-4416-a3d8-14b00a34aa52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7572e84c-2248-269c-96d6-9efc266eba19" executionId="0142afe2-0736-4749-8d40-c27c646e0695" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f584d13e-69d0-2a69-dcda-8da73c391d8e" executionId="1b7e3316-1a07-4859-bdca-d1e2305a8a8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1e1db13-4dd6-13ce-27fe-9f4c16ac5a9d" executionId="e37da6d5-c7a3-4ee5-a16f-15e1d359a10b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02319e59-5a71-f532-6c9e-ad32f367f6d0" executionId="e54a830a-9c58-4f53-8f9c-3900a4304765" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a9943bc8-1ac3-a1e3-b6b4-fcd8844247b5" executionId="9c870665-54cc-4b8e-9929-8d2223a4f21a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24b6cda1-ad91-55bb-4a6a-cac5f2078521" executionId="9805b118-d4e6-49ea-8d13-f97e9b8383e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca27b2d3-77be-7038-14f1-fbf5dcdc8eea" executionId="863e2865-7f07-41d8-8b66-f2b939988175" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="522d2c18-ed47-dacf-c7f6-b4b3c286b53d" executionId="3237a73e-3514-4018-a34e-4cee4f8b688e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="960a762f-66f6-dfb9-70a2-082d489ff7cc" executionId="9059f76e-f5bc-466b-9360-2146ee681183" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="034ec99f-dcff-68b1-9509-2a7c0a129012" executionId="861cb834-4a9c-41d9-ba62-fc0febc45db0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84c8556b-f7bf-25ea-657a-103bafa8f887" executionId="58f640c7-bec3-4a3d-b206-cb580efb569f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbc9dc68-3c7f-9b64-1af2-2681c279c7da" executionId="91443d46-2dcd-4322-8c41-f42fee87d03a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10ea8f13-31d5-1301-9d5c-fe9a17b3506f" executionId="8fca1618-cbef-4157-b58e-63b2cd868d32" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba61da5c-22b4-4700-7eb9-99a5927e4d75" executionId="70a6a6ef-e512-4e1d-94e8-5fffb69a6387" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4dec8fad-aa01-b699-7ada-522a43d86674" executionId="1436a16a-9da4-4a9e-b795-2a12d2224332" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="100a3f0f-be9c-3b9e-8d66-32f58e52f949" executionId="3e25850a-7e58-4156-95c3-1b9eb273e4b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c734cf90-908a-824c-ca22-1766537f29b9" executionId="53dc9d91-c01d-4cbc-a4c5-d8800cb2af63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4bc0b55-d81c-16cc-4b85-88d524f12092" executionId="d6dc96f8-3298-409d-bbba-fdb1c11db51f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88550bbe-5d31-99b4-2fb8-bec6a6ca1654" executionId="f3e238a8-b500-44ee-9e38-74c15ce2990d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="715c2045-78f8-6498-cf0f-0b1a59ff7d3a" executionId="c6e1dbeb-306c-4828-a853-04c1aeb61610" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c3bd743-6c3b-2348-a9c9-538f2fb75f25" executionId="4760f419-939a-4189-956b-8617bd70018d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14c12f21-4075-88eb-9460-2437baed4796" executionId="27444666-f578-4f5c-b9b2-0d1ce0f0a7e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e837361-15e2-283a-113c-2f4c72a3f24d" executionId="a3532e48-432f-49fa-90c4-f857c28e4850" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff912f26-8dca-21ed-7f82-078a7352816b" executionId="e630fced-1ed5-4a14-a0a8-6ce7fe2d470f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47756e6e-5572-5939-e9bd-8bb7f23cf648" executionId="29a73868-ad3f-4246-b05d-a1d601458fff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a31557a8-beaa-0773-d840-9dac7df7c016" executionId="9be49b26-b174-40d7-a707-eb46d6b4c2b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cfc38294-35a4-4131-c56e-114bcb0a43e1" executionId="5674e499-4c69-4ae0-a685-46d5f6083d00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e96b658-7822-a4c7-f2fe-269b62959fe0" executionId="2ff14648-08b9-4661-b854-1000cd34f907" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc08abf5-2534-c408-1e7f-8412f44e2aa5" executionId="bdac2c9a-de10-4b5b-bcb0-92d6d9463b9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a5c79bd-8bb2-bd7b-59e6-009860cf60df" executionId="2de6a6e2-79ca-4b31-aac3-5e44f61bc7ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f6638af-638b-157c-d110-94e98abdf32a" executionId="a9910230-43cf-43b2-ac77-20745ee9c5dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5454d72-4d22-f9cb-b404-612dd1ebd902" executionId="5a560794-9c44-404f-ab1f-214f78bfadb2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51871a82-043e-bbdc-6bb9-dc80514a6346" executionId="3fbcf99e-7c0b-4b44-8b41-af6d04e71a10" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d2ba7f4-0a56-3cd4-649b-8b437defa9f5" executionId="a519619b-6548-4500-8932-5536f40aa22c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c7c701e-5336-659b-030a-04afc9dd817e" executionId="65fb2f4d-2443-455a-bff6-403305501b89" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fc516c4a-cbc6-591d-4131-0c15440ddcb3" executionId="936ac37a-67c9-410e-aa92-13b5a6d614f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="230078b2-43f6-3c9f-fcac-c42b7a1b7aec" executionId="5aac3be7-9d8a-404c-9dc7-d7dceb0ec4da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="904e2066-1d2b-b1bb-a20d-0cfbeb0d9ec1" executionId="5c858c7d-9ed0-405f-94a5-df064f6a3b2f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e542a309-f317-a569-1cd9-cfc79ac2c64e" executionId="5a984d5f-95b0-401e-8fdd-76a2e7e4819d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2bd0ae2e-db62-f369-96c2-9578d90b0eb9" executionId="5db02632-1b64-4772-a115-c915184300be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e77a1b9a-b0f3-32dd-9c2f-3ca98bda9fb3" executionId="6d91853d-3fdb-413e-91ba-fff0b5c91e8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e49fdeb7-c2b4-b72c-1b43-f91eae425213" executionId="e8072254-8745-4440-b857-9cf97d514725" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="743ab1f8-3990-c7b2-d6b5-9201c5391dd4" executionId="d33c6c21-3043-43f2-a56f-bbf20e754f52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9cd80a49-6e32-35ee-b6f1-3bea264bdfcc" executionId="65f77848-ba54-4d66-8df9-132ac368792f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="024227c9-f923-22d9-ff3c-b67ce23baece" executionId="92c36b39-f24a-4dd6-bfe1-290f4e0799c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7390f7b8-d477-bf52-2ded-5dcba132951f" executionId="66af2787-182a-4166-b886-2c2f30c2f284" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f1b8769-970f-92ac-3774-0d8a7401244e" executionId="80c2038f-9aeb-44e9-9e83-aafb6a16dd5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9cfb7bf9-e772-a042-c11b-dff2cda49f62" executionId="6aa53bae-66e7-4fcc-9c7e-c7e1b85e2ccc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fbdd4432-a0a4-9fbd-69ef-ea8091f13b7a" executionId="7cb38ebf-1b03-47ce-bc1a-2a61871cede6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8cf13320-6d6d-9d1b-ca67-369bde33cd8e" executionId="dfe95d20-a594-45e1-8ccb-17206aa6fc78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f43e6809-eb14-3b12-a789-e94127015d35" executionId="4bbe8220-2e36-48c2-8509-471b0b0b245d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d28d7174-9304-13b9-f788-5c17b8224008" executionId="fd35c69c-324c-4ce2-b6ee-a45824fd2b53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d10ce0a2-7793-e3e1-f49f-df2dcdd01162" executionId="98c3986c-000a-482d-bc91-26460af32601" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbcba8bf-1ccc-76cb-86fd-588596f51f86" executionId="30dea194-9cd1-4a9c-89ae-ea81c51f718f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="889b0366-b4cb-d05e-789e-186a1da0ce38" executionId="5f994658-ad69-438e-a1fd-0483f5b88167" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="327a8bcf-5641-88ce-f631-89a2acd1fed4" executionId="3c07bd0d-45e8-4d08-935b-04e4d51629d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd739bd7-051e-8600-d623-c94401c4afde" executionId="151e5373-ece3-4b78-a57e-a4d0bd76bb90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0838f303-9f0c-2a9a-0918-b16a3adacea1" executionId="6a2e73e6-5f78-4af3-b2ae-32413c3b497e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="954e8a58-6ead-1a00-543e-e75ea0a5366b" executionId="f4ca87e9-5069-4aa8-9f86-c2845120b3ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8bafc3a3-fa8e-8479-cb4f-7d0d2b50763d" executionId="a845ee2c-20d5-46c3-9d41-04408beba5bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a33bf16d-3acf-1fd2-48a7-d0e981840f13" executionId="1a244a52-cc63-4c07-b3b1-7f77ab3b425a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88b4fbd9-0da6-3423-43dd-b294282f6a10" executionId="cd5bc77f-4df9-4876-a87e-0aaea1d25690" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0f0b713-73a9-6c8b-d763-d97f0f6e089f" executionId="23cb54db-acea-4d54-9d70-5d61c3a83301" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e24a7b26-0ace-c455-f0c6-478137288d66" executionId="a6436c73-e6e9-4268-8be7-7f3b44930d68" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c541383-90dc-59ed-8808-2c2e8425d067" executionId="fb4c2091-10b6-4a46-a749-58ad829d316d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0a30046-4ea8-3d94-2b8e-0a8a2861fc61" executionId="29f484f7-92e9-4ae7-95b4-0138122fcbd3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fabf2558-bad1-97da-0a55-ca7469f4efda" executionId="a1b0cce5-1ad2-434f-b316-da106d2a2d21" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="94860150-aab6-61ad-d5cd-3e85a63faae8" executionId="7d52c069-f5a1-4985-9834-dc8da5914857" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36f4dedc-629c-e2b0-d37c-bf5c5ccef2ab" executionId="886b65a2-b896-456a-b509-795ff55d05bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5e2d12e-b639-e948-c820-a1b85567db22" executionId="b15f2426-5eb7-4594-b3dc-bde020d30bf7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8182a0a9-43ea-20ff-a4f9-380b8bdefbb6" executionId="8943a51d-14c2-400d-98b0-a131fbe2d2de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1370a40-2257-15d8-a79c-e0b0066172e8" executionId="2b524b75-ba1c-40b9-8b91-875ee8029bfb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c06e12ab-6e5c-1105-d97b-4a96cc9b10c7" executionId="8f5ee89a-3be3-40ed-8490-ac2613ff4e67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d0b25b3-5c07-0a7e-a6af-d2a3fc39575e" executionId="e5683700-d12e-4ea8-a678-e301c640b68c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f37721cf-0139-76dd-8f3a-ee43609c9bf3" executionId="a834ca93-2371-40a7-897a-335075995b6d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="773ca150-1c99-8d35-2db0-31dcd92e2928" executionId="8f5d510e-d35c-4185-83fe-0210b8cd5ef8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3151eb1-f0e1-e363-513b-78be289586d9" executionId="20982bb4-b7d7-4d03-9585-9b5a149f0575" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f4945f6-205f-77ad-da12-74c532b9029c" executionId="0ea220ae-9b13-4be2-a4ce-e867edc62237" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b582f6b-d891-0a58-1dde-49196bc82626" executionId="0643c714-ea39-4f86-aacb-3873c307245b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef271cf1-b26e-fce0-565c-0fbac50cfb9f" executionId="a90d4fc0-55a7-4a85-88fa-d009ec74e5c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e84dbdbf-65d6-5843-0fd2-43cf7edc90ff" executionId="b30e422f-3556-45ff-b30c-013edb0e2b32" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05802647-1477-f0ea-8343-365e87b92734" executionId="c36e8bd6-c36a-4aa3-b524-c8745ef9bb95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf92442f-ffcf-37b1-c863-bf9eb26ddea8" executionId="d3fb8313-64de-4f64-8c4c-6f554a3c1753" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ddd2a97a-bc3f-c9ba-5d0c-8c0971f279f4" executionId="9bb04602-c8c0-47a7-b228-23ea530112d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66ae5b97-fd9e-0eb1-8a7b-146a8f553367" executionId="53eca9f7-14e6-49c9-b170-e8e59035ab5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25493034-5dbd-c0bc-638d-4771a3382808" executionId="87142895-0592-4cb2-80ed-6f62056154cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c056e857-086e-0025-dba3-a73690f313b4" executionId="a508248d-a9f9-429d-a0e8-a99bd69ac74d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0aac1784-6140-8d0d-572d-b46a5f0aef12" executionId="25ac6232-754b-4874-b556-675c7c46828f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ffbb2759-881a-8546-5819-63aa68753edc" executionId="83b11b47-d397-4a33-a2a5-3739c5a6d2a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="19157238-7c0b-1224-6660-150112fca887" executionId="b50bd2ec-5029-45e7-8243-234888a30f7f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49fee0d3-3f47-4b49-760d-291fc3bbcf3c" executionId="3d5c0caf-c73e-4496-b794-cd8713fe7559" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1366124f-a0a4-6407-f1b7-71992325470b" executionId="fa953b2d-3294-46d4-9d45-27a98cb9a510" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b8540ed-99d0-8d90-8c0a-93cf07afe4f0" executionId="40ee702f-c2fa-49bd-9869-7a508d64d198" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b3a714bd-e8cd-ee9c-9774-197ad90df4e0" executionId="a68dfeef-807b-446d-bc39-cc80d8032ed7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74aab28f-9f7c-46c7-87ed-fa6a7f36642a" executionId="0984e81c-81e3-4ef7-a557-4cd8bec00040" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="10698101-8058-780a-88d2-dd65efcd2621" executionId="897c2a39-0835-4f36-8fad-72fc0dc83042" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e7234340-5176-4932-3ed6-447e2c37536e" executionId="f6860a90-1e70-448b-a2c2-589d75bc955f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="229e9b16-e733-9d49-76a6-5f3e08da7955" executionId="16ddc6a8-29a2-440c-beac-0e3e73ad3264" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1109307-4fc8-fe76-7e79-6ffef5d830f3" executionId="56105ec7-0c23-493e-9a95-5091de5d879b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e46ae564-062e-58fc-bf93-4797f4242118" executionId="e6927b94-f15e-43f4-9a17-1eabe12a8c19" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18152db1-5233-250f-08aa-23f8de301626" executionId="16fc437b-6c60-4d19-b807-3dad53d3aef5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8119c33c-b292-27e3-424e-2ee04ff5f20f" executionId="296f4580-118a-4cde-b75e-478a61988382" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5271f309-01fa-634b-903f-aec0bc3b5e99" executionId="5a786031-6e92-4c55-a996-1abb0f32cc73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c7bf3c9-23a3-628c-6c88-0ff4e102484d" executionId="41fdde48-d38a-423f-8753-4065c5595051" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6390bfb3-5ac1-f269-5941-31667a25464d" executionId="cf691ed4-c280-45ab-9861-a29613dc2b0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d984321-6e2b-fae6-a746-959bc2dd7d33" executionId="23803b28-5e9d-457b-b468-52fb0addf904" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0367878b-7833-fce6-919c-7b0e4fbcc777" executionId="f4984901-6a46-4cc7-a95b-f529a3616c23" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f1c9860-2c13-e95b-bd48-2dc911bcd5ad" executionId="cbe50f73-6e91-4a07-aba9-e72d7b203b39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d770abc-1d13-2067-42ad-f78ca16b8497" executionId="427b60cd-dfa1-4d8d-979f-fce675cd578e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="988291f9-5719-8f5f-5fb3-40ee25afeb76" executionId="8ee3e70a-3a7e-4a30-b773-69451fd0915a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="697d094b-7974-45c3-a631-a7b586f9a1dd" executionId="5eb9c8b1-90f8-4c7d-9c1d-08317fbf8d9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c9d96a9-ca93-c973-0227-d860e5d405da" executionId="88867df8-9a76-4b74-8df5-bef2c8aa5f20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ed41a3a-44cc-593e-e104-426128ec5b3d" executionId="77f92a3d-8277-43ed-a79b-ba10d6439d45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d33dd306-5d41-18e4-6471-146964822556" executionId="c9b88d9d-821e-4221-83cc-a4670a5e1286" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edba1135-a0fa-d876-9c47-5c21a52e050d" executionId="0be87cc9-980a-47ab-a154-1ce5f6f29353" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="515670f0-9475-f984-c503-3d5c984c01f0" executionId="5ad75454-9996-4d91-bfc2-d24514036e54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09dc2407-3e60-4cc0-319c-334426f99aef" executionId="02978061-cf34-43d0-887d-4623869344c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a92fab6-3431-8641-33a3-8262921c2731" executionId="4bc9499f-b8da-4b88-be1c-74a65b256003" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e51c77f-5082-7ed7-d2a1-ab8f2290fb20" executionId="01984fe3-41de-45e1-ad60-9bae342d461d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1191b40c-1b4c-d64b-07cd-72db1033e655" executionId="5b97310d-43a2-495d-8890-9a75a88d028c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="780d9a91-2047-aa32-c289-339d19d711a1" executionId="b97e8f66-ee56-4d82-bd3e-dbb8cc000b9b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ccd8c7cf-7fcd-45bf-5025-254761c9bebd" executionId="e08ec6ce-e8ed-419f-ab75-c9e22ea47717" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="714a4db2-1cd8-316f-be0c-7f0564afc450" executionId="dd8758ca-447e-49ee-9f77-f8bfdea819c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a0c9143-e66b-b7a3-35e1-dc372686090e" executionId="0555adc5-fc34-48aa-929c-bf6689174263" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="154b074a-bba6-ad40-3c74-d79e0a8da8d4" executionId="bbaeaaaa-d4d6-4596-80fe-92640b102895" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da35511f-e41f-285e-31d2-5f5ac07766d4" executionId="3e195468-9b5a-46c5-ab66-fb3402302b02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd5cbbc8-ee2c-b5ef-0a44-bc90c05fe183" executionId="665f3974-000c-490e-996c-e2c4aaccebc0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ace266a9-510d-90a5-7961-8a2e627b504c" executionId="0d5269fe-9dd1-4e9d-a676-4cfb43a27168" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e1b46f9-16b3-4bda-d35a-93b365478c06" executionId="fb3715d5-a5dd-4ee4-94e4-5bdb146bbc46" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ff9ccd3-9878-878c-127c-5b124e6c4917" executionId="954579a7-41f7-4d79-a442-90586953aa6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6be901f-8306-d244-f751-3bffce51e4b0" executionId="af7fc8ea-662d-4c3c-baa0-aa2ed4a42f3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0665cb18-34c1-d2cb-497a-49cdc01d0a00" executionId="06c39cd5-f45f-4259-8682-6283ed1b81fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01af7f90-3f66-e7c1-4ba1-8c19e14429a3" executionId="a5dc40ea-25bb-4e20-a277-ce0d97c1ea43" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a9919e51-800f-ec19-c41f-34f6587b8c4b" executionId="ff1157a2-930e-41eb-80ca-e4d6d1a536fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd42a84a-3192-2cde-f3c7-4f4c536dd7b2" executionId="d75c4c81-2959-4e92-9cee-c766ddeeba74" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0844210-d4c3-ea02-0ed7-748396c083bc" executionId="0facf587-929a-4891-9369-d12abd8a40f3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93542c40-37b4-8ad3-ab4c-7c60962b4b04" executionId="0df68097-aa02-452d-8427-2005f3257706" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78eb4e5c-eeb5-e3fd-fbf1-28e9bb6eb9a4" executionId="44894748-d4fb-4d37-bbf6-dffc0be82a21" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4aab73c7-c72a-9808-aa8a-8e0a40a8259a" executionId="8e36d78b-4ef1-4b7c-ad5d-e837f32279ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8522f4ee-1988-581c-78ab-c78f68ff62f0" executionId="e10359ea-2387-45d5-8d04-f004291ecacf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f367105d-4fbb-1326-b9f3-8af335965f94" executionId="4a0ed9e7-00a2-43ff-b0c9-e01984b7b437" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57e60872-aa5b-2fa8-9bc3-6324a9ff6ab6" executionId="c0218446-e1b0-480f-9e2b-5d43587c93fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b543f48-aea0-1cc0-ed51-2547c3201ca8" executionId="f04a8b78-99e7-407a-bac1-7f7662606759" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9acfcadd-d51d-defa-7963-9d53d1c36171" executionId="55d5243f-9f5d-4009-a7d7-272250ca7f76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8781aea-4ac8-b7e6-aa07-a1b8e408050c" executionId="5b734d55-47f2-4cb5-a577-bf9cbd0e3cfd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="482ac86f-226d-2159-99b1-3e0b15c6fdbd" executionId="47a18ef1-d2cd-44ea-bdb9-4dd37fe5203f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21a40027-fbfe-26b9-f62c-d2efb771872d" executionId="393f7365-e729-439f-9cc1-c90f7d919ec1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f09c5673-318f-626e-d11f-0ac2bf7c9301" executionId="c6e48e9c-c7cc-442b-8c17-87c4b81e1c8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7074496e-77ea-c202-e27e-7d6694e6cb91" executionId="0f72cd89-7deb-48ba-9558-bbaccc59d440" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6fc3c939-0942-b865-13b7-c3272029f90f" executionId="6617e88f-a523-45c7-8896-f94d63c2d637" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5dd22578-7d86-c0af-adfe-93bf8de0abe6" executionId="9b1f3586-8be5-4840-bc1c-8660bf0c576d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1e93fb37-7346-9311-1398-846091f07a80" executionId="76a00c58-565d-4ec0-a5bc-ddb95cd68a4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="516eb29d-a59c-e9aa-9ddb-a47176b98da7" executionId="70f6c6ba-2b6a-4623-8842-b59175dd2ae9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="da1d09d1-a5ee-29af-4a32-dfa145c35742" executionId="cc5083da-37b8-4660-a10a-a9206386e398" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f367724-eaec-b988-a9ca-1ed7c93db689" executionId="d323233e-78ac-41de-b3a9-8b4735a59002" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0260ce4e-caf6-be0c-a628-f9ad34ebfe59" executionId="0a77cb21-4cbe-4b97-8152-13ad78b2d9e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf4628e9-f346-6bf3-5225-840720bbe699" executionId="7cd1cde9-f4d6-43cc-9cec-70009b233c36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76016af8-30c3-be33-3174-7c28ea1aec62" executionId="980f0ba8-1872-47dc-a04b-9ec1ee2c1f72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f402aa54-18ee-edcc-a856-487808d1da85" executionId="e1119162-7dda-4c59-84bf-0fa004924021" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8cd62eac-03a2-1a74-dd51-e189534c3f34" executionId="4c6cbd2e-573e-4b6e-b08c-1a0f48f10049" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4913dce8-931e-9b0c-7020-279815c21ff9" executionId="1f189142-1b40-42bb-ba12-ed7094a0b844" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbbe0b41-3044-27fe-f6a2-6d1814fbef28" executionId="d1e89e3e-3596-4c26-9853-c4c3e8c83185" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="baa3becb-7672-6248-cea4-41f450c631bb" executionId="cd5c6bef-4b18-4911-bafd-03844f30afe1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eff62265-3e4d-fd10-e259-adfcdb0a7852" executionId="220c9723-f3ab-4752-a60b-414b1b8f9a5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6b762b4-157b-3abd-388a-c58903f93edd" executionId="8af304a0-7419-4a3d-93b0-6b3079f58732" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb83e29f-2dec-78b9-eda2-6a96de84ed0e" executionId="c4c854b3-45e3-43d9-9c43-1052e4b1df0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="568c05cc-fd22-d82f-c907-dd0ed3613f78" executionId="46ea9d3b-e892-4818-b8f5-0efda5a0d196" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5940400-13c1-9a50-64cc-9687d18a2d77" executionId="5a967978-0344-4e6b-9b16-aeccc6bd32c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc619cb2-8419-9678-9deb-e40d2289560a" executionId="eed4f3bc-493f-4d8d-92ba-05587529bf0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64165e3e-af5f-9646-b3af-821bd2e587fc" executionId="e488a8c1-e887-4e29-8213-279017aded2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e9f46646-851a-a6ce-04eb-33329a678952" executionId="e958cac8-f851-4209-9508-35daba362144" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ede7a4e-9fd1-154a-5d06-26027a7e212a" executionId="6a6e8295-a7c8-4d92-b8fc-34aced640b98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2f950bf-491d-1704-b3bd-3c23488661c5" executionId="e58725cc-b761-40e0-bdfd-1430f7482a64" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d94e1a9-2a0a-815c-9519-124b655d2e48" executionId="f0603b9e-20ed-42ee-a459-fd585896d0c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36852ca0-7987-11cc-6ca3-19ec05537536" executionId="ad91eeda-bb1d-4662-b151-39267093d9ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f6bec22-53c8-7dd7-987e-cc2bf6a44572" executionId="d57f5458-48d3-4243-ad4d-e5aa4e20826a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23ff765c-b052-d07e-f9a8-f34280cbe091" executionId="2fdb3d84-a392-4e5a-941c-5d032ce1b66e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc40d88b-dfd5-0701-7dc8-b811ad41dd36" executionId="db5dbf91-ff34-4d77-9366-5ec993a988d8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70c6622c-42c6-d83a-2b8d-fd7b9d7203bf" executionId="d6cb84a0-2892-4bba-9961-a739447e203d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="109c4c24-f41f-a4ef-27a2-69c90a24bfca" executionId="963cc73e-b79d-4fe2-80b4-d344e2d03afe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc240b12-b91a-34e8-d95e-a08d6ed91659" executionId="57563a81-dd26-4f3c-9b3f-db9e225548b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="276fadce-77e1-500e-972e-db9deea5f91d" executionId="3fc4944e-154a-4fc7-a863-21ce37c7bfa8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53a39c7a-445e-05f6-37d8-755e334b4603" executionId="407fe90b-eaa4-4e7a-99e7-e7f363c9c2e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c60678da-9285-ae5a-f3d4-0a9359153c71" executionId="ce17b404-dc99-4837-aee3-0d93c24f42b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4d68c92-a3d1-1b3e-481e-3431dbf2a3ad" executionId="d6f0e919-c5dd-4c4f-acf9-06c46413a035" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="39fc2afc-2956-5f42-cead-5c9e3515b662" executionId="90272196-5ecc-41ab-b910-9d37fc1c96a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37793c20-d57c-8827-97ab-ac5ef0ef3b6f" executionId="0e077295-3cc5-4374-8f37-3731be1a79d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="315fa610-bc46-1f32-7d78-ceec1c67acd5" executionId="97f33ee6-e05b-49cb-82fb-212d75501f8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="099a9f32-14ca-7676-b9dd-1002c6a0cdb2" executionId="18a578f7-b9ba-45be-800f-1706fd6906b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5a95e33-dbe8-6202-c6f0-a56f5419f704" executionId="38a0f16b-3392-4d6d-b1c9-d45cc364b215" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2a6bf2a-94ec-7361-31c3-19851b12d1ca" executionId="d103fac7-9cd8-40ec-bf70-652fa0c25023" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f1ca1a76-5275-22fb-aeec-914faf525052" executionId="a25c6110-1d27-4424-8bcc-7378d0188ca0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a9f1c10-6d86-8ab0-8af2-457318cb73a7" executionId="6f59ead2-df98-40e2-a8fd-5688398094df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="abf9b919-a906-e592-b072-dff12376100e" executionId="26be0b8e-29a9-4dc8-8244-b20ba8c9b2c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08760bcf-ac39-003b-493a-cf86239aa54f" executionId="61a9dca1-bc25-48c2-b55f-ffbe845436eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0fcb94e-95b1-6302-66b9-e182fcb7fe99" executionId="595baf39-e59c-4673-bb5a-b625e76c4f50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="662c40b5-7649-daca-4b6a-4e48ecfd8be4" executionId="c9c1b01e-c6a9-46bc-8cd6-6159cc175a96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cdf5daa4-2166-efff-8f4c-38e235c1e7d9" executionId="4f9a93b2-0066-4193-a8a4-297787fe268c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ccc9f5ee-fb74-9bc8-5c31-ffd4a302ad49" executionId="dc3e576b-5b83-48fb-b183-bdf459ce5f1d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9be5b8ae-83c5-0e0f-bd0c-8fe99d8c2867" executionId="fcb4790e-1927-4309-a72c-42c627299b54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5c528f0-3d85-4adc-6e97-b5dbae4e91f2" executionId="052e2b85-fcc3-4d64-899a-6463f5d7787f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4232cc58-584d-ec7e-2062-550645c273a4" executionId="a3736558-5045-4bf3-9266-5bf00938f4c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54ef1e08-2b27-41bc-0b50-e7dd8faf6218" executionId="10b8811f-7277-4623-b007-cbb67d4c8e86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="447c9d9d-04ad-b43e-2339-91aebc980b80" executionId="cfd383ed-49c5-4a76-8467-f762b226a2e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd65365c-1e92-baa5-6a20-2e054dd0bd25" executionId="399c9714-fd1b-44d0-8dd4-a54f56aa346e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3c3cc11-7430-6a79-d6f3-fbaadb544f4d" executionId="8f0d4e40-6760-4d57-a50e-9f0fc6d07332" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd95884d-554e-cdf1-41c8-ccd0810572d1" executionId="31c3de8e-39d8-41ce-8511-58c68d30166b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb03a4ab-7106-908f-e881-63eb18d26e8b" executionId="4cab6a06-c115-4cf5-9c23-29b5257add91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5589b992-0f20-01f7-b368-8a893b2ed18f" executionId="09464458-550a-4d78-b60d-c483d616d789" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5f06068f-1770-94f8-d8c6-ee50be6e44c7" executionId="9cd40fc0-c978-4103-9550-65ee0e6612fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c31b6e8d-c4ef-bdfe-456d-1fd8c47b3052" executionId="882bc0b7-2ffe-4c1a-b9fa-ce79c591e81e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20c97ea1-bd73-b0d1-366d-989bcfa7c0ee" executionId="d10f5596-d8e9-4c68-b14f-ce2058f4a91a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="533709b0-4fa0-db25-761d-c9d716be4020" executionId="1f77ad33-f7ce-4aca-8733-cff97473fa04" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="edbd64bd-6ab2-df22-a276-71d903ed76d1" executionId="2bf84fb6-e283-4cbf-ae88-981cb6881472" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c58cfd62-f830-85c8-619a-72416deedc6e" executionId="dd2dd032-a546-4f1a-a54d-08c23e6afc35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d1d5719-faad-739f-bff7-efddbfe5dc87" executionId="fbe6739c-7b2e-46bc-ac0e-811f247b2611" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b1492953-5fbb-40d8-8c7f-5afc51e9c443" executionId="9bdc66a0-4a32-4681-8d7b-635bc58f44e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="629ba4d4-88f3-c31d-adeb-514489f4443f" executionId="7b8ce3d5-57c2-4bc9-82bd-fd2f47ea4dac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="afbb08c4-24ff-520d-d30f-7851e78cc1b7" executionId="93e2b8a8-ae1f-4d42-adb3-f838da8f84ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a86ae657-5203-7779-4ef1-7357b169da83" executionId="b6688077-33bc-4755-a034-a406edfc8120" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="03f4b3c2-e04e-f0fd-bec7-9ac5649d0e29" executionId="1aefb286-5a23-4ffa-b8ba-b104d59d9d9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4497132e-df18-a2e8-e05f-0a6d822b697f" executionId="a4a065d0-8ea1-4329-bee1-0f2eb7d9aa18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="75ff428a-fea7-7577-f7d1-94eace001dda" executionId="3ae4a3ce-9ead-4423-9d31-340e7b4ae942" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00f0223c-e7dc-cb22-ce1e-ef70a485e10b" executionId="4c132bfb-aa54-49e8-b87c-591dbefbc91e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7a64878-ae82-820e-78fb-33d1db187fa5" executionId="3373a7f6-14fb-47b6-9a12-74b620a11c38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e155a156-9f0d-933b-bb24-c33abf38350d" executionId="50aeb4a0-5fd6-4c37-b279-311a61389de3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="686b5f6b-d097-9a11-b341-74c90800697b" executionId="093cfb47-51fb-411b-95fb-631890cb4b50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0245461-cf9e-ce5c-f8eb-6950672ef88e" executionId="a8fa3514-f4c8-42ce-bf71-38fd6ef48b70" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b505519e-fb67-589f-12a8-06cb93dc97aa" executionId="864fdcfd-b3fc-4658-91c6-11c373a88182" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1ffae0ec-a1dc-a7a3-4d8b-74831db04084" executionId="90edd3a2-06fc-400e-9a01-bce29d67b1cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cfe1494b-fb96-2790-edee-1f5fbba221a0" executionId="9d4c8bc0-41dd-47bc-a9b1-a5ea1e84199b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5681949-3ea9-b54f-8cdc-7be0c2e82294" executionId="e0540a4a-e61f-4f2e-9179-46674bae8c3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0c49d54-8724-fbbc-2973-46d4f4c74365" executionId="20672e11-f569-448d-9a58-d2b4c8265b59" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b1fd74b-1736-ffbf-e2c1-d9c9c44fd793" executionId="72d0ee70-74a7-4778-884d-46548659c6dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce53d3ed-6960-e485-7f33-9e008be2529f" executionId="d13694c9-e7bb-4815-b45e-9bd72c2990c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e09f9885-cb5a-dd80-4334-fb1ffaf4e9d3" executionId="4627937a-d8df-4aad-bd81-b49b38e6bfa9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff653a13-4c4d-1e09-9276-a3c393d461ea" executionId="fbcf588d-a109-42ff-8ed1-6ac3781598b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa92dfd5-4824-4788-bcfb-b05bdc42d3bc" executionId="c51dd135-6878-4bd6-9dbc-ab03ae0058d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fad3e3fd-d405-0d7c-3d8c-dcfb02a8ad60" executionId="915a99ec-b601-4c02-ac74-86f3ed761a5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="39de103f-22dc-576e-a56e-d5c015c4d0fe" executionId="dd8c96c4-6a94-45a2-a4f5-ff0588467590" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d67c080-fb9e-136d-6b45-6bc86b37a6d5" executionId="9994f42c-9493-480a-9e56-24e267146161" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d21d2f5-8e0e-87b4-2d67-1c020421398e" executionId="3208660a-c44b-402e-90c2-e23264cfb35e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d082234-34d3-7aa8-55d7-95a514257496" executionId="bcef83d4-a164-4b41-929d-f1455b759e76" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="13494a85-1328-4d20-6b77-1403a1326ea9" executionId="9c5afd03-32c7-4481-9966-365a0c6e285b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93324b15-783b-cac6-fb63-a83c75f58e19" executionId="6ac71df2-ed4f-4795-a0e5-bb4f99c5ede5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84859c60-ec70-eec2-e99f-67d391c6855f" executionId="bc077e64-336f-46bb-9f30-3e383809de11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b3b9f0d-511b-be5b-7630-17d340c4f4e2" executionId="0b9bb4ac-5de2-4f39-9692-d5a2b9d502d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cdc0a299-a1c8-2e5d-2ebc-75349ae600ca" executionId="146d9e91-c6d8-4d11-a765-02846fdf41b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ff594cd-ccb5-c1ef-8954-c6ffb5c0119b" executionId="2915f2b6-6226-4fb2-a38d-eb0a50e3349a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="497cef6f-579c-1bf3-0fa5-d50bf3ca7e0c" executionId="6e6e02ba-30f8-46b5-b2bc-fcf0d37410e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad9c2372-6707-b6ce-f088-c38ed54c270b" executionId="9dd11e7c-3da0-4fa7-9ac7-56d66b790e5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a20db08-04d8-9527-6c96-f14befcf5229" executionId="8857ff96-6c6f-4ad6-b137-3f1e46262212" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28e086ea-2ba7-13cc-c33c-ecc9a6a067ed" executionId="a6e9c1a2-302b-4d25-8cc2-c870848e2534" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a34b5f8-197b-1f92-2ef2-6d6d19047ce5" executionId="f5695bd4-0603-4cb7-b946-5b5fbcffe56c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="631c2140-4303-6071-b086-1aab976e7e0c" executionId="bef7c669-c6fb-45e9-ad1d-c455f3d8136e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2318b3aa-21e9-d2bb-a4f3-94b811d9ee31" executionId="15dd60b9-d323-4690-b5d9-a834aa0cf0ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e720221f-c049-bc6e-53ae-b34e8d0ae508" executionId="0059e1f1-a8a0-4d1f-84ab-7e3a5cf5162e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="01de2011-0c45-9452-f95c-14cce36e0b4e" executionId="15f85d81-7700-4ad5-ac8d-1b22c3315493" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f6bfe163-d760-2ba6-029c-2189945bbaeb" executionId="0c750a87-8403-47da-8ba3-f9f6c228ff2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d7f85e0-6ead-53ce-12f9-82dbd5edd194" executionId="a1b845b9-30df-47d6-ad2e-c9d5fa2c63b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21931a12-7a0c-9c5c-2571-eb0ed2699943" executionId="09ee300d-c468-415b-93ff-65c26fbc4da2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3571e194-5a11-a702-1187-42be1d4cf4b9" executionId="08684fd5-22dd-4d98-83c7-282a177e050a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="62c282eb-67ed-4e35-2284-c84a21d048ac" executionId="fc208381-84f8-4222-a780-3bbac40d5a9d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8985e7ba-a059-6a70-c92d-1232161180ae" executionId="75b4c8a2-245a-4e93-aa98-b5a24affc6e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3639ade3-815f-f61c-2017-a23d58f6d9d6" executionId="8f147dc7-a2b5-441b-8c2b-19cc6b3adc7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9196b1fd-39c2-e39e-8fe5-f0a2bb6e6c75" executionId="cd8d353e-3f9e-4a26-b3ca-066867810db2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd4508a7-13eb-c4d2-afcc-466b81627086" executionId="9e374613-e821-473f-b816-3a9ab980a3e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad16889a-5d98-9d6d-a002-d16fe35c8efc" executionId="c025e8af-5719-4e47-954f-75fbdc6ab8c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="808bbdfd-d61e-030d-5b04-dd27798bbaa5" executionId="49cac8af-9e8a-4e44-9fbe-8f104b792d6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8d180e9-4b4f-36bf-3809-bb019b0b39a6" executionId="c8ca1057-7bc5-4b4d-a09f-e58a8b573633" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7594c26-374f-7ad3-515a-969233cd34f0" executionId="f42afc76-f0a8-4efa-8128-b137424ad89c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="558daf05-e73f-48c2-bace-86b66219b81a" executionId="9afc4ff8-771b-4415-ba86-b5c8caab3fef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad83d352-51ae-0aef-a1a3-faf6b7ded3e7" executionId="e154a9ef-08a5-49eb-8a53-3b61871fe3a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c04f593-7e16-5bce-f4d1-92f913acf854" executionId="d0985af4-09f8-4c95-866d-b24abdcfed22" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6befc529-ca26-b9b5-e5c8-a9820407398a" executionId="921a593a-e629-4781-b119-b4ac11dd60ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6817e04d-d2e6-0f35-235f-2320aff67c14" executionId="04527496-55a9-4a3b-9b57-335b0b626b49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fddb39e-7cb8-dd0b-4c0f-57eea1e5a8e4" executionId="a26fe6ad-c41e-43c3-b86d-5a32ebd677f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be50bc4f-1ce2-b2fe-9f86-2e0cb3dfa7bd" executionId="bdb51eb7-db9a-41b5-a4ae-f0df52fa82c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b9832d23-c2dc-e00a-0b9a-980a2b238730" executionId="df5bac3a-3a04-4725-9307-a13c42c425f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6de6128b-db30-f260-2b88-12d1ff74aa8b" executionId="36809bdb-ed2d-4f08-aea1-d3e12b5083ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47db66ac-428f-91ff-0471-2e7f85a848df" executionId="e8ed95e1-e63b-49d9-918c-ba9571787db9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d64ee590-96fc-4d9f-b828-c84b16ca01aa" executionId="11e1165f-072a-41da-b27d-8030eabe29df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6dbb92f9-cc1e-2f28-f914-5989efe552e0" executionId="801687d9-2f19-40fc-964c-0e6782153254" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c5e69ade-cbfc-7520-1a1d-3870e2da5cbf" executionId="84398b32-4fdb-4b5d-af81-196ab23ccaac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="935b8322-5ce0-4ab6-1dd6-3ee36f69e354" executionId="59eb4374-bbc4-4acf-b028-aa63b8b8498d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9da22bbd-e742-bfbd-cd8a-0588570a56ad" executionId="8b8496b7-4df0-474d-a36c-2243ffbbb411" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="410ecc31-2824-271a-f647-9921ee42a7ef" executionId="0e417f8c-f4fa-4096-8db2-966197bd2868" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c163347c-23a3-0cc4-733f-f8372db5eee3" executionId="97954925-5f6e-4c93-a1ff-e6b6d4877fca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7e26112-1445-780d-977e-4db3fb622f73" executionId="3dcfec1b-fb45-48c4-aaa2-4124b7831006" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d76dcdb-9eb6-88c4-ee8a-2eb9f6e7a5a1" executionId="46f80acc-7337-4510-a52b-407a84d71968" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1661a695-e3c4-b05a-c875-eefac70cc9c0" executionId="4c298df5-883e-4473-8263-6c28ae726855" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a558c60-aafd-1963-f6ee-9c422a5e2fe3" executionId="5688bbbb-b11a-49df-813c-f46bf118e6d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b68befab-7740-ade7-92a6-f4a82fa17fbc" executionId="6378b6f8-5d0b-40f4-a74b-e21b32249d9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e710482c-2a87-3819-9c22-bd8c01da4af0" executionId="e79a3c36-a1f2-40bb-8cba-7854b2f03c6d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a019126c-f5d4-536a-2f4c-0a668bd0c076" executionId="f83c2433-9835-4cf0-8de9-6b16a8d7b14f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a323416-0f86-ab8d-3b5b-f7aa16a25f2a" executionId="81d80770-813f-4646-b26d-fbfece8f3eb8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5eebf41a-5069-0435-ceaf-9f5504d707b4" executionId="574556ba-3308-4979-ae9b-bd89c292ee49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6747d5f2-c4db-bf89-281d-e801c4b8fed1" executionId="a7e10903-69df-4b89-a80a-14ae8238b3da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1fe8b1f6-c834-3bfb-130f-35b33ed96069" executionId="e5da4f44-2ab6-41d7-ab7a-0abed34df753" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92f5ca24-f275-d531-55d3-c3dc0a260389" executionId="7e3ca995-79c1-4179-a0a5-bff106acf99d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1e8b8b72-ac76-339b-2c1f-dfbf13883417" executionId="12826e6b-6a71-4d06-96c9-3698973d51fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3d09e92-247e-5bc4-4b49-18c7366a22d0" executionId="b13ad5c2-ba75-4cf9-95ad-ddd94497b565" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="484b5345-0195-1a44-c588-fb9e9daa6ad1" executionId="a30ed4fe-1375-4e7e-a977-e5e7067ef055" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18478b31-4299-6678-f1b3-0821f964db6c" executionId="9d0c6f29-3fa9-4ad6-913f-32af4ccad4be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3206e19c-f5dd-90f6-b732-4a2155f79c90" executionId="7802ff7c-cbb1-4a06-b923-7386e17d0863" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="deb2b0c4-b96d-d563-daed-a2980220493b" executionId="e324fe8e-b918-4c63-8ffe-256c8e52fe34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f918bfc7-11b6-163b-1685-4dc3bc3b669a" executionId="a2f90c0f-2c83-4adc-90bd-655ba1765006" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="524f1c05-395a-c632-0e3f-df5d09042de5" executionId="646b839b-2842-4eaa-bc10-81b2fe4dfd5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="718f286e-633a-cfe6-3b5c-f3100dc84e00" executionId="987264ef-9383-400e-9332-fbec647ced8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b77ced1f-6288-4e98-dfbf-04b1d0bd2e81" executionId="76e76b4c-9070-45df-ace8-d730ab10d9f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="feb9b883-8894-0bd9-586b-32dea8616aa4" executionId="97aacfae-268f-4aa3-8471-be135c3bf784" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6bdeeae-478f-56bb-3e2f-6931ff10fb54" executionId="d967f422-4726-4b06-9ab3-d4f2eef6464a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c26811b-3009-2a2a-9d58-4483777b94c2" executionId="6630be3d-a6fb-4062-9cee-77309772e303" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="81e0c18e-4772-6fa1-d47f-787fdf9bb13c" executionId="21732380-b04b-4b82-b9a7-198cf1bacd79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b0a9a6a-23f0-cc40-565a-c3fa7fc2145c" executionId="12cf1e6a-6ecb-4727-8ec1-a41b697e68ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1f4210ec-0655-28e9-2ccb-ff891b7ba0c4" executionId="8c4c362a-d1ea-45f3-91b0-1f0171de0ee7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe99808d-55a0-15da-f6cb-a89579618d0d" executionId="21c79b59-0f8c-4032-8600-f1a0d3e6050b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e59820f-dadc-96cd-6dd0-8ad0886178f5" executionId="f1bae8ee-065c-49c0-bdba-d147d30a4dbf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="738e3811-8bf4-17da-c2d7-5b3cc6dbde1c" executionId="8a57ede6-a0c6-4e52-8e6e-47403b6f4cc2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7b2d3959-a6ad-2f9a-dbb0-dd04000e11f9" executionId="29fd4c76-b96e-4ae0-8e78-56cc1186b10b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf61f207-8abb-9a94-935c-7470f4818d92" executionId="935d5038-3844-4dd9-ac0c-3b50faae6a4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e6ec516-2c67-deda-43bb-0b0c7f8b171e" executionId="723378e6-497b-47fa-b693-796350998b1d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31400373-4ccd-22af-043e-d326a228e0aa" executionId="d20ad31d-c57c-4577-9714-dfb17e43091a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d0e94d6-ccac-0a2c-2a35-ede8fcd4dc4e" executionId="36c5da48-db42-4ab2-914f-6a24a5020b43" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00e4532e-f1be-f8d0-c15c-245adc25af88" executionId="4b8a8cde-5697-4bcf-b357-416bb367bf73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c19af90-d4a0-ec60-62ff-872c8eb068ee" executionId="9fd3ce18-efe1-4dba-ada0-cf0170f9376e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="648d8e17-b4c1-2838-47af-2f90467efb06" executionId="6ea94625-b988-4d66-a512-85d275988ac9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4dbc117-c8e6-7d96-77db-415f65570986" executionId="78187df4-5cb4-4b90-88bf-8010727e63a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="060891f8-85fe-6c11-4a73-fb35cb109d02" executionId="02cea13d-ca16-48bc-92a0-5a36db97b428" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52d58993-1316-a887-21f0-88a6a979dfd2" executionId="fd832528-7aac-47b3-ada8-38523cd75fe2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d55faab1-276f-4e1d-b0be-c8c5b2867f94" executionId="459bc0bc-20e8-4ee4-8987-637e1bfd1f98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69fb1b2d-2706-0896-e620-e99330f6f0f1" executionId="05f73e4b-e3da-4c27-b161-39b8463dc564" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d9fe3c5-5f16-de4e-4b4f-629823d3f7bd" executionId="adf7a294-9e5f-4e8c-98f7-17f701294cee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae886758-9c66-3994-3702-dc0c66a63964" executionId="ecea5b1a-ea14-48e3-9cd2-dd2b399948a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96626b2c-b322-f72d-8351-42b78f38ad94" executionId="01d8f99a-023b-432f-92d4-eacfc6785d05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe7fb41d-0ead-0f02-41e3-e3cfca24d4af" executionId="bc5dc1a1-472a-4fe5-b2d9-08b3eedfba6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cce1209d-3f75-2835-b76c-ccd0a1b909e2" executionId="bd115a68-e635-4806-b599-0b65da2e6b31" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5095ff7a-f563-0c42-25a7-ef992dc11ded" executionId="b98540b3-fcf7-4ee2-8a77-4c9c3309dbff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3665f86a-769e-2533-a14f-841ef38bfe38" executionId="7affac04-282a-426f-ab8c-308d1f01efab" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58e81949-d3a9-f68b-aaf9-7a88843f92f0" executionId="5b00d56c-55e6-4ef6-a962-f36d9d89ece8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="feee4bbe-9ea0-c5bd-0dac-1d53be8df868" executionId="fe78eda8-55f0-4c5f-b113-eb6cd3faa697" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cb9e03b-1235-b522-f94b-0eb8b3870c50" executionId="5cd4e470-8df8-467b-ac4b-4b041c7ea4d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8548820-f426-7b72-e979-00f72be49ac8" executionId="725b05ca-8c1d-4e69-8378-e70e61fb4be6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="07409993-2127-76d8-31f1-28d42bdd87d1" executionId="a430ad9a-f635-439f-b182-eca644b0a38f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca131384-82f6-83e4-2d9f-80361024a31e" executionId="e8cc8005-e919-46ad-a23e-0fb9dc6e6ed1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fdde1ca8-5a4e-1fb8-4037-ad6ae3e468ae" executionId="c8b3ea35-1a25-4d0e-bfa8-f5cda67582c2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52365f11-aee8-65de-521b-619c832f24f1" executionId="a476bb4b-b7ea-4fa8-be18-d67ef7ba9fb7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3189fe3-b3ff-36cd-e2ca-dc0c6f0d4877" executionId="fcbd5cd3-c807-4034-8357-1878782b208b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="478427fa-8669-c6b5-9fa7-131a94eeb6c4" executionId="91b8b3ff-8f7b-429f-a72b-d33f43f2448e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e7eb20d-1f0d-9f21-c16e-02c3b96cec72" executionId="87025f54-8f33-4e87-a002-83b1e4b17f4d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4696a263-84dc-7433-49a8-0cd38fb89ab0" executionId="1271da8c-b0e8-4ef1-a157-d83b8bee2154" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="55254d55-c622-2d8a-0267-89f25597a3a4" executionId="15314063-1e36-4eb6-b56b-0d9a1ceaf22a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba06cdea-5c7a-119e-f0de-7a2bb9091453" executionId="6d8f5547-131e-4d22-9a35-e400dfd3cd85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="919517a3-ee43-df33-14bc-fc439f5b5116" executionId="3ed85fc0-4241-43a6-9ae0-360d9a3db85a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dcea306f-cb59-43d5-ea22-c0cee42ec856" executionId="7bbef49f-929d-4f93-8e5c-0787a20025c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="177c5f76-37bf-cb2c-583f-1f14061d01de" executionId="d2b92d64-a9b9-4113-ba5f-1702d26a8716" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d7c1e9c-d2f4-714b-2d7b-fc952edb9fb7" executionId="8a759343-f725-43a0-8b7d-966e4e0e2c85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff3d4922-a5c8-deec-6e77-32801f5985c1" executionId="2b26058c-411d-474d-83eb-66197e143093" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="223186f7-4a40-43ff-9c08-2f534aa4ba65" executionId="f9ec047e-6a54-4e92-ac90-a4c67c9cb9fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e00025bd-b1ac-835f-21e8-b8051b382760" executionId="3574b1e4-b300-4038-a756-4591a638de1d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b3e756d-f874-e5b2-3a94-363ffa3ec292" executionId="ff0927e1-adc3-4dd9-8624-378182935320" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9300cddc-7b3b-7071-dda7-b90012537978" executionId="9dafc772-08b9-4111-b1ed-020f124d9bb8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd799f24-7265-4182-8a14-9cdf49796b23" executionId="4a4c6d70-30c8-4b0a-8784-bb9f22133962" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd569cf0-fc44-80ac-d268-06d64d833448" executionId="0d3298c9-b403-4abd-9da5-51fc9b971381" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7175c2fb-66be-cf87-906e-cf3edeb4343d" executionId="53511e2b-5a94-4f7e-ac02-d127b9c03679" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f711b18-b6b1-4833-3ef9-805c26688df2" executionId="14718b6b-d515-4c7f-b410-a98979b9e511" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="14335f76-3166-4157-be6d-2e5e154aeda9" executionId="082c4505-4252-48dc-8f5e-d3d58a439bff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4f67e27-a125-4cae-1179-a70efc26c409" executionId="05a80928-7be1-43f6-aace-49c1ef961b4c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83bf5aaa-2d46-3b5f-d348-d63267b1adfb" executionId="33144cc7-7e50-4e55-aaf6-c3240d82b4ed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9467ac43-e3e1-879b-f5e5-0013b3269997" executionId="53fb387e-2a25-492b-933c-bc96b2ffaf7a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b2f67c3-dad5-943c-db20-750c00ec3f10" executionId="fb79ac34-d109-433d-a910-cdb0147fc5cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3228ca39-d7f6-df03-7bda-7947f9751218" executionId="a7409e63-c5fe-456b-9518-faf7482251d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d46b3e85-a761-1f0c-9fe7-25a9f39fd348" executionId="3ef6ee56-9d54-4be5-b9f9-8204acf2bb56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="347ec476-ec39-285b-043c-b037f89ef0ad" executionId="8f03ad6d-7c47-4af8-8bc7-89191865cad8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1603bd7b-a340-8d92-43dd-0ab95232aca1" executionId="802eb2d7-648f-4178-a00b-bfa7f704332a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a87e595-dad6-03a6-7231-c9602203b8c9" executionId="4aa2cae3-f028-46d4-b88f-9ce57be29bb8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="caae96bf-473e-7bb8-9a74-f357e8f1f5d3" executionId="f2eb362b-2375-4c12-a97f-742658872a9b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c024474-4833-b78f-f0a1-611d0597d295" executionId="d7faabc0-b09d-4eca-a16e-da0cac438d7c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3195319b-151c-4203-cd8e-17304e583e95" executionId="d2301042-e8f7-439b-890c-de6c6378eae1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86dd5656-1779-5c6e-8031-6bbe3d5fba49" executionId="097138aa-75a0-457b-a154-3bf703a504b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0aefbfc-2fdb-bca5-a92a-3b5e16315d37" executionId="2bc4cbf8-4b1f-4d49-9686-0c36cbff7d48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="abde3b24-a138-e11f-ff2a-f048d722f45b" executionId="b9e5815c-6a5e-4161-8622-d0d4b1ee6487" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8926aa7d-14c3-3602-dc95-b631b7d5ee27" executionId="120cad20-1b90-418c-b53c-c3f2e5273f4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="210ff133-d9cc-0e93-fb06-886f5f977654" executionId="0f88e85a-d861-48de-8548-51353fd10cea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90cfe239-73f1-f00a-fe24-1690903626bb" executionId="1b4d81f6-270b-49e3-b60a-8063abfe45cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="664b851f-009f-fda5-d4f6-9e2acd3460e0" executionId="c88748da-236e-426f-bc6d-cc8d4543e45c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f37d230-6296-612d-363f-3ba2d6785e2d" executionId="0f64e056-8eaf-4a08-80a0-bc3beaa3126e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3cd110b0-491f-78df-9610-2e1de51d5588" executionId="1e763304-f2cc-464e-b148-a4e7bda80254" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1b11ad31-fde4-1222-2dc1-e2416a02527f" executionId="f2a4b8e4-bfdd-4dd2-8df6-a5d2ad5b2c93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="71eabc56-c4b7-cb7e-d6c4-5661ed313124" executionId="0bd3b649-f55a-4e4e-8a4f-fdcae33092ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0bad7e1-ea2f-6014-0166-ebb22c995597" executionId="52c76772-248d-441f-aaf4-e354ae180965" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cec5191-2f53-9d65-b339-02e794bb814e" executionId="74b709b4-494e-4f98-921a-315c111eabf8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea0276c7-890d-a80f-8e5d-82723522592c" executionId="c8b4ec9e-9806-433f-b119-d0a2867edeb6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e1bc35b-995b-adfc-b288-93e3d0e2ea47" executionId="7aebc797-a86b-4aba-9d53-4a576ff62b6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b49317e-f629-5196-f117-429a98c3e1d1" executionId="66c09eae-8730-4136-8ba3-c8765d078759" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68c60298-6dac-6ae5-4e97-e234c732dbda" executionId="a7c3429b-445b-4d76-88df-0d7b0a0374b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb44f292-5787-9552-1e2b-12e154c08460" executionId="a3146c99-0eb1-4617-a17d-4cc166b95195" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b1fa43b-9919-2bb1-47e5-b81001e3486e" executionId="88866a16-505e-4ffa-9409-138c86725f1b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbda1c55-2da6-8044-ec47-bdd6f7812fac" executionId="4ee9cf8a-7253-4907-ba5f-e1c22b4059ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e6731c1-f755-0423-e726-6129aa898c9d" executionId="1d874d2f-e94d-40ef-8b7e-ce3cf00980eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="337001e7-7cf8-13cb-a2ef-22a93b02ab66" executionId="920ec162-2023-4aa9-881f-240344d2d360" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1754211e-6071-fd9a-f5a1-578cf7ab8cee" executionId="99125a88-e1ae-4923-9d7d-92d5b199a840" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60c8935b-2e3c-e621-7459-1958f11e67e6" executionId="f864fee2-4e8b-4c41-bbcb-4815d8c3f5cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36504397-6d0d-3518-732f-84835bf4c0b8" executionId="76c52781-33f5-42cc-a56d-ad9b6d38d69b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0b2bcae-4dc7-5018-19cc-990e79f815f7" executionId="a17bf099-effb-4c4a-95a8-046f29779f46" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0fd621c-4da8-4baf-dd99-1aea8a1398b3" executionId="3c372a30-9ae0-49dc-ae08-6e4f654efefb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6ce8e98-9f9a-40b2-b6b2-4d9957d96401" executionId="737a7623-142b-4886-bf7d-df21a8ad3378" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="69140cf6-b12f-82de-93e7-f78e85c1bf76" executionId="0c6796d2-fbaa-4502-b041-a4e1bb44efeb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e19972f0-84af-4f45-5cb3-5671c5b223ad" executionId="7930c278-29fb-47df-ac67-5b06b3e406ca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b90b552e-26fd-1e35-f96c-d7f905cb8a53" executionId="e71c1dfe-2705-45ba-96d7-9f14637821b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33513528-6bdb-f9eb-62fa-871637ab4407" executionId="eebb59e2-185e-438a-951c-313d1b0fc68b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd8ce32f-f88c-e8c4-f71c-d67c3aa116d3" executionId="00a83ca0-88dc-41aa-a73a-741ca9952570" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51a412c0-5f46-9eb3-fa2f-2061ec4cdbae" executionId="3d39a08d-28c6-4851-aa3d-48ac2bb4178c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84120cc5-5c8d-3d98-2fe4-459894241e70" executionId="f051533b-79bc-4d33-81ff-588fa6bd6ce1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dcd1422b-84e8-7c60-4422-d64816df66a9" executionId="258a9575-4bfb-4ce8-9c97-4d1ad7712c2a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7051f829-9e0a-1b72-f8a9-6f40e76e6400" executionId="bbe343ac-bad2-4c76-8d42-abf458acefe7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d15151d-171c-433f-dc07-059ee5aac532" executionId="60a32053-7bec-4dc8-a42f-0dfccf8fa41a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9e3c042a-3a90-ee8c-eada-b894b45bb9b3" executionId="1a009dc5-5f94-45d6-8e7f-31a85503ca15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1cdd2bf-0204-c315-7de7-a755f815f9c3" executionId="454503ed-a309-4869-9350-fdfe19ad1bce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34961ea7-162c-5f1a-0422-c325d3516ddc" executionId="a5464380-1b8d-4c6b-a2ac-04ec6ca1a538" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22c1ca95-7281-7892-4c74-f6a6e33bb828" executionId="8f3ad5c8-28a5-418c-8d84-28e66cb750e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0b0d90a3-f911-727b-bb6c-a616ca206b70" executionId="8394525f-876d-4791-9a1e-f2138d3aaae7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="338fdded-f693-fdc1-cd5a-dd3fd86d059d" executionId="dc8056f4-c767-41ad-beac-ba12285ad218" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0d443d03-f3e9-544d-e7ff-742d77f69748" executionId="ea1d3f54-3780-4819-ad4a-4e3d7af97585" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dca52caf-f7af-cf9d-012d-d4287aeccac9" executionId="d0750c7b-79aa-4744-a618-999ab3ae9fe4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1201572e-ade3-125a-549e-97ed61b623ce" executionId="6851e905-6f00-4e08-a056-a3cd8373e699" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba8a1de4-78b2-c265-827f-ff0f9203b099" executionId="4b41b84a-4fe4-48c2-b7a4-7b27cda1afba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d870c43f-5efb-5680-7ac1-06a3e4a199e1" executionId="6ac536b5-b59e-431f-a74c-27fcb185a280" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="88b5cbc4-8fe5-08f7-7ce9-297f40b5cb60" executionId="afeeeb2c-f742-4151-a322-aec3743ca770" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff946a47-a680-c36f-e812-0eb2b3f3a020" executionId="0de859d5-4bb1-49d9-b1bb-b566d0ccb838" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a665167-a7ba-6003-5af0-e7318f8ddd7a" executionId="0afad8d3-981e-4e30-b8d4-803b76604964" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ebaf7d3f-4c5c-80f3-2378-e249c404426d" executionId="5de6da15-a1e2-4092-9bee-55b72d04bf9a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fbefc20a-fabf-2034-dc82-563bba9c5a38" executionId="b4a4fdda-7438-4eaa-b97f-eb7e6781a7e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="298b8ff6-7b1d-afae-44e7-3bc96f574aed" executionId="581cce38-cf03-4bdb-a693-c090b310d350" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2118aba4-b361-426b-bedb-883490cf8462" executionId="62340b62-ddc3-4c59-81de-57e50b5b7e4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e2d8b9c0-7e3b-490e-77a4-9bfc5c4a33f3" executionId="5ed90392-237f-4695-a0ec-99d89bd7794f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d939777f-90e3-6a2b-692c-bbdabe037a2c" executionId="4efa7f80-ce58-4f60-ace2-5301d7ce1119" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca81e23f-4b10-013e-4c1c-ca51d2d61e52" executionId="4528aba9-0200-4f37-8918-87f2dccf5faa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de64c332-bc71-9d34-4186-84fd6e761f17" executionId="9b2b5d8a-5de1-4ea3-8572-b0823773f000" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b7f744e2-4460-5a29-41eb-317872412275" executionId="dc5f0490-6bc7-4b55-8cc8-525c2ca26331" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1eebcde7-938a-d08f-ccd2-ac59dde74284" executionId="7a937272-8bb1-44cb-b6bd-ad2afbb7eac9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e6b0ecef-21fe-6463-9b4d-b9161063ea40" executionId="ea576596-6e11-4162-bb70-11825a3b3e60" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a473c7ef-9fe3-84a1-6a05-32c32190bf5e" executionId="1964a421-5e53-4827-9082-6bef80e6453d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="817201d5-538d-c277-4d81-8f1fdc4ae401" executionId="0972a8b4-1c72-4097-96d7-976bc0e2fb20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b21f0c6-8cfa-64f7-e793-967b87c310cd" executionId="9ffb33f6-a6d1-4e83-8402-c535b011ec04" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cee37f97-bb50-240f-7737-e77559985153" executionId="51cd516b-ca74-4d1e-95fb-cddb2138a377" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="85d26a70-67a8-c9b3-a3c1-b0cb8b77ff44" executionId="6ab49963-a66c-4b8a-bb29-c0f6a50dfac6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b03325a-d3cc-48a3-8d04-204e3075844b" executionId="09e88732-1396-474e-a586-835db72ff60a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee0f9233-92a2-e055-1512-08d4ca5197b9" executionId="cc623c90-d63f-413c-a0c3-d62166f78ee2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="287661b4-44d3-57df-3bcc-bb53d4328cfb" executionId="da770ceb-5bdc-43ec-a91e-c1cbffef1d8e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f2734ae-1576-987c-d71a-5235b2f99444" executionId="3c408cdd-78ca-418a-8b6e-bd6aed156eb2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8dec5d6d-6bf1-1f24-6b9a-267ed757f0ae" executionId="01b101e4-6dc5-4e50-adcb-febd62e08145" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="796860d2-6009-f817-20bc-a605880d865a" executionId="942cdf25-c14e-4e11-a15b-7612f472c9eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad2f12b0-adfc-9e54-6c19-965cb7813b78" executionId="7e941679-6dde-4452-a1d7-eaebe9f25ebe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4df72243-87d1-263e-20f3-bd5c315bc93e" executionId="27298cd3-37a3-426a-b600-c9c25d00c464" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="029b3bd6-157d-b5c2-6bee-b24b5ef82a38" executionId="ff7f29a3-96f5-46bd-aa56-1d08db54913b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f62af25d-628e-4ab3-3d02-dc09b355b702" executionId="a8f1d933-cbd4-406d-be77-8f46b717f578" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="afd82792-cad8-3d17-fcde-ff9313817a4f" executionId="2ed6aefe-cf27-4df6-9aa6-7287bce17503" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b692484-1227-b348-95bd-e59796d9e7eb" executionId="f7f15015-e4f5-47e0-9ae3-9727a9695273" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06927e24-8553-b38d-2a9f-c93d0f91052b" executionId="8c0b59c6-7dfb-4460-93f9-dc9ba6706a98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fa0664c-72aa-3768-312d-27aafd3319dd" executionId="94b8257e-ae51-4a4f-92d8-b02c82b8ef26" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9a20186-dbd7-ba1a-e555-304aae1e99e9" executionId="f2af301a-fef3-4e4c-8c95-151e407d351f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4463e7c1-ae74-f38e-8e47-ff7d1b082a16" executionId="80db9bdb-bbcf-4387-8ab5-968c6a9df7b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="848e31fc-460e-748d-b4df-e721579fa1c0" executionId="55cb60d6-c357-4686-8207-e7884deed58e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fd8e3b2-9660-662b-ecbb-c22f45608ea3" executionId="78cf3c1f-ca36-4bd0-9dfe-248131447fa3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49a2db0c-2000-b336-6b8d-4c1068b334ba" executionId="e80bf378-0c99-42af-8f69-7468e065614c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="813cb6ee-da34-913d-76e9-3657fd89c030" executionId="5a0bf850-03c9-43a2-a3de-fa834daa54d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04bc0b3e-290c-e8c6-08a9-2ea12bb1b1db" executionId="1e9c85dc-83b1-4749-a874-713eec5c4e6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc4fc128-8931-b024-d815-bf9ea257740e" executionId="6a05c38d-32b8-49ce-9cc8-4c598bed1e4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f90557c3-591e-a64e-85d0-a41008f26e8b" executionId="4db1c8ae-d7a2-4cde-aef1-d1618fcdd37c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d8481b6-f221-7d79-7288-d444986416bd" executionId="6782370b-00b8-416a-89c6-97b6857ce7d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff98d5aa-43d1-be6d-3634-0981f89e52ef" executionId="0595a9b6-c3a9-4f38-9884-40a7c2d9bbdf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="119c0cf8-29af-95cc-fde9-a0c838229e36" executionId="ab627786-99d1-4ecc-ab28-6bf98b875e1b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cdc6410-dad9-e174-746d-f4f5ae17bc42" executionId="4b445449-c7f9-4ccb-8b23-b0964b2d405b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fcf1b20d-df6f-a0af-be8a-1fd84c3700e3" executionId="a6bdb01c-99cb-4c5a-99a9-070dde4487dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9075e55-a1ab-e51e-c458-544f4f0f0989" executionId="d18e4779-400e-4dd3-a3b6-3456ba3ad7f0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e76b3250-5961-6e43-c59b-57074f2ffb0a" executionId="99472725-b2b6-4356-ab7e-ae17efa4ed4e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6cb16d50-8458-d87e-f91b-ebc6c103b101" executionId="96d06470-3da5-462a-93e3-a103e3899ad0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1fb5e3a9-3415-a192-b8b2-479c50f545e9" executionId="ee9f2e0b-58c5-4ca6-8bd7-eaeb2c953162" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e1dcc21-49bc-d12b-cc1e-28e29b871df2" executionId="494b14ff-a82d-4719-a7aa-c63e9b63b9ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2dcf9206-a39c-023c-1b91-8deb234ca9ac" executionId="c50246f8-d522-4c1a-962b-9b3376b86763" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef400665-66d4-f249-bbb0-23a205302735" executionId="7c191b51-2f91-45d1-a688-a7d450ef6b79" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40c5b490-af60-905a-2862-d626f4fa4049" executionId="30bf9ee7-1612-4904-b943-9c06e90afde5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3075606a-2651-8a19-6c37-84b9048ca11b" executionId="8e1ad693-306c-4579-833a-050565898cda" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="740ed921-7857-935c-7a59-679c8d5a1f2a" executionId="195e28e2-bf75-44b7-9ce7-a4485a402626" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5c45084-ace7-5d46-b742-306047088c1d" executionId="875fa101-344e-4261-b15b-3049a4df1604" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42d36bf5-4d15-8675-d808-68fa800b87bc" executionId="b6fc24a1-236f-4d89-9257-d2cce2a6cf96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="757fe415-4fa0-4784-3598-b2597cdf6a55" executionId="222abfc0-7d2e-4ef8-ab67-a912d5c70581" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a254eb0c-c7fa-060b-09e7-121c7d52b332" executionId="a28993a1-3209-43cf-a1d5-5f146a7112c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99e7c4e0-cdc4-36c5-f1d8-03fe30c98242" executionId="fffbd2c1-48d7-43ce-8a42-57c3e245a842" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c2f6689-e44b-8d7c-5ab0-a4af8b28a111" executionId="c2c46699-ae5e-49c9-8f2e-e2144ec7a28c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4a0de354-8867-0982-ba36-ec5aef98e532" executionId="60650067-a94b-4893-b198-187df622256b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9a84eb9-0814-30a0-baf2-2618094b6ac6" executionId="9c18141e-bd20-4110-891c-5b67779b98fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee6d3f10-ea5d-353a-7895-33eb774d68d2" executionId="12749515-5bcd-49fd-8bf1-7bb7cefcf7da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45d658bd-f3ef-758f-ccea-de7d58e6ad58" executionId="c746be7e-a6dc-41a0-b719-125d160749c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0cd9556-4025-93d1-a19c-7805f9c5be2a" executionId="683c57f3-a882-4d79-8841-b4ff9cde867c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96a328c5-6282-d0c0-3358-2259dd9644cd" executionId="7bef2f90-caa9-4830-b089-98c70ddcea77" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0bbd89e4-3a5b-dc97-977e-06217f4102b5" executionId="d5c55b1f-3ebe-4e29-b185-8ae0f9614dfe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="733d5aee-e5e0-2236-47f9-958f554d3f33" executionId="5ed262d8-1d2e-4e2f-b6aa-76d626968c58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80714c7e-aac0-a368-da4d-a024c5ace8f2" executionId="1f164ce3-165d-4560-89f0-c374c3562166" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2232975d-655f-5684-2057-06724adffb2c" executionId="14d0f600-eee3-44e3-9075-4eb9ee74ef0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c83830c-a6e1-edd1-dc18-eba69e6e4288" executionId="f50ec3f6-9321-4b9b-bee2-357888ee8322" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="518e298e-2f3b-953e-8194-f9e2796cb5fa" executionId="d2c1c920-10b1-437f-919e-788720d2ffd6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1fa64a88-170f-e7ed-e766-2f9ac0e045ac" executionId="65e3e65c-fb9a-42dd-baa2-0edf9ff5f2f8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7844bc50-0d77-bd07-3f9e-b23472f38903" executionId="4fe6703f-8316-4494-90f3-50b787ea5cf2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67a37f55-fa59-3d1f-8feb-211b7981c57b" executionId="107e4e4d-6ae0-441f-95d0-31aca3d68673" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74efdc0c-ce87-06ae-a8f4-a1548b4fe6af" executionId="fc6e69c3-5434-426a-ab82-0241c4fee665" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b88132be-c46a-97a5-4553-eba1c75b090f" executionId="8ba376ce-9b72-4b9d-b73f-0c5ea88eba19" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1f1bcc4-50f1-66fc-885d-98faf6bef61d" executionId="9903b274-08b3-4623-8311-c5b670f4ff08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c63e4c32-042f-a1dc-2b21-77918123cea6" executionId="22d7f62b-96de-4004-80ab-efd931ecb735" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd1510dd-8416-2029-508f-cc9097a6f7e0" executionId="20e78a82-f0a7-413f-a221-bf248d521116" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac802864-65fc-0a68-c43f-1a3bdfcecf1c" executionId="b520c932-d2a3-4ddb-a9be-017d4845466f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1fd9d5b6-176a-c980-37a3-eab8b8aa5882" executionId="58f29789-1050-4d50-b46a-20a213452718" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa3456ff-71a1-75ae-acd4-91b534380251" executionId="01b8885f-9019-454c-bb57-5bdf4bf61348" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d309feda-4353-3107-0849-3bb5a4ba9150" executionId="37251bb5-d8dd-430a-8235-517aba801c0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d8a981a-dd3a-918c-ab34-4f02198962b0" executionId="65bdbe67-addf-462e-801c-16ac1b8a4f4d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34992958-035d-0d80-fa63-3ffcb7541fcf" executionId="521cbdf9-1bd9-4541-8e66-56ae0bf4c589" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9df928f9-66c7-ba59-6de1-2d1c042a311a" executionId="2271080f-052e-4c5a-a5b6-7aab6b770a8e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80974313-6fd8-a182-60cc-083767daa6a3" executionId="0490cc6b-bbb3-4dfe-b01c-2a3ceadbd386" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09f97e3b-0a2a-9c3c-4c6a-04d143a3ea08" executionId="2768a54c-335a-4c4e-9ef5-6324a5e22977" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8eba2de9-38c5-5bd4-25a7-ef326c22dada" executionId="2c89f9fa-f5b2-4d65-ad3e-5d906d36fa61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="562a7f45-d480-b9b0-c13d-dd55f0799d1f" executionId="010641dc-3f58-4372-b39a-2368aace0198" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="818de790-05ce-2719-2a07-4a7c15fe2872" executionId="f81b5b06-0d5a-4f9a-9191-ddf200998206" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="303299c1-3e94-ee22-a3be-78b710909305" executionId="58a60344-ad3a-4f3e-8ecd-e2db1842209a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="efb32894-dd94-6868-39f1-8586a0e0690d" executionId="ac3845e5-6aee-4323-9a6d-a9671ce41c47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7afdd8e5-1781-3fc2-086a-a21e44777dfd" executionId="f9b2cf01-2b24-4cbe-944c-87f789898de4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8c12b4d-0589-0e8a-5210-2283b97684bc" executionId="03f01fb7-07b4-44a4-94e2-ba196f9f7b97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7cecfa68-bb2f-4f10-4bd2-d7ea0d66de53" executionId="f5a91a1c-010c-49ad-b7e5-13c37a7745f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a6e5096-eb3e-e88c-c25b-4b74a56f6acc" executionId="651b676d-f9df-4972-9f4a-29681df76b96" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9d4550af-8126-3e8b-7f27-9049f4b76998" executionId="2756e60e-49f9-446f-989b-47fad1af205c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5cae8636-fea7-0c20-c103-e25398002aa9" executionId="123667c5-bacd-4cb1-96bd-fc41dc51afde" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="658933ec-f275-97b7-4599-cc8e60bbc74d" executionId="99e99709-06cd-45c3-8182-20a9249b8e30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66cc7fdd-3411-a566-73b4-70262ac55b45" executionId="65d32a24-7433-4601-bd69-351b211cab0d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ecd5d21-bf67-b085-c225-a09603de01c7" executionId="8ec78464-2ebb-430a-8a6c-c09f07dfc23a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33c00f43-3262-2298-a2e1-2c7504613afd" executionId="96241cb8-61cc-4ac3-bfe3-2da048fd27a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9920fee9-1e37-8e33-52bd-86415158ba28" executionId="3188bdd0-a0d7-4982-9181-f66082974fc0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5950339-2292-3277-1b1e-630be83f9390" executionId="f5497839-040a-4605-b050-df35f19c6da6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5d9d8932-9c03-4450-9f3a-19df60fee432" executionId="bb885986-d147-484a-bef1-4bfd34617fa8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4389b15a-0924-fb9a-9e09-b873bd0f4ba7" executionId="12c93bb4-38fc-4f3b-8c7d-a42483038fc8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93bf0a08-10eb-ab8d-ecf0-787e7d6afb59" executionId="963f34ae-4bb2-4d3b-ac70-550fe98db32a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7743a6e1-82ab-43a3-63b1-629e96ed1213" executionId="3ed71df4-2c3f-4f1b-b086-f5e83be9f771" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4141211a-72b4-90d6-fcbb-20b655acf361" executionId="893b3676-c26e-450c-befe-f488c931a772" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c3065909-acc0-2ca9-261f-2c7685da0332" executionId="4c7946f2-3214-4f16-b967-687c6f73b267" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92bfb0fe-bc6a-64ef-31e7-6a65e94d10ad" executionId="733c225e-72be-4100-a1da-c379ed656290" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e205d390-9a19-5469-e9ec-39da420a0010" executionId="5c488291-7b5d-4099-8494-65c176b4bc00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbe5848b-858a-dc48-9599-d1840c3561bb" executionId="03604819-5090-44b9-a371-a070fc24eca4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b523b50e-8698-5c12-b0c6-2cc0ef31be92" executionId="c026fa56-40b4-46b1-ba28-5bb3459ebbad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="db0a0964-8445-ac59-2ad7-9445a30b6ea6" executionId="fe760d91-ef48-49fb-a2ef-246729d2446e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e495a15-2781-b351-6770-c65a65d1aeec" executionId="b47fa244-a6ca-4552-9f6f-6663c918844e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41a9182b-cfa7-295e-890d-ead8fdd0909d" executionId="5a9c914a-0f54-43b1-b75d-d4b51e3f4c05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd4c8234-a00e-1673-e7af-5cfa37970a5b" executionId="12fad985-cf3c-4f20-a0b3-3aef55541869" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="97e33bdb-664e-3973-12fc-44e3769ceeb9" executionId="6fc83f52-d18f-4b46-a6ec-bb936814e07a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9f66b224-8063-cd61-38fc-dd22b542232c" executionId="9f8af17b-687f-4518-aad6-79a1e31d4479" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="771350c4-06ef-1c9d-255b-94f39f48dc95" executionId="4a346dfa-49f0-4bbd-90fc-ba0037c64e3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3ddecae-919e-aa4d-afca-85a53850dee2" executionId="f5ff3c4e-e229-4a7f-b69b-d3820008fe88" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c2ea3aa-92f7-670a-c279-640437104291" executionId="68605e09-ad19-4a8e-8c6f-1bca3553aa34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac022616-7910-d608-bf11-dfff5b70dcf4" executionId="4e2c628e-e3de-44ac-8d98-2e0d50a1d248" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="74029020-936a-421b-05d8-a9ab4650f8fb" executionId="1fc12e57-7b3c-4d9b-9c24-538d0ee72fa2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b5ccb48-5fb3-5879-36ce-e4c55aca03a6" executionId="7c58b3e3-1691-4d68-ad88-a25ade0d4585" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3aa47f83-56cb-cdbb-ca49-1d01eab95eda" executionId="5fb50567-87c1-4e67-aa2f-d12c1dbac6d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0dd03c53-0257-6c3a-adff-09e4926276e6" executionId="9780872f-924f-4cc9-aecd-8879c5a159f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58f19209-38c6-7645-e846-6a5abd05b6d4" executionId="bb91fad6-b0f2-43ff-b39a-03199ee659e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a54d5e03-e9fc-367f-3019-7dd7504431df" executionId="0fb8950a-d27d-4c3a-95a0-c0f0d561fd50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e975ee0f-9b31-8151-0819-5610232890e1" executionId="431e18ea-570e-4b64-9fc5-b8835d8bda8d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d622a621-682b-f9b1-0815-1efb9cf37394" executionId="a62fc394-ba85-4ada-95af-090fb0f53cb5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2048e002-4f91-0c5a-41f6-c60cf767b3c9" executionId="3cb892f7-7b1e-49b4-a2e2-d5e2fbe64ff6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dbd95e85-25ac-2cc6-dc53-f91afc9e624c" executionId="1e0b7b43-4bf6-48d3-91a0-2d64958722b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b4613be-1c29-e1b3-9335-2da174c05a72" executionId="62106046-15d8-4aa7-8954-fa265674e354" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c9e26f8-1b1f-bfe4-0f78-fe3e3aeecde9" executionId="9592ebd4-b414-412a-97e7-acacfbad647b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1179012f-4069-da18-82d8-cb10463d5da9" executionId="0b856f06-5fbb-40c7-bd1c-eaa0cb74f35d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="123186ad-e013-63a6-13fe-134c8b92d959" executionId="7ab5aa68-0d2e-4b0d-842d-2d065cc27edf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e9b2bb0-71b8-5a2f-1eee-b35afd47c369" executionId="263c1c6d-090d-4d00-bec2-51e46d715363" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68db5aeb-2825-697e-952a-09eb4429543e" executionId="0549d688-c972-461c-9df3-fc17b5a35842" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f479a5b0-4402-43b8-0ee6-39d5578e86eb" executionId="5e0006fc-fd69-4cbd-9197-5e782789d79f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fcf34d21-95d8-5bc8-1727-c3e33bc18148" executionId="f85887fa-c24a-41fc-b4be-5cc63d63d406" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2466ecf9-8a91-44db-ca41-1904b7852a0d" executionId="e06f52fb-c5c7-4882-be26-696ed987c059" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b5ce423e-745c-f906-eb0c-b427a00322c7" executionId="e4a7d820-80e0-4f2a-952a-45cfeb9efb2e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="367183c3-5560-cc55-05c7-fb404df4bfec" executionId="d37c0ac0-3c45-4e05-99ba-7d5930c2eb38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7864f3d-d148-bd6b-3614-c86b23f24958" executionId="8678fa57-3c58-4dcf-bf37-9741dbfe656d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68754f32-e623-3220-d135-c04ea4b0e9e6" executionId="a3c538c0-a06c-4f43-a4f6-3936fadfddd2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bdaef25b-58fc-de46-ba92-0d6f6ef804d9" executionId="e8072b1c-0483-406c-b40a-f425c9631ddc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17ea1787-6026-1555-c86a-2f5cf4308b7b" executionId="733ec44b-3ab3-43d4-8286-2ad9e5072946" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b0112e2-05f0-738e-f54d-bb04b512bb8f" executionId="33be172d-ff7b-45ef-9758-7912c8b5553a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b741a100-0e28-2f65-3426-ae70801da113" executionId="9d0034c6-5784-484c-a9ab-eaa714dda948" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3bf1fb73-95c1-ef7a-dbda-ac329b313cb3" executionId="d02c3cc6-a37b-4a72-b87c-a238b1d5a438" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5ea2d559-c45e-da14-9519-e9191f742ea7" executionId="7d5a8663-defe-46f1-82dc-f3659f0e83b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46dac1b1-26aa-f344-9429-03033a1e5592" executionId="45b6ed05-7b20-4172-9909-384cb7ad1001" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf9c3327-85e4-95a6-77a1-c0afeaa52df1" executionId="72343e18-c9f6-4185-9692-d4e720da21f7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd0cbef3-60f5-7467-9c5c-b2db3b410110" executionId="8377f5f5-a6d1-4180-8ef8-3a9ad766243c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20ac565f-992c-dba6-3104-9c7f63b8e0d8" executionId="4f3c84cb-dfcc-44ac-b697-25aae8ce1d05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="273bbb1e-80ec-dde3-e509-88dec84dc4a3" executionId="eaff1da4-52c8-495f-a258-20e13786152e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6571c244-89a9-25f5-73a9-ee5ef8357337" executionId="d8193b3f-abca-4326-a65e-479ad6ef1610" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b3831554-d598-a4f2-3772-3d9dfdd985fe" executionId="5767a285-6426-4fcd-9e4e-ffaf511c0650" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="23e08cf9-b55f-2415-7846-6bb4207843d4" executionId="a169c46d-de4b-4897-a47b-3e9545bcabb8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="70609528-b21b-f912-b1b0-55b4725d4b2b" executionId="2043bbe8-332a-4e94-9c0c-c5ad6371c843" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="818ddfea-b6fd-ae7e-49d8-717e8d7f1c25" executionId="993c0261-a592-4d94-aa83-991dce0c2143" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2ca7e36-f556-b616-f178-7d91e11de242" executionId="85dc592c-918b-44a1-acad-0e3406412975" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f088fd21-c378-83ea-f387-7c5ce49d58d9" executionId="ef7d51ee-ab55-4e1c-b6f9-4cab19964cc4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a57af381-d31b-855a-8c50-91e368b52e56" executionId="9b3c7140-749e-45ff-844a-02609d5d28a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04baf1e4-f02b-ac52-f21f-4f95c4501a8a" executionId="ee8aeea2-d72e-4b49-ad2a-540d97f7d664" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0596946-a296-ebb8-d566-7d0a00f3cfb4" executionId="e9373eab-3652-4eaa-899c-a0bbe13d489d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60c6d850-38d5-2bfd-6058-0f088f11d74d" executionId="70d9c996-cb9f-49ea-872c-6455088a28ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="705426a7-09bf-198a-a28f-796041c4f2e7" executionId="0d202966-c65b-4d5a-8cb0-f8b6d21e5ca1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51f75363-5b7d-1b10-4253-4371ccce0772" executionId="44129cf4-9710-4ae5-89d8-1667b7e95d0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="524c66cf-038f-ea37-c8f3-33c7ddc4b6cb" executionId="89bde090-a5fe-4aea-b392-9c4d18b98953" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b03bbbb9-582b-1504-0890-30fb2dd5e5c7" executionId="1e69c3d5-79aa-47dc-bcc6-41eb308632d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c24c56ff-17e4-db06-4d7b-8410ee4a29a7" executionId="aaa06042-e49c-4128-9e34-1dddd81d513c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6880c13-bebe-7218-388a-676aa7c699b7" executionId="b0142416-7ef1-4243-954e-5d20edf3c70c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3106dae9-acb9-b105-e6c4-ec89d20fa9f8" executionId="1a37d609-aad3-497c-90b7-ab23170c267a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea6e4f77-47d6-6843-79ac-3e2400d301e0" executionId="164afc01-94b0-4d25-92b5-bdd521016b3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46296023-0852-5426-aef8-97e05a13defc" executionId="ac4cdf92-3d81-4915-948c-e55154266b4c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba9a1d4c-decb-ceef-7cff-54b211b2f02d" executionId="9ca293d5-216b-4420-b680-324e0ebc41af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2987fec6-cb02-fe93-77e1-bac00bd29d21" executionId="32a000b2-b41b-41b5-9367-73e24dec3e77" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="16958f2f-df54-f2e9-7500-3c37668c49a7" executionId="e8f4440c-0fbd-4934-9016-117b643dd2bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5ac1d91-1d4e-960e-6ac5-4e5aa862d654" executionId="8d548786-c3fd-4e43-b8b9-13f8ae164ecd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="59dab297-8ce3-a71b-ab66-0174b4e5293e" executionId="d94fb72c-46db-488f-b32a-5d866a211256" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9394ed31-8b15-d2f1-f029-ac09cc7b016d" executionId="ea90ce7e-9fd9-4180-b104-210847499b19" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a44eebad-ab3b-399f-b9d3-0a1c1c7c3b76" executionId="f9d4a2db-af94-48eb-a6ff-a22360fafcfb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e14df78d-fe05-0612-813c-f3688fb1a3cb" executionId="04d2acf1-4831-4d7b-91c2-fbff58061189" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5d0caa6-9800-0060-e3d4-c1bba4c468a1" executionId="72548e39-d084-4d7a-ad23-f44b32f2b004" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45df0e7f-c33f-1313-c316-5120c953ba74" executionId="0ab68356-be82-45e8-abc1-36ceef2c1b4d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4ef25b2b-2e99-327f-eb80-66326b1819ee" executionId="61d64e95-ead9-44e6-8c14-9678affd18e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="396eb263-a76e-d72e-fd91-d0d461fac5c2" executionId="6dc8b64e-79fd-4aa1-aa57-e53004946f57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="81756723-a83b-6e1c-1e5f-bc7e8d6cfd12" executionId="88b15b35-7cb3-4a22-bff6-721ebb07041c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bce120d-2bec-60a1-09a1-2035b6372cbe" executionId="75ade1a5-e971-484a-8204-3a83dad4d2ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0df20694-0b53-e534-cea1-17f10af0cfcb" executionId="b93dbdf7-1b18-4372-802b-124446c09925" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22e6e4f9-32bc-3a24-7e48-b77a674a31e7" executionId="eef80a79-968a-4d67-8315-8c379fe7074a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b8b40f8a-9c7b-e0be-643a-a16dceea0a0e" executionId="afa0d255-f757-4451-8152-ea7bab4c4174" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5de3a36-3090-91ac-4d70-52e329fb7093" executionId="5e9d6267-6111-45ce-936f-56e5daae0799" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0447742d-4953-a3af-8cb6-d02b94ac240b" executionId="b8f514cc-9cb0-4fb1-bbfa-b70ef9b9466e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5bf68542-134d-838f-f761-1b6cc9906892" executionId="93b20404-8426-4d42-a80f-01fff9f77027" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="212fe0f5-07bc-9e5a-3ed1-ee14d70a6a66" executionId="2a824989-5552-4e65-88fe-6b9e7db6dbce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9d05762-19ce-c3a9-04fb-f0917fd9072f" executionId="4ee0b3d4-c888-4258-8605-52aaaf81317a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e43f699-be4d-f805-34fa-0105a79e0a78" executionId="d127ce1a-1679-458b-881e-dc245c28cd18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d6e4961e-ad8f-465e-fcaa-caa95043a95a" executionId="b608c146-d386-49e7-9f0a-e9fc32b496d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b1c1741b-9959-0b02-6ead-bb9a6ba96dcd" executionId="ee7e17e1-9318-4c55-a707-725bd35e5a86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7dae86ea-4bc8-e516-895e-61d82871e56c" executionId="20514737-6953-46ac-8f16-c75bf99100d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50513a01-dca4-496a-1387-c153dbf42c75" executionId="eed69c0a-8635-4615-8a1f-c2cb4b566fde" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9de4501-162f-abe6-8c93-0fdb68ccf3d3" executionId="61614085-57ba-4c71-aa79-58043a95f6bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6382c322-0847-81f0-53ea-f15e2bd331cf" executionId="84d7de02-dafd-43ee-9dfe-18f2b04e2d52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05679bb8-fac3-c62d-b0a7-68b65d4cad03" executionId="d325f5ff-fc97-4d98-82ec-ac53b038d392" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3588e43-360c-68cf-5f19-b06e3eabc28a" executionId="72b13b5a-51e9-456c-84be-86d22248ac2d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c383821-751d-3537-0fca-97f694f420b9" executionId="f5980f19-9c7c-4712-90f8-3779122a9c4e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="50592609-d81f-a345-f819-7592ec4a8571" executionId="cc71eed9-df01-4d89-9b04-1d6839bc62eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c441b6ec-e1a5-936d-9213-224888b4ccdb" executionId="5fac3e74-af55-430d-b123-186d1ad25679" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51d13575-9bc8-115a-e490-9d5eba1bc218" executionId="22d40885-3d01-49fc-969d-f2a87d8ecac9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc93e3e6-0e3e-dd37-b8fb-0abcde8862cd" executionId="d9a654ea-9478-4804-a62d-5d8e627c0f31" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7efa1121-70c3-5747-2a41-66c2ad8ebaec" executionId="6abcbdec-f028-4808-97cd-2af8ffbe55a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0237648c-8aff-cb22-c0bc-326f372b1479" executionId="f03dd441-aad5-4d96-973a-4dd881385201" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9804433f-d6ca-065f-ed44-a5e3561903cb" executionId="2ee5534e-deee-44bc-80fb-7c2efeb53958" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5924068f-58be-b2d9-cec9-ae9781b959ea" executionId="426302c6-913f-4168-bc00-eafb099473a6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="acdf70b8-acf9-91ec-b576-e125c6a8c896" executionId="75fae315-9830-4cee-bded-36c19ef2da3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e64db02b-5a15-d2d9-6d10-9671add68dfa" executionId="9e559713-8d5c-4c5f-9924-0cc3bffc7f55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e297006-2438-761c-f854-2a1dd672959a" executionId="59c30c6a-ca63-432d-8131-411071772dbb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7eab27a7-d754-5805-be4b-9d4732cfd4fb" executionId="9e9495f2-6632-4150-9616-afcd04fd538a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa270a5f-fb21-ef34-9da0-36673bfe6174" executionId="fa4ff922-f0e0-45f4-b58d-b7491ac0e884" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5db75e61-fc59-d8b6-bfbd-85c186270b15" executionId="89d80833-0cc3-44d3-b849-4b741cb8ba34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b518aae-b6a6-dd33-f348-4d3e79379785" executionId="a6463a67-e26e-4560-b09c-e42bcc9e560f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="80b61061-d617-e43e-8bf6-ffe6bf06d326" executionId="fef55031-6372-4ead-b3b7-7fe695683d5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28845338-d05a-883a-07ae-39bc693b4445" executionId="15eb5ea2-f6d0-4756-92e4-d5efad913cac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="442718cd-5ff5-607d-428a-430c5038ce07" executionId="97b7891c-fd47-4801-807d-551ba8d8ec06" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f242f8c-2c9d-6f92-9208-bf7f36464284" executionId="698cf687-2a19-4ffa-897e-ff003f33103a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c340976a-6bc1-14f5-d06e-05fec36cb01d" executionId="bd7d3e81-ac72-41f0-90eb-5c89dde795bf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a63ff25c-438d-506a-588d-92ddb71d6638" executionId="33fc88fe-b33b-4995-ae15-e026ce6ed822" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7822ca7b-bcf2-7d19-9513-b6cc69599626" executionId="f2f6deeb-fe3b-4974-b556-97797aad85de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="145518c5-3215-1a65-dde8-a0322b47f389" executionId="a314c88f-a2cf-4362-a411-9109f6c3ee58" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="937275e6-b5d7-2a11-6bcd-7c6eae6e906f" executionId="de014dfb-b567-494a-acd5-61d55a0287f7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cddbddc5-bec0-946b-c711-0e3a131cf15a" executionId="08053ad2-77b5-4840-b61e-f0b0db7cc5aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4786dc12-4493-b47f-ad7a-3e2886a07228" executionId="4dc0bd91-8f6d-459c-b4a5-a3038094beba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89d8160b-8267-60e2-bcd3-00a79fa80f22" executionId="bf1c4323-2852-4c90-a722-0576decdb6ef" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="816d92fd-2ac8-36cd-a0c6-6bea2f668719" executionId="7f8fbd70-d8c9-4e64-8312-809cd65bf92f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="510bd2bc-6dc3-d78a-bf42-131e83d26bf4" executionId="1c626f15-a5df-4ede-a123-4cb7fb0d5e3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c48481c9-9b00-fe71-05df-8da276d40ba5" executionId="6681045c-7743-4499-986a-d2a311ae3625" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ef71d298-26fd-5d0a-a981-7b1d1f2283e4" executionId="31fb0b30-553f-4031-b030-0c1f26fb010c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa5caaa2-3596-0f53-0c60-19a3bed0c36e" executionId="bd564128-279f-45fc-968d-beb528c4e8dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="559ae0c2-2866-688f-a4ff-d1d1bf6d7f22" executionId="0292a0e0-010b-4574-b7da-ab98c81ddd42" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b236b3c4-c438-c97c-b559-709c9483e369" executionId="1693f286-ffd5-4221-9f03-49111432e527" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe9823d2-bcfd-d5a8-d62a-2a736057bb90" executionId="1c25e6d4-18e4-4a3c-ae08-bd7f721e80b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c8fe4ad8-5f09-feb8-397a-460ee1c0ab56" executionId="1ec80867-1c98-4003-8ffe-4111e6bce26c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="12721ea3-8ebe-e8b0-4eaa-c7aaee8faad2" executionId="01bc6f19-165f-4999-898c-44ac74a73c46" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9581bbef-78a6-0640-a2c7-1475f6a7a794" executionId="65f37a05-986f-4c20-92dc-0ba42529aebb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c5849ff-ab44-bcf1-20a3-5a69ab45425f" executionId="0592bfc5-43db-4c6e-b82a-88229d25ab69" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c59b7e20-30f2-b4a5-e6ba-cfba888c7b5f" executionId="50d19067-a7fa-457e-ba1f-944a49fa859e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="672e5d9a-928f-d4c6-4f90-d5b7c4016a65" executionId="e065c29f-7565-4e5c-b985-e6f03cebd56c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="751da9bb-c7b8-9b19-0299-16512cdbfb9e" executionId="579d8844-e52a-4e6f-88ee-0d2a4f7fa5a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="815c3bc6-ac0b-ed1e-e8c3-6c3cdbfe91ae" executionId="7529d7b6-9b93-48da-92d7-25808fe46b34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0989ffaa-ef8b-96a8-9a7e-9dc26429e12e" executionId="89f74ac4-e998-407f-b1da-a453e5701a0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040bcf2f-c535-b023-73f2-b0f55c02adef" executionId="af9e9899-e4ae-49ed-adc2-bb3bd73fa305" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51af7735-a0e2-163a-f978-a7ebed888b56" executionId="018cd250-05e1-4a56-a7ac-46afff0a945b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b80e90c6-9437-86e4-2ef5-0954bf360175" executionId="8ddb9e3f-d3f0-43f6-9f39-373bef998ce3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb4fe3b2-092f-2096-1a0c-a5657d1219d1" executionId="f77b0084-1ca2-417c-8d95-2d75f4823993" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b596ac8-fe15-c204-3241-7fb730ef6bd6" executionId="4f272da7-115b-49c1-96c5-0175c6ef02b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40cb4b1c-9eca-d157-a4b1-5694df598862" executionId="fe6d7f23-302b-4f29-a3b9-c4fbd274c53f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd904112-f904-45ec-a7db-9620c4e6ad76" executionId="6a3fdf37-9544-4290-ac90-4f298f586d82" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="39dafa3c-1c6e-061d-629e-2cc22f7fb959" executionId="6a2945a9-4d66-48b2-88cd-a26a6e328a94" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca1e4578-312c-50dd-a774-caee50afbfec" executionId="aa6e412c-3ad1-4987-9206-4c2b980f3af1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7aa73f34-5ebc-ebfc-06cb-5f84f325747e" executionId="363ec0d4-234f-481a-a0bf-e65c5fee05eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c905a16-ae3f-9603-a68e-4f676ab21981" executionId="79cc50e8-8474-45dd-9960-bcef9918f5f7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa407d98-f7d0-6cf0-35d3-bb9bebdf537c" executionId="66061ad5-cfff-45d9-ab16-fd0ccd69f93a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5893a8d-327f-9b88-c743-c4a105bc0822" executionId="27925ac8-6f11-446a-a270-65c775c655c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0062f649-97e5-818b-179f-2265ea6a4f9d" executionId="08afc108-db5c-4c86-950e-82b44eb000b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="25cfc213-7b8f-3c38-a97e-346c977de46f" executionId="2dfb3298-bac8-4e61-b87f-aefddbb2fdec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05de673f-2a6c-1d8c-aab9-b38f4f71e81c" executionId="80107751-6880-45fd-8217-85f013f75c4e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="498a2102-0af4-93e9-4ac5-fea051d61b04" executionId="6b2fa6d6-0783-40eb-a779-3661de486534" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5027b8f0-3078-d394-0998-a0a7eaa40f62" executionId="58e18730-240d-4093-9cb9-1cbfdf308334" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc4f7fe1-7511-b5a7-8aab-d50dc0370ad4" executionId="3c8b0389-4f3e-48cf-91bb-f8af339f67bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc56bc5a-8fbb-7001-21d7-26f6a4666e46" executionId="9d1b91c4-ed95-45ee-b3ce-ec1e04042251" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2271c98-188c-59ba-4ac9-df20dab1ba92" executionId="2adef22b-10f7-4ef3-8327-2d514b1c56e0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="82da5cd2-ad35-a2d0-26f0-0a9d0c434c30" executionId="2652ec60-46e8-46e6-92e9-650e95a34b1e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce05186e-fee3-9111-d410-1f6ef219b626" executionId="eff86beb-af76-4136-81d1-52f3188dfe5f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cb47c782-4614-6e61-857c-400687cb5aac" executionId="ee7a5691-e89f-44f9-9e1b-7ca18b95f53c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7992398f-e1a2-c020-fe79-892a38ef7bce" executionId="b217bba1-c485-477f-a2a8-dd0a04ccb904" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c872a420-5917-534e-7061-800f623a734c" executionId="ea63d89a-4fdc-4fb9-900f-d8ddf9c79f63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8065815c-88fa-48b3-e8e2-62a578142b66" executionId="db794928-7588-4cc8-abaa-b175efb0f95d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56fe3143-9052-3d95-38d5-868cd5745e32" executionId="f8194dc1-683f-419b-b458-077be4b93bd8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec2e6245-9ae4-ce4d-f619-1b0db5655fb6" executionId="bf0dd895-b4c4-45f7-9d46-581c0fec813e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bef2d3f3-b340-bdb5-c754-1671ca328f9e" executionId="761c9a40-84d1-4bfd-8b85-d3a98858234d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c3c7d90-1e05-94f2-646a-0c362ec38066" executionId="70e7e83e-fc14-45f7-9b39-cce3cc6a377c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b8b97b02-5edd-038e-93db-f8f1db5a4d6e" executionId="0e9169ba-49c9-4b58-85b6-9cdefe7dfe5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04bd9787-547a-c413-32c9-48ce2b6c8f52" executionId="56465549-a548-4c75-aa90-637939595065" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc45b4c1-4a71-34b2-730a-6aa67e0a41a8" executionId="38a69032-d9e1-4380-ae6e-239fa02b7670" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea22d617-b073-7138-f9e9-1623e26405fe" executionId="6ef23346-5579-43db-bb84-3b3b811163b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49f7c3ed-476b-de5b-a567-a8490ef69160" executionId="340589a7-d8fb-4900-babc-bd5ad7f99609" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c24bf41d-9555-6a96-15fd-43fb65af5715" executionId="a76b0879-b3e8-463b-a4ad-340c41cb8dc2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="934de335-af0b-f8f9-34f3-1bbbf28a39f6" executionId="b11cfb48-85fc-4497-94aa-2121db17f966" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c80b66e2-194e-cdaa-3345-cdcf3e669b38" executionId="982c7feb-4bc9-491f-ab87-9b075a692d41" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a1770fb-4dc6-381a-0465-82a4637e6d14" executionId="a4279dbb-976e-4cfe-acf0-d31cdd482e0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c011c37-750e-02ce-6ed2-ed3915452d36" executionId="69bfc4f2-5dbd-44c1-bfc9-b1548cd49617" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3328e5f-ad9c-85aa-be0c-fb85695eb5bf" executionId="98c0d1aa-5da8-42e3-82b9-ae3d5ec4d900" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d843ccb-d8cc-0944-e532-07d92d55b73e" executionId="a2ce2299-cd87-45f2-b14d-a82caa2a03da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bab83788-1aad-4bdc-c752-354bb3b7846c" executionId="1f4d9195-a1a4-435f-876d-e6493278b124" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dee52652-f694-14f3-d87b-28914443db21" executionId="a42c0f46-d04b-4f9e-883d-776769a2ef08" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec333ae4-d65d-d173-5113-dc8124154ee5" executionId="a0f83c4e-9c99-4a95-b52a-911fa1b1b007" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a616e231-f3f8-97a8-0deb-672041d7bf5d" executionId="29f7fc21-0359-4e4d-802e-6dc7ac990949" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a6c73803-e08d-1dc6-7ec3-077ff4b70ae8" executionId="d60969db-93ec-4f50-bd1c-7a7bb05939c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52b48828-8fc4-4b08-7c25-ec55003a54ef" executionId="d11f20a0-325a-4c7a-8e47-eca9d854d0be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7793dbaa-579c-1157-01c4-531db297c1f3" executionId="14f33ee4-2643-43d0-9807-d9802487e007" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54d6e4a3-138c-eb3b-3f35-dd9b40bb5f06" executionId="a7905b03-287c-4e5d-931c-fd842e0a2e3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dbef0cf6-e9d3-658b-07f9-87f22e5d5689" executionId="d989108f-66f8-4687-91bd-7eaa7ee29e38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ae91daf1-32ce-a234-2301-7d14080d20e4" executionId="b0aa2562-a0e0-49cd-97f0-3f20c3457615" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2bb4c712-393c-1e49-862d-e2fe7584d47e" executionId="3bfdb27d-2b43-4e2e-a1f1-c6825d6709ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="83fc7fff-fa13-de12-2e87-a683e5d73b05" executionId="e0cfe7f8-e377-4b83-b647-bca2d50f430e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05774033-0861-5717-910c-eb57eae566a6" executionId="331b4472-ab6b-4ec9-8922-90797738ab82" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73c97c1f-f678-cca6-fbf7-c7f87628113b" executionId="456a089e-ac3c-4cf6-8dd9-e8c7ace1f920" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90c96183-3cd0-55e4-c78f-f771d09d06c5" executionId="0e07c8ed-e454-46be-9478-55c1779c7640" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="160cec22-bcbc-e36f-6662-f4b2b718f138" executionId="8b8c4c84-923e-4a3b-9f96-144d272aa3aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="65383359-1398-8e84-011b-4be6651a9c1f" executionId="25794f01-0f7a-4310-9067-340cf9b4b825" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cbb2b59-e4c1-830c-c81b-a13a1d3ab21f" executionId="33b58fb2-4ca8-4642-bac6-861686463e1a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c4a0fdc-ad83-d9b1-fe6d-92188cc6329a" executionId="0284b30b-f81c-4e6c-990e-2341b2f5c666" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="95dedf37-b449-7440-036f-feef4913bf3b" executionId="8e767a18-fe25-4b7d-ab54-63784f937098" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b6ff9551-550a-b179-512c-4215997f546f" executionId="9b8dc24c-61ba-48cc-b145-b689c3d30931" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e84d580-92f7-3e9f-990e-d78eeac17fcc" executionId="e2f7a353-e399-4738-92fa-8fe7a6ef2295" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3466562b-051e-5a6c-8f57-713af9bea0dc" executionId="427ada49-62af-4471-a068-092254258196" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4c115b3-f852-b001-5373-e13d5cd038ad" executionId="2c397631-c0ff-49fe-ab13-f3b6eb348ff2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="60253119-4c02-3e7b-65a0-b1d736937fe6" executionId="e955567e-e22b-4417-aba2-8f7928dcd45a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e065466-794c-166d-a846-c6c1ebbe4543" executionId="7749a804-7e40-4922-bf73-867ff1e81a26" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04dd0945-e96e-e9c0-3739-1156dbcb8549" executionId="b1ea116a-5632-4271-8c04-e534cda13b98" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54a7163b-30ef-430d-29ff-6a98f8904b7e" executionId="8b8f5fbc-e976-4a4a-8aeb-a41604ce22cd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5d1c5ed4-1def-55a3-7572-05d0b55b42e0" executionId="ad902db3-79f6-47f1-8891-6f6b76497753" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42321baa-4c22-10a6-f719-62c4ebe46d78" executionId="d3f9beb5-4cca-404c-86e7-7e71297b7778" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="791e324a-f9f5-887e-0dac-9245aacbfa1a" executionId="65ad9b8a-d4d9-43b7-89b3-0a6f991ab288" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f899782-0abc-5450-da00-33f21208a929" executionId="1f35985e-7254-4da6-a36a-f519219bead8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73fc752d-02f8-0ecb-0f86-e6aa77807fce" executionId="67c4118f-f868-4a31-a331-0c7458c73133" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="885155de-7d80-adfd-3ef0-d475318a68d7" executionId="077bb019-0510-4663-8c58-6e95db009aa4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a680012-9b4b-42a8-eba3-b7ac3ca8ed3b" executionId="8109df10-4336-42e6-9d0b-8aa9486b1eec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac9593df-ed58-d69d-e43a-61ed71f31408" executionId="a8bcb84d-8968-4e75-9b5a-3c8fed0a58bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9974e7e-97cc-6b46-88a3-ac970c71c337" executionId="5a357e9e-85d8-4a67-8701-285cb950cc44" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7611c84b-55c5-c369-e97b-99345d1f32f2" executionId="e64ad87e-41ac-4c8c-bbbd-b098fa6194c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="61675ae5-4c64-18fd-3bb6-2deb43c92ed3" executionId="ae270c38-e5a0-4b28-b259-0101b4faa2ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8cf57e9b-b761-1f7b-6349-67fbb5eaeee2" executionId="b74f33ab-1c55-49d6-907f-f40c1c1533cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec62c6da-bcdc-1a43-6e16-9da83f3e83de" executionId="52762029-98e3-4bd1-9b23-33f523515196" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8a89daa-283d-8cce-a9ab-333d5280d7e8" executionId="38986c9b-2eb3-4059-8fae-ef33fd4aaa61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="57395e97-2b3e-5551-1bcd-c454b28a8436" executionId="8d3537e0-1dfc-4395-aedd-f8fcf74371d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49947d05-edab-7e73-0114-36596eba2224" executionId="f6aa58b0-b78e-4a35-bfa4-e2a583660b3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b94b433-3702-16ef-8d4a-a0793a68084a" executionId="0e35383f-0e9d-4c91-bc17-2c71c710b67b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="538efd45-15bd-5b30-db20-350b702739cb" executionId="339837b1-ea11-4423-a7c5-d5b9f56bb33d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="798d50bf-36b9-7b05-81c0-2f946dfbb2f4" executionId="70249611-7e7a-4a08-b5ea-da5c2f54dd04" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ca07d40-46d0-b75e-f1b6-40485dced7bf" executionId="d335b738-b224-4bbf-b007-f7da183461e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dbf839f3-1b29-ad47-2497-a4856b2cdb88" executionId="737397de-a6c7-4c39-b2ba-69b64e4a70ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="82864c15-5505-7bce-e3e5-20b34a05e5ab" executionId="28c0ad16-3caa-4e7d-81c6-8184346921a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="55b994c7-3b1e-9039-ea64-462bb4fc1102" executionId="80183fa0-2241-4d67-b114-6227a4512b07" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="300b6f7d-88b1-225b-81d0-d3991ed90e9d" executionId="2cd598f3-2b1e-4d18-9537-71f4d421e06f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e7b6e58c-15e2-1c1a-7ff8-56cd03fc5339" executionId="92741a9d-7f6e-4778-9ac3-e03022e855a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e396fbee-692b-f08e-9a7f-bf2b19a4e8d9" executionId="f7df21ac-8e5a-4a0e-bd17-d931cf811548" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fc9d3af8-2908-f74c-7f6d-8cc9bc3b5985" executionId="4df03416-e8dd-4f46-ad34-dd8fb1ea0e02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89a0c3eb-9a10-c13f-0420-5b95f1779695" executionId="9560cad4-be18-46c2-b2c7-5fffd97b1871" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee213223-fcdc-b8b1-8432-9d43b211917e" executionId="9ccf428e-5cae-4d19-98cc-26d6a7a3a4b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5424597c-7ec2-aaad-6f88-4b37ca5d175f" executionId="d05e1512-6043-4d77-955d-0f654f5f463f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c295b81-d7e6-a35a-5bf2-1c516a2fdc4d" executionId="55af70e2-4d7d-4cfb-b358-8e7e52eab659" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="df5790e1-a88f-bbbc-7b9a-5ffcb6d303d4" executionId="7a18de0c-0026-4bfb-9fdc-2db70d41c9e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ccf36209-8200-2735-383b-3db6b593a641" executionId="8756531f-6964-455e-8627-cdb21b6ecaa8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="31cde91e-588b-b246-fe6d-8cc9d6699771" executionId="6046bc8c-29df-44bc-9ff6-5f828ffc5fac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4c5b679-7faa-c3c3-1ba1-8b8a5a1cade9" executionId="a24756fb-66ea-4067-9365-f338424203e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="126578bb-4ab7-1175-2a1f-9d74d0a2a539" executionId="45e64a76-d8ae-4506-b7a4-1c3d79082999" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="777b84e8-f4b3-1c16-8698-70f4efe7c677" executionId="6af43031-0267-401d-bfb4-86b74df98fe2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9634dabd-aa34-43a2-26b5-42029baa5bd4" executionId="adce13e8-0ce9-47d3-abb8-7706ad37f9d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ad6c889b-9776-943c-1668-7be69b8766d3" executionId="4feabd0c-ff25-4d9b-be5a-e91c37eb4b37" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="250312ba-45f3-f2a2-5f5b-f68f1de2d467" executionId="2abd3171-7f3a-4bbf-998d-fd40257423af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7b34ec8-45c1-3086-2522-8e05df1fb973" executionId="97ae2ba5-7da5-4cef-b3e9-61c921ddac02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fd09cb2d-5fc8-0054-5f8e-49a22f7275d5" executionId="058a2daf-bb28-4828-8a5c-5f8e414afb9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf36c91e-e6d7-e9de-8182-0e0bded6e071" executionId="e7a2c7f4-ffd1-4f69-b016-bc8c4304a8e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="97abdaf4-7a2b-91ad-459d-55604c5868c5" executionId="f1c18f0a-c334-4a5b-b07d-e5edf611dc4f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6db87122-a9cd-864f-f91e-3c0be3dae264" executionId="8abad3ee-e51b-4e6b-9061-05cf329b540d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2e76667-437c-9a72-b9a3-c3254a9737c7" executionId="e7d587ed-65f4-4394-ab19-8f9ca4bc6b6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="03fb83bc-37f9-6279-d552-6ab92fdeaf0c" executionId="d4ceb8a2-9d92-4808-89f3-551df8e0cacc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78234765-2208-fc90-af7c-2fec17072779" executionId="dd79563a-ab39-4e4a-b773-dc2d1127be20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11a624d8-40c2-2c5b-49e0-7b9bad65ff1a" executionId="5caced4d-b401-45d3-bd56-b93a4c2f0b6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f10b757-974f-460f-746b-53d789f3b8b1" executionId="e9e70bc7-bef8-4242-b156-45c62ff8e830" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="be48ee49-5629-a22b-8f86-eddc1f2d7800" executionId="23a61c57-7b49-44ce-9bbe-ba38615b09e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9da1c174-f43b-ddb0-375a-8efb38762c05" executionId="ed4efeac-2086-4e51-a488-e8366c84c86e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3a67ade-d1b0-ea1e-d585-ca0adad6eb30" executionId="0e8e8818-5106-484f-97e0-7e91bac0c809" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11683885-c8d1-86e4-4271-3a874eed182a" executionId="2b7acffd-14d8-48c0-8e12-665cdab5366f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="888e452f-83e3-cfaf-47c8-1f47e1b81716" executionId="9f03f00e-db0b-439b-87ac-eca79164bf51" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f40faa33-4f1c-999e-1669-fecd9e09aecf" executionId="ba815c04-75c8-48b9-a60d-0f75e5c2a5d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c1c9e2ed-4d98-7cda-df33-7853e7f7d7a4" executionId="239fee0d-8260-4645-b065-e793164f714e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4ab68b4-f595-9b30-4644-cabe72a3b81f" executionId="61c3f9ae-911d-42f4-a828-e9aa9ce43200" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="43f30db5-69ce-d3f2-2dc7-8aad3616194d" executionId="da6ca738-ab04-4cfc-8ece-4a455adf691e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0f262c5-84b5-bddd-9a98-401d8f1083ee" executionId="06e12981-caa1-437d-abd5-d3d4a79cddf4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="26038d57-9521-14e0-ebcf-97dd2aab2171" executionId="3a6174a1-5206-481b-9d7d-ea9416b85bf9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e8c7c19-66cf-4c6d-6e92-70484a19cafa" executionId="44e33f3e-ee08-446b-bd08-32c29b55a319" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fbe61e14-6dfc-decb-68e0-f3b192f02ab7" executionId="4f122a26-7a4a-41ac-8b2c-781f6b99b033" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fc245d61-ccc2-75c8-6aab-781cbb782942" executionId="5b997ba6-e8e6-45d7-be4e-eb04f4331853" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7ef5f66e-60cc-befb-714f-f3550c6ef073" executionId="dfbd20f6-31ca-4cf1-b376-ee446502e39b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d08d558c-a212-2a90-2292-bc68910c0d09" executionId="02da1142-6833-4799-86a2-ac3705c988f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="11ac459e-df7a-8ab7-d1b6-529e445539ef" executionId="e70a4074-b8f2-4874-83e6-0a9317947887" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42f415c2-fb88-e0b2-a114-dc50695b4b3d" executionId="ac1c3aad-d49c-4000-9cdd-38a5272e24f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="79af3be7-0f7b-bed8-5e2c-fe55183debfa" executionId="71441743-407c-4657-abb8-e0a120ba55b0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35602ef6-e4d0-391d-8aa4-fbb44b3b8639" executionId="3a2901d7-b0d0-457d-9743-cbe3e003c597" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="32fcf582-ebdf-c618-5ed1-cbd1e48622db" executionId="c1ef6fd5-c126-4cd7-9f4c-9ffc26cf97ce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99dc1c0f-17e2-1ca5-4ed6-b7a153d0a941" executionId="b6f6270c-21d8-4180-b612-2cc6ab3626d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="96c58096-7f90-45cd-955c-5a4016af87d1" executionId="e719f5d2-6368-489b-b7e9-5a33fea1fd18" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29a48a57-be1f-e2ad-397a-3bfa1b99967f" executionId="615ccc82-79ce-43a3-a48a-a66977911464" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="20b776ac-3ff6-e2bd-5fc7-a83bcd0d4ce3" executionId="6bd8769c-e0e5-434b-9c18-936ec94a33e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd5fa932-47fc-9b32-c71a-3f85f65cf1b8" executionId="1ee6cae0-2c44-4d2f-913a-059d82cdcb72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="77ed5d95-e058-ad31-03b1-f136a6c88417" executionId="40c6b3f8-1112-4c78-bd82-a09a64cea5eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="38f13c2a-e4a2-8c72-6bdd-315d00112cba" executionId="e921f26c-08fc-4ab4-954a-51e5395b60ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ff3fa527-2d6f-2ce7-35e0-9d4b9d426c21" executionId="da369896-46b4-4f36-81f2-2587aef3e28a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e7b1c85-a438-b5fa-f42c-27c703c66b21" executionId="8306fcbd-e63c-47da-8791-6fde9ed723f5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d720a71-0e27-2b73-7c8c-964981e5abdc" executionId="fed5434e-7db4-4e28-8d7b-db6b6837c918" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c79b0bc9-b69b-cac8-6984-85d6934f4db1" executionId="d684cfef-2fe0-4fd0-9635-40032ba230c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04f49772-32a1-488e-69c6-a255cc955d76" executionId="dd4c2ece-6f47-4767-ac1c-1af27ffc3add" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d903eb4a-efed-e801-a971-e1d2446a5d24" executionId="1e739da3-5652-456a-9274-b08d2d5a6940" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="de191661-dee2-fb26-a3cd-a19e869a3d1a" executionId="4fe22306-01cf-49a8-b2d3-46454ad7e228" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8754ba35-c888-46be-6e6d-ecfd0b9884af" executionId="7f64e3f0-20f8-407f-af4c-dab0be1bd3f0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a01244b-6f15-7249-8ea9-1f58189bbfc1" executionId="13a9ed3c-dab1-41b2-97fc-6127317fa1db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bc22d645-fc4d-65a9-5ca9-76f653186480" executionId="c54bea22-335b-4ee8-ae56-9fcbb79a29c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0384bf74-fb70-1a04-825c-8ada86fe45c0" executionId="8c2c2a67-47c2-4273-96b8-39efccd10e29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c35b6a80-5b79-3795-55d8-38760e60134b" executionId="47a84580-6b5d-4d10-8e87-2ba5128a4992" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3040cf7c-bb69-fd13-8105-bbc9f0f23c8b" executionId="bcb71ebd-9d48-4b47-8ddf-b396e720fc24" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="39fd0507-c746-df7c-78eb-33264ba539a9" executionId="bc5aa36e-5f82-403b-bb82-f78cf3cd2e12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="147cd71f-78bb-606a-8591-71dbfcfd57f6" executionId="447bf74f-cf6a-4473-a780-3a49bed1a92d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ea5300a-4156-6fef-dfc8-63fed6467f4a" executionId="0c8ad374-10b2-45df-9a98-464fb3b858b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9b602c84-6781-2c9a-c057-da49a13c681c" executionId="9b82acf3-2fc2-4bd1-987f-315ddeded89c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35211655-17d0-9d3a-3ade-ad677bc93d8b" executionId="8a3138e3-9ef7-4712-bc73-e78eb4ea495e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6de4a39c-01e0-aff0-18dd-2182fe339299" executionId="297bf20b-d1de-47f6-807c-7680cebeef55" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="1433" executed="1433" passed="1433" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.1+bf6400fd51 (64-bit .NET 8.0.17)
[xUnit.net 00:00:00.11]   Discovering: Moq.Analyzers.Test
[xUnit.net 00:00:00.64]   Discovered:  Moq.Analyzers.Test
[xUnit.net 00:00:01.11]   Starting:    Moq.Analyzers.Test
[xUnit.net 00:01:24.45]   Finished:    Moq.Analyzers.Test
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="fv-az1057-923" outcome="Warning" timestamp="2025-06-21T12:04:33.1149371+00:00">
        <Text>Data collection : Unable to find a datacollector with friendly name 'XPlat Code Coverage'.</Text>
      </RunInfo>
      <RunInfo computerName="fv-az1057-923" outcome="Warning" timestamp="2025-06-21T12:04:33.1160611+00:00">
        <Text>Data collection : Could not find data collector 'XPlat Code Coverage'</Text>
      </RunInfo>
    </RunInfos>
  </ResultSummary>
</TestRun>