name: Main build

on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  merge_group:
    branches:
      - main
  workflow_call: # Allow to be called from the release workflow
  schedule:
    - cron: '0 3 * * *' # Nightly run for performance validation

permissions:
  security-events: write  # required for CodeQL
  packages: read
  contents: read
  actions: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-11-arm, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    env:
      IS_CODACY_COVERAGE_ALLOWED: ${{ secrets.CODACY_PROJECT_TOKEN != '' }}
      IS_QLTY_COVERAGE_ALLOWED: ${{ secrets.QLTY_COVERAGE_TOKEN != '' }}

    steps:
    - name: Setup, Restore, and Build Solution
      uses: ./.github/actions/setup-restore-build

    - name: Test
      run: dotnet test --no-build --configuration Release --settings ./build/targets/tests/test.runsettings

    - name: Upload binlogs
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: binlogs-${{ matrix.os }}
        path: ./artifacts/logs
        if-no-files-found: error

    - name: Upload *.received.* files
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: verify-test-results
        path: |
          **/*.received.*

    - name: Upload SARIF files
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: SARIF files (${{ matrix.os }})
        path: ./artifacts/obj/**/*.sarif

    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: .NET Test Reports (${{ matrix.os }})
        path: "artifacts/TestResults/**/*.trx"
        if-no-files-found: error

    - name: Upload Code Coverage Report
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: .NET Code Coverage Reports (${{ matrix.os }})
        path: "artifacts/TestResults/coverage/**"

    - name: Publish coverage summary to GitHub
      run: cat artifacts/TestResults/coverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Upload coverage data to Codacy
      if: ${{ runner.os == 'Linux' && env.IS_CODACY_COVERAGE_ALLOWED == 'true' }}
      uses: codacy/codacy-coverage-reporter-action@v1.3.0
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: ${{ github.workspace }}/artifacts/TestResults/coverage/Cobertura.xml

    - name: Upload coverage data to Qlty
      if: ${{ runner.os == 'Linux' && env.IS_QLTY_COVERAGE_ALLOWED == 'true' }}
      uses: qltysh/qlty-action/coverage@v1
      with:
        token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
        files: ${{ github.workspace }}/artifacts/TestResults/coverage/Cobertura.xml

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.os }}
        path: |
          ./artifacts/package
        if-no-files-found: error

  performance:
    if: github.event_name == 'schedule' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        os: [windows-11-arm, ubuntu-24.04-arm]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Setup, Restore, and Build Solution
      uses: ./.github/actions/setup-restore-build

    - name: Validate performance
      shell: pwsh
      # BenchmarkDotNet settings:
      #   --warmupCount 2: Two warmup iterations to allow JIT and runtime optimizations to stabilize before measurement.
      #   --invocationCount 15: Fifteen measured iterations for statistically meaningful results and to reduce noise.
      # These values balance CI cost and reliability, as recommended in issue #553.
      run: ${{ github.workspace }}/build/scripts/perf/PerfCore.ps1 -v diag -diff -ci

    - name: Upload performance files
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: Performance files
        path: "./artifacts/performance/**"
