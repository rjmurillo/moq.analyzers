# This workflow will read information about an issue and attempt to label it initially for triage and sorting

name: Label issues
on:
  issues:
    types:
      - reopened
      - opened

jobs:
  label_issues:
    name: "Issue: add labels"
    if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
    runs-on: ubuntu-24.04-arm
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_ACTIONS_PR_WRITE }}
          script: |
            // Get the issue body and title
            const body = context.payload.issue.body
            let title = context.payload.issue.title
            
            // Define the labels array
            let labels = ["triage"]
            
            // Check if the body or the title contains the word 'PowerShell' (case-insensitive)
            if ((body != null && body.match(/powershell/i)) || (title != null && title.match(/powershell/i))) {
              // Add the 'powershell' label to the array
              labels.push("powershell")
            }
            
            // Check if the body or the title contains the words 'dotnet', '.net', 'c#' or 'csharp' (case-insensitive)
            if ((body != null && body.match(/.net/i)) || (title != null && title.match(/.net/i)) ||
                (body != null && body.match(/dotnet/i)) || (title != null && title.match(/dotnet/i)) ||
                (body != null && body.match(/C#/i)) || (title != null && title.match(/C#/i)) ||
                (body != null && body.match(/csharp/i)) || (title != null && title.match(/csharp/i))) {
              // Add the '.NET' label to the array
              labels.push(".NET")
            }

            // Check if the body or title contains explainer or prd
            if ((body != null && body.match(/explainer/i)) || (title != null && title.match(/explainer/i)) ||
                (body != null && body.match(/prd/i)) || ((title != null && title.match(/prd/i))) {

                labels.push("explainer")
            }

            // Check if the body or title contains "Tasks For"
            if ((title != null && title.match(/Tasks for/i))) {
                labels.push("epic")
            }

            // Add the labels to the issue
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });
